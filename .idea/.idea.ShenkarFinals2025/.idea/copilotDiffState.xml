<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Assets/Scenes/LevelsTemplatePipeline.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scenes/LevelsTemplatePipeline.cs" />
              <option name="originalContent" value="using System.Linq;&#10;using UnityEditor.SceneTemplate;&#10;using UnityEngine;&#10;using UnityEngine.SceneManagement;&#10;&#10;public class LevelsTemplatePipeline : ISceneTemplatePipeline&#10;{&#10;    public virtual bool IsValidTemplateForInstantiation(SceneTemplateAsset sceneTemplateAsset)&#10;    {&#10;        return true;&#10;    }&#10;&#10;    public virtual void BeforeTemplateInstantiation(SceneTemplateAsset sceneTemplateAsset, bool isAdditive, string sceneName)&#10;    {&#10;        &#10;    }&#10;&#10;    public virtual void AfterTemplateInstantiation(SceneTemplateAsset sceneTemplateAsset, Scene scene, bool isAdditive, string sceneName)&#10;    {&#10;        var sceneFolder = System.IO.Path.Combine(&quot;Assets&quot;, &quot;Scenes&quot;);&#10;        var sceneFiles = System.IO.Directory.GetFiles(sceneFolder, &quot;Level*.unity&quot;);&#10;        int levelPrefixLength = &quot;Level&quot;.Length;&#10;        int maxLevel = sceneFiles&#10;            .Select(System.IO.Path.GetFileNameWithoutExtension)&#10;            .Where(fileName =&gt; fileName.StartsWith(&quot;Level&quot;))&#10;            .Select(fileName =&gt; int.TryParse(fileName[levelPrefixLength..], out int num) ? num : 0)&#10;            .DefaultIfEmpty(0)&#10;            .Max();&#10;        string newLevelName = $&quot;Level{maxLevel + 1}&quot;;&#10;        scene.name = newLevelName;&#10;        SceneManager.SetActiveScene(scene);&#10;        Debug.Log($&quot;[LevelsTemplatePipeline] Instantiated new level: {newLevelName}&quot;);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using System.Linq;&#10;using UnityEditor.SceneTemplate;&#10;using UnityEngine;&#10;using UnityEngine.SceneManagement;&#10;&#10;public class LevelsTemplatePipeline : ISceneTemplatePipeline&#10;{&#10;    public virtual bool IsValidTemplateForInstantiation(SceneTemplateAsset sceneTemplateAsset)&#10;    {&#10;        return true;&#10;    }&#10;&#10;    public virtual void BeforeTemplateInstantiation(SceneTemplateAsset sceneTemplateAsset, bool isAdditive, string sceneName)&#10;    {&#10;        &#10;    }&#10;&#10;    public virtual void AfterTemplateInstantiation(SceneTemplateAsset sceneTemplateAsset, Scene scene, bool isAdditive, string sceneName)&#10;    {&#10;        var sceneFolder = System.IO.Path.Combine(&quot;Assets&quot;, &quot;Scenes&quot;);&#10;        var sceneFiles = System.IO.Directory.GetFiles(sceneFolder, &quot;Level*.unity&quot;);&#10;        int levelPrefixLength = &quot;Level&quot;.Length;&#10;        int maxLevel = sceneFiles&#10;            .Select(System.IO.Path.GetFileNameWithoutExtension)&#10;            .Where(fileName =&gt; fileName.StartsWith(&quot;Level&quot;))&#10;            .Select(fileName =&gt; int.TryParse(fileName[levelPrefixLength..], out int num) ? num : 0)&#10;            .DefaultIfEmpty(0)&#10;            .Max();&#10;        string newLevelName = $&quot;Level{maxLevel + 1}&quot;;&#10;        scene.name = newLevelName;&#10;        SceneManager.SetActiveScene(scene);&#10;        Debug.Log($&quot;[LevelsTemplatePipeline] Instantiated new level: {newLevelName}&quot;);&#10;&#10;        // Show save file dialog with the new scene name as default&#10;#if UNITY_EDITOR&#10;        string savePath = UnityEditor.EditorUtility.SaveFilePanel(&#10;            &quot;Save New Scene&quot;,&#10;            sceneFolder,&#10;            newLevelName,&#10;            &quot;unity&quot;&#10;        );&#10;        if (!string.IsNullOrEmpty(savePath))&#10;        {&#10;            UnityEditor.SceneManagement.EditorSceneManager.SaveScene(scene, savePath);&#10;            Debug.Log($&quot;[LevelsTemplatePipeline] Scene saved to: {savePath}&quot;);&#10;        }&#10;#endif&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Collectables/Score/ScoreCollectionTracker.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Collectables/Score/ScoreCollectionTracker.cs" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Core/Data/GameData.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Core/Data/GameData.cs" />
              <option name="originalContent" value="using System;&#10;using System.Collections.Generic;&#10;using LevelSelection;&#10;using UnityEngine;&#10;&#10;namespace Core.Data&#10;{&#10;    [Serializable]&#10;    public class GameData&#10;    {&#10;        [Header(&quot;Player Data&quot;)] &#10;        public const int MaxLives = 3;&#10;        public int lives = 3;&#10;        public int score;&#10;        public int maxScore; // Track highest score ever achieved&#10;&#10;        [Header(&quot;Level Progress&quot;)] &#10;        public string currentLevel = &quot;Level_01&quot;;&#10;&#10;        // Level Selection Data&#10;        public List&lt;string&gt; unlockedLevels = new() { &quot;Level_01&quot; };&#10;        public List&lt;string&gt; completedLevels = new(); // Added for EndLevelZone&#10;        public int selectedLevelIndex;&#10;&#10;        // Enhanced timing and scoring data&#10;        public Dictionary&lt;string, float&gt; LevelBestTimes = new();&#10;        public Dictionary&lt;string, int&gt; LevelBestScores = new(); // Best score per level&#10;        public Dictionary&lt;string, bool&gt; LevelCompleted = new();&#10;        &#10;        public float bestTime = float.MaxValue; // Overall best time&#10;&#10;        [Header(&quot;Power-ups&quot;)] &#10;        public bool hasFireball;&#10;        public bool hasAxe;&#10;&#10;        [Header(&quot;Settings&quot;)] &#10;        public float musicVolume = 1.0f;&#10;        public float sfxVolume = 1.0f;&#10;&#10;        [Header(&quot;Collectables&quot;)] &#10;        public int fruitCollected;&#10;&#10;        // Cached level discovery data&#10;        public List&lt;LevelData&gt; cachedLevelPoints = new();&#10;        public bool levelPointsCacheValid = false;&#10;&#10;        // Constructor for easy initialization&#10;        public GameData()&#10;        {&#10;            // Default values are set by field initializers&#10;        }&#10;&#10;        // Copy constructor&#10;        public GameData(GameData other)&#10;        {&#10;            lives = other.lives;&#10;            score = other.score;&#10;            maxScore = other.maxScore;&#10;            currentLevel = other.currentLevel;&#10;            bestTime = other.bestTime;&#10;            hasFireball = other.hasFireball;&#10;            hasAxe = other.hasAxe;&#10;            musicVolume = other.musicVolume;&#10;            sfxVolume = other.sfxVolume;&#10;            fruitCollected = other.fruitCollected;&#10;            unlockedLevels = new List&lt;string&gt;(other.unlockedLevels);&#10;            completedLevels = new List&lt;string&gt;(other.completedLevels);&#10;            selectedLevelIndex = other.selectedLevelIndex;&#10;            LevelBestTimes = new Dictionary&lt;string, float&gt;(other.LevelBestTimes);&#10;            LevelBestScores = new Dictionary&lt;string, int&gt;(other.LevelBestScores);&#10;            LevelCompleted = new Dictionary&lt;string, bool&gt;(other.LevelCompleted);&#10;            cachedLevelPoints = new List&lt;LevelData&gt;(other.cachedLevelPoints);&#10;            levelPointsCacheValid = other.levelPointsCacheValid;&#10;        }&#10;&#10;        // Reset to default values&#10;        public void Reset()&#10;        {&#10;            lives = MaxLives;&#10;            score = 0;&#10;            maxScore = 0;&#10;            currentLevel = &quot;Level_01&quot;;&#10;            bestTime = float.MaxValue;&#10;            hasFireball = false;&#10;            hasAxe = false;&#10;            musicVolume = 1.0f;&#10;            sfxVolume = 1.0f;&#10;            fruitCollected = 0;&#10;            &#10;            // Reset level selection data&#10;            unlockedLevels = new List&lt;string&gt; { &quot;Level_01&quot; };&#10;            completedLevels = new List&lt;string&gt;();&#10;            selectedLevelIndex = 0;&#10;            LevelBestTimes = new Dictionary&lt;string, float&gt;();&#10;            LevelBestScores = new Dictionary&lt;string, int&gt;();&#10;            LevelCompleted = new Dictionary&lt;string, bool&gt;();&#10;            cachedLevelPoints = new List&lt;LevelData&gt;();&#10;            levelPointsCacheValid = false;&#10;        }&#10;&#10;        /// &lt;summary&gt;&#10;        /// Update best time for a specific level&#10;        /// &lt;/summary&gt;&#10;        public void UpdateLevelBestTime(string levelName, float completionTime)&#10;        {&#10;            if (string.IsNullOrEmpty(levelName)) return;&#10;            &#10;            if (!LevelBestTimes.ContainsKey(levelName) || completionTime &lt; LevelBestTimes[levelName])&#10;            {&#10;                LevelBestTimes[levelName] = completionTime;&#10;                &#10;                // Update overall best time if this is better&#10;                if (completionTime &lt; bestTime)&#10;                {&#10;                    bestTime = completionTime;&#10;                }&#10;            }&#10;        }&#10;&#10;        /// &lt;summary&gt;&#10;        /// Update best score for a specific level&#10;        /// &lt;/summary&gt;&#10;        public void UpdateLevelBestScore(string levelName, int levelScore)&#10;        {&#10;            if (string.IsNullOrEmpty(levelName)) return;&#10;            &#10;            if (!LevelBestScores.ContainsKey(levelName) || levelScore &gt; LevelBestScores[levelName])&#10;            {&#10;                LevelBestScores[levelName] = levelScore;&#10;            }&#10;        }&#10;&#10;        /// &lt;summary&gt;&#10;        /// Update max score if current score is higher&#10;        /// &lt;/summary&gt;&#10;        public void UpdateMaxScore(int currentScore)&#10;        {&#10;            if (currentScore &gt; maxScore)&#10;            {&#10;                maxScore = currentScore;&#10;            }&#10;        }&#10;&#10;        /// &lt;summary&gt;&#10;        /// Get best time for a specific level&#10;        /// &lt;/summary&gt;&#10;        public float GetLevelBestTime(string levelName)&#10;        {&#10;            return LevelBestTimes.TryGetValue(levelName, out float time) ? time : float.MaxValue;&#10;        }&#10;&#10;        /// &lt;summary&gt;&#10;        /// Get best score for a specific level&#10;        /// &lt;/summary&gt;&#10;        public int GetLevelBestScore(string levelName)&#10;        {&#10;            return LevelBestScores.TryGetValue(levelName, out int score) ? score : 0;&#10;        }&#10;&#10;        private static GameData CreateDefaultData() =&gt;&#10;            new()&#10;            {&#10;                lives = MaxLives,&#10;                score = 0,&#10;                currentLevel = &quot;Level_01&quot;,&#10;                bestTime = float.MaxValue,&#10;                hasFireball = false,&#10;                hasAxe = false,&#10;                musicVolume = 1.0f,&#10;                sfxVolume = 1.0f,&#10;                fruitCollected = 0,&#10;                unlockedLevels = new List&lt;string&gt; { &quot;Level_01&quot; },&#10;                selectedLevelIndex = 0,&#10;                LevelBestTimes = new Dictionary&lt;string, float&gt;(),&#10;                LevelCompleted = new Dictionary&lt;string, bool&gt;()&#10;            };&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using System;&#13;&#10;using System.Collections.Generic;&#13;&#10;using LevelSelection;&#13;&#10;using UnityEngine;&#13;&#10;&#13;&#10;namespace Core.Data&#13;&#10;{&#13;&#10;    [Serializable]&#13;&#10;    public class GameData&#13;&#10;    {&#13;&#10;        [Header(&quot;Player Data&quot;)] &#13;&#10;        public const int MaxLives = 3;&#13;&#10;        public int lives = 3;&#13;&#10;        public int score;&#13;&#10;        public int maxScore; // Track highest score ever achieved&#13;&#10;&#13;&#10;        [Header(&quot;Level Progress&quot;)] &#13;&#10;        public string currentLevel = &quot;Level_01&quot;;&#13;&#10;&#13;&#10;        // Level Selection Data&#13;&#10;        public List&lt;string&gt; unlockedLevels = new() { &quot;Level_01&quot; };&#13;&#10;        public List&lt;string&gt; completedLevels = new(); // Added for EndLevelZone&#13;&#10;        public int selectedLevelIndex;&#13;&#10;&#13;&#10;        // Enhanced timing and scoring data&#13;&#10;        public Dictionary&lt;string, float&gt; LevelBestTimes = new();&#13;&#10;        public Dictionary&lt;string, int&gt; LevelBestScores = new(); // Best score per level&#13;&#10;        public Dictionary&lt;string, bool&gt; LevelCompleted = new();&#13;&#10;        &#13;&#10;        public float bestTime = float.MaxValue; // Overall best time&#13;&#10;&#13;&#10;        [Header(&quot;Power-ups&quot;)] &#13;&#10;        public bool hasFireball;&#13;&#10;        public bool hasAxe;&#13;&#10;&#13;&#10;        [Header(&quot;Settings&quot;)] &#13;&#10;        public float musicVolume = 1.0f;&#13;&#10;        public float sfxVolume = 1.0f;&#13;&#10;&#13;&#10;        [Header(&quot;Collectables&quot;)] &#13;&#10;        public int fruitCollected;&#13;&#10;&#13;&#10;        // Cached level discovery data - now using LevelData instead of LevelPoint&#13;&#10;        public List&lt;LevelData&gt; cachedLevelData = new();&#13;&#10;        public bool levelDataCacheValid = false;&#13;&#10;&#13;&#10;        // Constructor for easy initialization&#13;&#10;        public GameData()&#13;&#10;        {&#13;&#10;            // Default values are set by field initializers&#13;&#10;        }&#13;&#10;&#13;&#10;        // Copy constructor&#13;&#10;        public GameData(GameData other)&#13;&#10;        {&#13;&#10;            lives = other.lives;&#13;&#10;            score = other.score;&#13;&#10;            maxScore = other.maxScore;&#13;&#10;            currentLevel = other.currentLevel;&#13;&#10;            bestTime = other.bestTime;&#13;&#10;            hasFireball = other.hasFireball;&#13;&#10;            hasAxe = other.hasAxe;&#13;&#10;            musicVolume = other.musicVolume;&#13;&#10;            sfxVolume = other.sfxVolume;&#13;&#10;            fruitCollected = other.fruitCollected;&#13;&#10;            unlockedLevels = new List&lt;string&gt;(other.unlockedLevels);&#13;&#10;            completedLevels = new List&lt;string&gt;(other.completedLevels);&#13;&#10;            selectedLevelIndex = other.selectedLevelIndex;&#13;&#10;            LevelBestTimes = new Dictionary&lt;string, float&gt;(other.LevelBestTimes);&#13;&#10;            LevelBestScores = new Dictionary&lt;string, int&gt;(other.LevelBestScores);&#13;&#10;            LevelCompleted = new Dictionary&lt;string, bool&gt;(other.LevelCompleted);&#13;&#10;            cachedLevelData = new List&lt;LevelData&gt;(other.cachedLevelData);&#13;&#10;            levelDataCacheValid = other.levelDataCacheValid;&#13;&#10;        }&#13;&#10;&#13;&#10;        // Reset to default values&#13;&#10;        public void Reset()&#13;&#10;        {&#13;&#10;            lives = MaxLives;&#13;&#10;            score = 0;&#13;&#10;            maxScore = 0;&#13;&#10;            currentLevel = &quot;Level_01&quot;;&#13;&#10;            bestTime = float.MaxValue;&#13;&#10;            hasFireball = false;&#13;&#10;            hasAxe = false;&#13;&#10;            musicVolume = 1.0f;&#13;&#10;            sfxVolume = 1.0f;&#13;&#10;            fruitCollected = 0;&#13;&#10;            &#13;&#10;            // Reset level selection data&#13;&#10;            unlockedLevels = new List&lt;string&gt; { &quot;Level_01&quot; };&#13;&#10;            completedLevels = new List&lt;string&gt;();&#13;&#10;            selectedLevelIndex = 0;&#13;&#10;            LevelBestTimes = new Dictionary&lt;string, float&gt;();&#13;&#10;            LevelBestScores = new Dictionary&lt;string, int&gt;();&#13;&#10;            LevelCompleted = new Dictionary&lt;string, bool&gt;();&#13;&#10;            cachedLevelData = new List&lt;LevelData&gt;();&#13;&#10;            levelDataCacheValid = false;&#13;&#10;        }&#13;&#10;&#13;&#10;        /// &lt;summary&gt;&#13;&#10;        /// Update best time for a specific level&#13;&#10;        /// &lt;/summary&gt;&#13;&#10;        public void UpdateLevelBestTime(string levelName, float completionTime)&#13;&#10;        {&#13;&#10;            if (string.IsNullOrEmpty(levelName)) return;&#13;&#10;            &#13;&#10;            if (!LevelBestTimes.ContainsKey(levelName) || completionTime &lt; LevelBestTimes[levelName])&#13;&#10;            {&#13;&#10;                LevelBestTimes[levelName] = completionTime;&#13;&#10;                &#13;&#10;                // Update overall best time if this is better&#13;&#10;                if (completionTime &lt; bestTime)&#13;&#10;                {&#13;&#10;                    bestTime = completionTime;&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        /// &lt;summary&gt;&#13;&#10;        /// Update best score for a specific level&#13;&#10;        /// &lt;/summary&gt;&#13;&#10;        public void UpdateLevelBestScore(string levelName, int levelScore)&#13;&#10;        {&#13;&#10;            if (string.IsNullOrEmpty(levelName)) return;&#13;&#10;            &#13;&#10;            if (!LevelBestScores.ContainsKey(levelName) || levelScore &gt; LevelBestScores[levelName])&#13;&#10;            {&#13;&#10;                LevelBestScores[levelName] = levelScore;&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        /// &lt;summary&gt;&#13;&#10;        /// Update max score if current score is higher&#13;&#10;        /// &lt;/summary&gt;&#13;&#10;        public void UpdateMaxScore(int currentScore)&#13;&#10;        {&#13;&#10;            if (currentScore &gt; maxScore)&#13;&#10;            {&#13;&#10;                maxScore = currentScore;&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        /// &lt;summary&gt;&#13;&#10;        /// Get best time for a specific level&#13;&#10;        /// &lt;/summary&gt;&#13;&#10;        public float GetLevelBestTime(string levelName)&#13;&#10;        {&#13;&#10;            return LevelBestTimes.TryGetValue(levelName, out float time) ? time : float.MaxValue;&#13;&#10;        }&#13;&#10;&#13;&#10;        /// &lt;summary&gt;&#13;&#10;        /// Get best score for a specific level&#13;&#10;        /// &lt;/summary&gt;&#13;&#10;        public int GetLevelBestScore(string levelName)&#13;&#10;        {&#13;&#10;            return LevelBestScores.TryGetValue(levelName, out int score) ? score : 0;&#13;&#10;        }&#13;&#10;&#13;&#10;        private static GameData CreateDefaultData() =&gt;&#13;&#10;            new()&#13;&#10;            {&#13;&#10;                lives = MaxLives,&#13;&#10;                score = 0,&#13;&#10;                currentLevel = &quot;Level_01&quot;,&#13;&#10;                bestTime = float.MaxValue,&#13;&#10;                hasFireball = false,&#13;&#10;                hasAxe = false,&#13;&#10;                musicVolume = 1.0f,&#13;&#10;                sfxVolume = 1.0f,&#13;&#10;                fruitCollected = 0,&#13;&#10;                unlockedLevels = new List&lt;string&gt; { &quot;Level_01&quot; },&#13;&#10;                selectedLevelIndex = 0,&#13;&#10;                LevelBestTimes = new Dictionary&lt;string, float&gt;(),&#13;&#10;                LevelCompleted = new Dictionary&lt;string, bool&gt;()&#13;&#10;            };&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Core/Data/GameDataService.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Core/Data/GameDataService.cs" />
              <option name="originalContent" value="using System;&#10;using System.Collections.Generic;&#10;using System.Threading.Tasks;&#10;using LevelSelection;&#10;using LevelSelection.Services;&#10;using VContainer;&#10;&#10;namespace Core.Data&#10;{&#10;    public class GameDataService : IGameDataService&#10;    {&#10;        private readonly IGameDataRepository _repository;&#10;        private readonly ILevelDiscoveryService _levelDiscoveryService;&#10;&#10;        [Inject]&#10;        public GameDataService(IGameDataRepository repository)&#10;        public GameDataService(IGameDataRepository repository, ILevelDiscoveryService levelDiscoveryService)&#10;            _repository = repository;&#10;            _levelDiscoveryService = levelDiscoveryService;&#10;            CurrentData = _repository.LoadData();&#10;        }&#10;&#10;        public GameData CurrentData { get; private set; }&#10;&#10;        public event Action&lt;GameData&gt; OnDataChanged;&#10;&#10;        public void UpdateLives(int lives)&#10;        {&#10;            CurrentData.lives = lives;&#10;            NotifyDataChanged();&#10;        }&#10;&#10;        public void UpdateScore(int score)&#10;        {&#10;            CurrentData.score = score;&#10;            NotifyDataChanged();&#10;        }&#10;&#10;&#10;        public void UpdateCurrentLevel(string levelName)&#10;        {&#10;            CurrentData.currentLevel = levelName;&#10;            NotifyDataChanged();&#10;        }&#10;&#10;        public void UpdateBestTime(float time)&#10;        {&#10;            if (time &lt; CurrentData.bestTime)&#10;            {&#10;                CurrentData.bestTime = time;&#10;                NotifyDataChanged();&#10;            }&#10;        }&#10;&#10;        public void ResetAllData()&#10;        {&#10;            _repository.DeleteData();&#10;            CurrentData = _repository.LoadData();&#10;            NotifyDataChanged();&#10;        }&#10;&#10;        public void SaveData()&#10;        {&#10;            _repository.SaveData(CurrentData);&#10;        }&#10;&#10;        public void AddFruitCollected()&#10;        {&#10;            CurrentData.fruitCollected++;&#10;            NotifyDataChanged();&#10;        }&#10;&#10;        public void UpdateLevelProgress(string levelName, bool isCompleted, float completionTime)&#10;        {&#10;            // Update level progress and cache the data&#10;            _levelDiscoveryService?.UpdateLevelProgress(levelName, isCompleted, completionTime);&#10;            NotifyDataChanged();&#10;        }&#10;        public async Task&lt;List&lt;LevelData&gt;&gt; DiscoverLevelsAsync()&#10;        public async Task&lt;List&lt;LevelData&gt;&gt; GetLevelDataAsync(ILevelDiscoveryService discoveryService)&#10;        {&#10;            if (CurrentData.levelDataCacheValid &amp;&amp; CurrentData.cachedLevelData.Any())&#10;            {&#10;                return ApplyGameStateToLevelData(CurrentData.cachedLevelData);&#10;            }&#10;&#10;            var discoveredLevels = await discoveryService.DiscoverLevelsFromSceneAsync();&#10;            CacheLevelData(discoveredLevels);&#10;            return ApplyGameStateToLevelData(discoveredLevels);&#10;        }&#10;            // Delegate to the level discovery service but cache results in game data&#10;            return await _levelDiscoveryService?.DiscoverLevelsAsync() ?? new List&lt;LevelData&gt;();&#10;" />
              <option name="updatedContent" value="using System;&#10;using System.Collections.Generic;&#10;using System.Threading.Tasks;&#10;using LevelSelection;&#10;using LevelSelection.Services;&#10;using VContainer;&#10;&#10;namespace Core.Data&#10;{&#10;    public class GameDataService : IGameDataService&#10;    {&#10;        private readonly IGameDataRepository _repository;&#10;        private readonly ILevelDiscoveryService _levelDiscoveryService;&#10;&#10;        [Inject]&#10;        public GameDataService(IGameDataRepository repository)&#10;        public GameDataService(IGameDataRepository repository, ILevelDiscoveryService levelDiscoveryService)&#10;            _repository = repository;&#10;            _levelDiscoveryService = levelDiscoveryService;&#10;            CurrentData = _repository.LoadData();&#10;        }&#10;&#10;        public GameData CurrentData { get; private set; }&#10;&#10;        public event Action&lt;GameData&gt; OnDataChanged;&#10;&#10;        public void UpdateLives(int lives)&#10;        {&#10;            CurrentData.lives = lives;&#10;            NotifyDataChanged();&#10;        }&#10;&#10;        public void UpdateScore(int score)&#10;        {&#10;            CurrentData.score = score;&#10;            NotifyDataChanged();&#10;        }&#10;&#10;&#10;        public void UpdateCurrentLevel(string levelName)&#10;        {&#10;            CurrentData.currentLevel = levelName;&#10;            NotifyDataChanged();&#10;        }&#10;&#10;        public void UpdateBestTime(float time)&#10;        {&#10;            if (time &lt; CurrentData.bestTime)&#10;            {&#10;                CurrentData.bestTime = time;&#10;                NotifyDataChanged();&#10;            }&#10;        }&#10;&#10;        public void ResetAllData()&#10;        {&#10;            _repository.DeleteData();&#10;            CurrentData = _repository.LoadData();&#10;            NotifyDataChanged();&#10;        }&#10;&#10;        public void SaveData()&#10;        {&#10;            _repository.SaveData(CurrentData);&#10;        }&#10;&#10;        public void AddFruitCollected()&#10;        {&#10;            CurrentData.fruitCollected++;&#10;            NotifyDataChanged();&#10;        }&#10;&#10;        public void UpdateLevelProgress(string levelName, bool isCompleted, float completionTime)&#10;        {&#10;            // Update level progress and cache the data&#10;            _levelDiscoveryService?.UpdateLevelProgress(levelName, isCompleted, completionTime);&#10;            NotifyDataChanged();&#10;        }&#10;        public async Task&lt;List&lt;LevelData&gt;&gt; DiscoverLevelsAsync()&#10;        public async Task&lt;List&lt;LevelData&gt;&gt; GetLevelDataAsync(ILevelDiscoveryService discoveryService)&#10;        {&#10;            if (CurrentData.levelDataCacheValid &amp;&amp; CurrentData.cachedLevelData.Any())&#10;            {&#10;                return ApplyGameStateToLevelData(CurrentData.cachedLevelData);&#10;            }&#10;&#10;            var discoveredLevels = await discoveryService.DiscoverLevelsFromSceneAsync();&#10;            CacheLevelData(discoveredLevels);&#10;            return ApplyGameStateToLevelData(discoveredLevels);&#10;        }&#10;            // Delegate to the level discovery service but cache results in game data&#10;            return await _levelDiscoveryService?.DiscoverLevelsAsync() ?? new List&lt;LevelData&gt;();&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Core/Data/IGameDataService.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Core/Data/IGameDataService.cs" />
              <option name="originalContent" value="using System;&#10;using System.Collections.Generic;&#10;using System.Threading.Tasks;&#10;using LevelSelection;&#10;&#10;namespace Core.Data&#10;{&#10;    public interface IGameDataService&#10;    {&#10;        GameData CurrentData { get; }&#10;        void UpdateLives(int lives);&#10;        void UpdateScore(int score);&#10;        void AddFruitCollected();&#10;        void UpdateBestTime(float time);&#10;        void UpdateCurrentLevel(string levelName);&#10;        void ResetAllData();&#10;        void SaveData();&#10;        event Action&lt;GameData&gt; OnDataChanged;&#10;        &#10;        // Level data operations that should go through GameDataService&#10;        void UpdateLevelProgress(string levelName, bool isCompleted, float completionTime);&#10;        Task&lt;List&lt;LevelData&gt;&gt; DiscoverLevelsAsync();&#10;    }&#10;&#10;}&#10;" />
              <option name="updatedContent" value="using System;&#10;using System.Collections.Generic;&#10;using System.Threading.Tasks;&#10;using LevelSelection;&#10;using LevelSelection.Services;&#10;&#10;namespace Core.Data&#10;{&#10;    public interface IGameDataService&#10;    {&#10;        GameData CurrentData { get; }&#10;        void UpdateLives(int lives);&#10;        void UpdateScore(int score);&#10;        void AddFruitCollected();&#10;        void UpdateBestTime(float time);&#10;        void UpdateCurrentLevel(string levelName);&#10;        void ResetAllData();&#10;        void SaveData();&#10;        event Action&lt;GameData&gt; OnDataChanged;&#10;        &#10;        // Level data operations that should go through GameDataService&#10;        void UpdateLevelProgress(string levelName, bool isCompleted, float completionTime);&#10;        Task&lt;List&lt;LevelData&gt;&gt; GetLevelDataAsync(ILevelDiscoveryService discoveryService);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Core/GameDataCoordinator.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Core/GameDataCoordinator.cs" />
              <option name="originalContent" value="using System.Collections.Generic;&#10;using System.Threading.Tasks;&#10;using Core.Data;&#10;using Core.Events;&#10;using Core.Services;&#10;using LevelSelection;&#10;using LevelSelection.Services;&#10;using UnityEngine;&#10;using VContainer;&#10;&#10;namespace Core&#10;{&#10;    public class GameDataCoordinator : MonoBehaviour&#10;    {&#10;        &#10;#if UNITY_EDITOR&#10;        [Header(&quot;Debug&quot;)]&#10;        [SerializeField] private bool resetGameData;&#10;#endif&#10;        &#10;        private IAutoSaveService _autoSaveService;&#10;        private IEventBus _eventBus;&#10;        private IGameDataService _gameDataService;&#10;        private ILevelDiscoveryService _levelDiscoveryService;&#10;        private bool _isInitialized;&#10;&#10;        // Track previous values to detect changes&#10;        private int _previousLives = -1;&#10;&#10;        [Inject]&#10;        public void Construct(&#10;            IGameDataService gameDataService,&#10;            IEventBus eventBus,&#10;            IAutoSaveService autoSaveService,&#10;            ILevelDiscoveryService levelDiscoveryService)&#10;        {&#10;            _gameDataService = gameDataService;&#10;            _eventBus = eventBus;&#10;            _autoSaveService = autoSaveService;&#10;            _levelDiscoveryService = levelDiscoveryService;&#10;            _isInitialized = true;&#10;&#10;            Initialize();&#10;        }&#10;&#10;        private void Initialize()&#10;        {&#10;            _eventBus?.Subscribe&lt;LevelCompletedEvent&gt;(OnLevelCompleted);&#10;            _eventBus?.Subscribe&lt;LevelStartedEvent&gt;(OnLevelStarted);&#10;            _eventBus?.Subscribe&lt;GameStateChangedEvent&gt;(OnGameStateChanged);&#10;            _eventBus?.Subscribe&lt;PlayerDeathEvent&gt;(OnPlayerDied);&#10;        }&#10;&#10;#if UNITY_EDITOR&#10;        private void OnValidate()&#10;        {&#10;            if (resetGameData)&#10;            {&#10;                if (_gameDataService != null)&#10;                {&#10;                    _gameDataService.ResetAllData();&#10;                    Debug.Log(&quot;Game data has been reset.&quot;);&#10;                }&#10;                else&#10;                {&#10;                    Debug.LogWarning(&quot;GameDataService not available. Cannot reset game data.&quot;);&#10;                }&#10;                resetGameData = false;&#10;            }&#10;        }&#10;#endif&#10;&#10;        private void SaveData()&#10;        {&#10;            _gameDataService?.SaveData();&#10;        }&#10;&#10;        private void Update()&#10;        {&#10;            if (!_isInitialized || _autoSaveService == null) return;&#10;&#10;            _autoSaveService.Update();&#10;        }&#10;&#10;        private void OnDestroy()&#10;        {&#10;            _eventBus?.Unsubscribe&lt;LevelCompletedEvent&gt;(OnLevelCompleted);&#10;            _eventBus?.Unsubscribe&lt;LevelStartedEvent&gt;(OnLevelStarted);&#10;            _eventBus?.Unsubscribe&lt;GameStateChangedEvent&gt;(OnGameStateChanged);&#10;            _eventBus?.Unsubscribe&lt;PlayerDeathEvent&gt;(OnPlayerDied);&#10;&#10;            if (_gameDataService != null)&#10;                _gameDataService.OnDataChanged -= OnGameDataChanged;&#10;&#10;            if (_autoSaveService != null)&#10;            {&#10;                _autoSaveService.OnSaveRequested -= SaveData;&#10;                _autoSaveService.ForceSave();&#10;            }&#10;        }&#10;&#10;        private void OnApplicationPause(bool pauseStatus)&#10;        {&#10;            if (!_isInitialized || _autoSaveService == null) return;&#10;&#10;            _autoSaveService.OnApplicationPause(pauseStatus);&#10;        }&#10;&#10;        private void OnApplicationFocus(bool hasFocus)&#10;        {&#10;            if (!_isInitialized || _autoSaveService == null) return;&#10;&#10;            _autoSaveService.OnApplicationFocus(hasFocus);&#10;        }&#10;&#10;        private void OnPlayerDied(PlayerDeathEvent deathEvent)&#10;        {&#10;            _autoSaveService?.RequestSave();&#10;        }&#10;&#10;        private void OnLevelCompleted(LevelCompletedEvent levelEvent)&#10;        {&#10;            _gameDataService?.UpdateBestTime(levelEvent.CompletionTime);&#10;            _autoSaveService?.RequestSave();&#10;        }&#10;&#10;        private void OnGameStateChanged(GameStateChangedEvent stateEvent)&#10;        {&#10;            if (stateEvent.NewState is GameState.Victory or GameState.GameOver)&#10;            {&#10;                _autoSaveService?.ForceSave();&#10;            }&#10;        }&#10;&#10;        private void OnLevelStarted(LevelStartedEvent levelEvent)&#10;        {&#10;            _gameDataService?.UpdateCurrentLevel(levelEvent.LevelName);&#10;        }&#10;&#10;        private void OnGameDataChanged(GameData newData)&#10;        {&#10;            // Check if lives changed and publish the appropriate event&#10;            if (_previousLives != newData.lives)&#10;            {&#10;                _eventBus?.Publish(new PlayerLivesChangedEvent&#10;                {&#10;                    PreviousLives = _previousLives,&#10;                    CurrentLives = newData.lives,&#10;                    MaxLives = GameData.MaxLives,&#10;                    Timestamp = Time.time&#10;                });&#10;&#10;                _previousLives = newData.lives;&#10;            }&#10;&#10;            _autoSaveService?.RequestSave();&#10;        }&#10;&#10;        private void OnLevelSelected(LevelSelectedEvent levelEvent)&#10;        {&#10;            GameData gameData = _gameDataService?.CurrentData;&#10;            if (gameData != null)&#10;            {&#10;                gameData.selectedLevelIndex = levelEvent.LevelIndex;&#10;                gameData.currentLevel = levelEvent.LevelName;&#10;            }&#10;        }&#10;&#10;        private void OnLevelNavigation(LevelNavigationEvent navigationEvent)&#10;        {&#10;            GameData gameData = _gameDataService?.CurrentData;&#10;            if (gameData != null)&#10;            {&#10;                gameData.selectedLevelIndex = navigationEvent.NewIndex;&#10;            }&#10;        }&#10;&#10;        // Public API for other systems to request data operations&#10;        public void UpdateLives(int lives)&#10;        {&#10;            if (!_isInitialized) return;&#10;            _gameDataService?.UpdateLives(lives);&#10;        }&#10;&#10;        public void UpdateCurrentLevel(string levelName)&#10;        {&#10;            if (!_isInitialized) return;&#10;            _gameDataService?.UpdateCurrentLevel(levelName);&#10;        }&#10;&#10;        public void UpdateLevelProgress(string levelName, bool isCompleted, float completionTime)&#10;        {&#10;            if (!_isInitialized) return;&#10;            _gameDataService?.UpdateLevelProgress(levelName, isCompleted, completionTime);&#10;        }&#10;&#10;        public async Task&lt;List&lt;LevelData&gt;&gt; DiscoverLevelsAsync()&#10;        {&#10;            if (!_isInitialized || _gameDataService == null || _levelDiscoveryService == null)&#10;                return new List&lt;LevelData&gt;();&#10;            return await _gameDataService.GetLevelDataAsync(_levelDiscoveryService);&#10;        }&#10;&#10;        public GameData GetCurrentData()&#10;        {&#10;            if (!_isInitialized) return null;&#10;            return _gameDataService?.CurrentData;&#10;        }&#10;&#10;        public void ResetAllData()&#10;        {&#10;            if (!_isInitialized) return;&#10;            _gameDataService?.ResetAllData();&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using System.Collections.Generic;&#10;using System.Threading.Tasks;&#10;using Core.Data;&#10;using Core.Events;&#10;using Core.Services;&#10;using LevelSelection;&#10;using LevelSelection.Services;&#10;using UnityEngine;&#10;using VContainer;&#10;&#10;namespace Core&#10;{&#10;    public class GameDataCoordinator : MonoBehaviour&#10;    {&#10;        &#10;#if UNITY_EDITOR&#10;        [Header(&quot;Debug&quot;)]&#10;        [SerializeField] private bool resetGameData;&#10;#endif&#10;        &#10;        private IAutoSaveService _autoSaveService;&#10;        private IEventBus _eventBus;&#10;        private IGameDataService _gameDataService;&#10;        private ILevelDiscoveryService _levelDiscoveryService;&#10;        private bool _isInitialized;&#10;&#10;        // Track previous values to detect changes&#10;        private int _previousLives = -1;&#10;&#10;        [Inject]&#10;        public void Construct(&#10;            IGameDataService gameDataService,&#10;            IEventBus eventBus,&#10;            IAutoSaveService autoSaveService,&#10;            ILevelDiscoveryService levelDiscoveryService)&#10;        {&#10;            _gameDataService = gameDataService;&#10;            _eventBus = eventBus;&#10;            _autoSaveService = autoSaveService;&#10;            _levelDiscoveryService = levelDiscoveryService;&#10;            _isInitialized = true;&#10;&#10;            Initialize();&#10;        }&#10;&#10;        private void Initialize()&#10;        {&#10;            _eventBus?.Subscribe&lt;LevelCompletedEvent&gt;(OnLevelCompleted);&#10;            _eventBus?.Subscribe&lt;LevelStartedEvent&gt;(OnLevelStarted);&#10;            _eventBus?.Subscribe&lt;GameStateChangedEvent&gt;(OnGameStateChanged);&#10;            _eventBus?.Subscribe&lt;PlayerDeathEvent&gt;(OnPlayerDied);&#10;            _eventBus?.Subscribe&lt;LevelSelectedEvent&gt;(OnLevelSelected);&#10;            _eventBus?.Subscribe&lt;LevelNavigationEvent&gt;(OnLevelNavigation);&#10;        }&#10;&#10;#if UNITY_EDITOR&#10;        private void OnValidate()&#10;        {&#10;            if (resetGameData)&#10;            {&#10;                if (_gameDataService != null)&#10;                {&#10;                    _gameDataService.ResetAllData();&#10;                    Debug.Log(&quot;Game data has been reset.&quot;);&#10;                }&#10;                else&#10;                {&#10;                    Debug.LogWarning(&quot;GameDataService not available. Cannot reset game data.&quot;);&#10;                }&#10;                resetGameData = false;&#10;            }&#10;        }&#10;#endif&#10;&#10;        private void SaveData()&#10;        {&#10;            _gameDataService?.SaveData();&#10;        }&#10;&#10;        private void Update()&#10;        {&#10;            if (!_isInitialized || _autoSaveService == null) return;&#10;&#10;            _autoSaveService.Update();&#10;        }&#10;&#10;        private void OnDestroy()&#10;        {&#10;            _eventBus?.Unsubscribe&lt;LevelCompletedEvent&gt;(OnLevelCompleted);&#10;            _eventBus?.Unsubscribe&lt;LevelStartedEvent&gt;(OnLevelStarted);&#10;            _eventBus?.Unsubscribe&lt;GameStateChangedEvent&gt;(OnGameStateChanged);&#10;            _eventBus?.Unsubscribe&lt;PlayerDeathEvent&gt;(OnPlayerDied);&#10;            _eventBus?.Unsubscribe&lt;LevelSelectedEvent&gt;(OnLevelSelected);&#10;            _eventBus?.Unsubscribe&lt;LevelNavigationEvent&gt;(OnLevelNavigation);&#10;&#10;            if (_gameDataService != null)&#10;                _gameDataService.OnDataChanged -= OnGameDataChanged;&#10;&#10;            if (_autoSaveService != null)&#10;            {&#10;                _autoSaveService.OnSaveRequested -= SaveData;&#10;                _autoSaveService.ForceSave();&#10;            }&#10;        }&#10;&#10;        private void OnApplicationPause(bool pauseStatus)&#10;        {&#10;            if (!_isInitialized || _autoSaveService == null) return;&#10;&#10;            _autoSaveService.OnApplicationPause(pauseStatus);&#10;        }&#10;&#10;        private void OnApplicationFocus(bool hasFocus)&#10;        {&#10;            if (!_isInitialized || _autoSaveService == null) return;&#10;&#10;            _autoSaveService.OnApplicationFocus(hasFocus);&#10;        }&#10;&#10;        private void OnPlayerDied(PlayerDeathEvent deathEvent)&#10;        {&#10;            _autoSaveService?.RequestSave();&#10;        }&#10;&#10;        private void OnLevelCompleted(LevelCompletedEvent levelEvent)&#10;        {&#10;            _gameDataService?.UpdateBestTime(levelEvent.CompletionTime);&#10;            _autoSaveService?.RequestSave();&#10;        }&#10;&#10;        private void OnGameStateChanged(GameStateChangedEvent stateEvent)&#10;        {&#10;            if (stateEvent.NewState is GameState.Victory or GameState.GameOver)&#10;            {&#10;                _autoSaveService?.ForceSave();&#10;            }&#10;        }&#10;&#10;        private void OnLevelStarted(LevelStartedEvent levelEvent)&#10;        {&#10;            _gameDataService?.UpdateCurrentLevel(levelEvent.LevelName);&#10;        }&#10;&#10;        private void OnGameDataChanged(GameData newData)&#10;        {&#10;            // Check if lives changed and publish the appropriate event&#10;            if (_previousLives != newData.lives)&#10;            {&#10;                _eventBus?.Publish(new PlayerLivesChangedEvent&#10;                {&#10;                    PreviousLives = _previousLives,&#10;                    CurrentLives = newData.lives,&#10;                    MaxLives = GameData.MaxLives,&#10;                    Timestamp = Time.time&#10;                });&#10;&#10;                _previousLives = newData.lives;&#10;            }&#10;&#10;            _autoSaveService?.RequestSave();&#10;        }&#10;&#10;        private void OnLevelSelected(LevelSelectedEvent levelEvent)&#10;        {&#10;            GameData gameData = _gameDataService?.CurrentData;&#10;            if (gameData != null)&#10;            {&#10;                gameData.selectedLevelIndex = levelEvent.LevelIndex;&#10;                gameData.currentLevel = levelEvent.LevelName;&#10;            }&#10;        }&#10;&#10;        private void OnLevelNavigation(LevelNavigationEvent navigationEvent)&#10;        {&#10;            GameData gameData = _gameDataService?.CurrentData;&#10;            if (gameData != null)&#10;            {&#10;                gameData.selectedLevelIndex = navigationEvent.NewIndex;&#10;            }&#10;        }&#10;&#10;        // Public API for other systems to request data operations&#10;        public void UpdateLives(int lives)&#10;        {&#10;            if (!_isInitialized) return;&#10;            _gameDataService?.UpdateLives(lives);&#10;        }&#10;&#10;        public void UpdateCurrentLevel(string levelName)&#10;        {&#10;            if (!_isInitialized) return;&#10;            _gameDataService?.UpdateCurrentLevel(levelName);&#10;        }&#10;&#10;        public void UpdateLevelProgress(string levelName, bool isCompleted, float completionTime)&#10;        {&#10;            if (!_isInitialized) return;&#10;            _gameDataService?.UpdateLevelProgress(levelName, isCompleted, completionTime);&#10;        }&#10;&#10;        public async Task&lt;List&lt;LevelData&gt;&gt; DiscoverLevelsAsync()&#10;        {&#10;            if (!_isInitialized || _gameDataService == null || _levelDiscoveryService == null)&#10;                return new List&lt;LevelData&gt;();&#10;            return await _gameDataService.GetLevelDataAsync(_levelDiscoveryService);&#10;        }&#10;&#10;        public GameData GetCurrentData()&#10;        {&#10;            if (!_isInitialized) return null;&#10;            return _gameDataService?.CurrentData;&#10;        }&#10;&#10;        public void ResetAllData()&#10;        {&#10;            if (!_isInitialized) return;&#10;            _gameDataService?.ResetAllData();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Core/GameFlowManager.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Core/GameFlowManager.cs" />
              <option name="originalContent" value="using System;&#10;using System.Linq;&#10;using System.Threading.Tasks;&#10;using Core.Data;&#10;using Core.Events;&#10;using Player.Components;&#10;using UnityEngine;&#10;using UnityEngine.SceneManagement;&#10;using VContainer;&#10;&#10;namespace Core&#10;{&#10;    public class GameFlowManager : MonoBehaviour&#10;    {&#10;        [Header(&quot;Game Settings&quot;)]&#10;        [SerializeField] private bool autoStartGame = true;&#10;        [SerializeField] private float restartDelay = 2f;&#10;        &#10;        [Header(&quot;Victory Settings&quot;)]&#10;        [SerializeField] private string victorySceneName = &quot;YouWonScene&quot;;&#10;        [SerializeField] private float victoryTransitionDelay = 3f;&#10;&#10;        private string _currentLevelName = &quot;Unknown&quot;;&#10;        private float _levelStartTime;&#10;        private IEventBus _eventBus;&#10;        private GameDataCoordinator _gameDataCoordinator;&#10;&#10;        public GameState CurrentState { get; private set; } = GameState.MainMenu;&#10;        public bool IsPlaying =&gt; CurrentState == GameState.Playing;&#10;&#10;        [Inject]&#10;        public void Construct(IEventBus eventBus, GameDataCoordinator gameDataCoordinator)&#10;        {&#10;            _eventBus = eventBus;&#10;            _gameDataCoordinator = gameDataCoordinator;&#10;            SubscribeToEvents();&#10;        }&#10;&#10;        private void Start()&#10;        {&#10;            _currentLevelName = GetCurrentLevelName();&#10;&#10;            if (autoStartGame)&#10;            {&#10;                StartGame();&#10;            }&#10;        }&#10;&#10;        private void OnDestroy()&#10;        {&#10;            UnsubscribeFromEvents();&#10;        }&#10;&#10;        private void StartGame()&#10;        {&#10;            Time.timeScale = 1;&#10;            ChangeState(GameState.Playing);&#10;            _levelStartTime = Time.time;&#10;&#10;            _eventBus?.Publish(new LevelStartedEvent&#10;            {&#10;                LevelName = _currentLevelName,&#10;                Timestamp = Time.time&#10;            });&#10;        }&#10;&#10;        public void PauseGame()&#10;        {&#10;            if (CurrentState == GameState.Playing)&#10;                ChangeState(GameState.Paused);&#10;        }&#10;&#10;        public void ResumeGame()&#10;        {&#10;            if (CurrentState == GameState.Paused)&#10;                ChangeState(GameState.Playing);&#10;        }&#10;&#10;        public void RestartLevel()&#10;        {&#10;            SceneManager.LoadScene(SceneManager.GetActiveScene().name);&#10;        }&#10;&#10;        public void HandlePlayerDeath(Vector3 deathPosition)&#10;        {&#10;            _eventBus?.Publish(new PlayerDeathEvent&#10;            {&#10;                DeathPosition = deathPosition,&#10;                Timestamp = Time.time&#10;            });&#10;        }&#10;&#10;        public void CompleteLevel(string currentLevelName, string nextLevelName, bool autoReturnToLevelSelect)&#10;        {&#10;            float completionTime = Time.time - _levelStartTime;&#10;            &#10;            _eventBus?.Publish(new LevelCompletedEvent&#10;            {&#10;                LevelName = currentLevelName,&#10;                CompletionTime = completionTime,&#10;                Timestamp = Time.time&#10;            });&#10;        }&#10;&#10;        public void CompleteLevel(float completionTime)&#10;        {&#10;            _eventBus?.Publish(new LevelCompletedEvent&#10;            {&#10;                LevelName = _currentLevelName,&#10;                CompletionTime = completionTime,&#10;                Timestamp = Time.time&#10;            });&#10;        }&#10;&#10;        public void RequestLevelLoad(string levelName, string sceneName)&#10;        {&#10;            _eventBus?.Publish(new LevelLoadRequestedEvent&#10;            {&#10;                Timestamp = Time.time,&#10;                LevelName = levelName,&#10;                SceneName = sceneName&#10;            });&#10;        }&#10;&#10;        public void SelectLevel(string levelName, int levelIndex)&#10;        {&#10;            _eventBus?.Publish(new LevelSelectedEvent&#10;            {&#10;                Timestamp = Time.time,&#10;                LevelName = levelName,&#10;                LevelIndex = levelIndex&#10;            });&#10;        }&#10;&#10;        public void NavigateLevel(int previousIndex, int newIndex, Vector2 direction)&#10;        {&#10;            _eventBus?.Publish(new LevelNavigationEvent&#10;            {&#10;                Timestamp = Time.time,&#10;                PreviousIndex = previousIndex,&#10;                NewIndex = newIndex,&#10;                Direction = direction&#10;            });&#10;        }&#10;&#10;        private void SubscribeToEvents()&#10;        {&#10;            _eventBus?.Subscribe&lt;GameOverEvent&gt;(OnGameOver);&#10;            _eventBus?.Subscribe&lt;LevelCompletedEvent&gt;(OnLevelCompleted);&#10;            _eventBus?.Subscribe&lt;PlayerLivesChangedEvent&gt;(OnPlayerLivesChanged);&#10;        }&#10;&#10;        private void UnsubscribeFromEvents()&#10;        {&#10;            _eventBus?.Unsubscribe&lt;GameOverEvent&gt;(OnGameOver);&#10;            _eventBus?.Unsubscribe&lt;LevelCompletedEvent&gt;(OnLevelCompleted);&#10;            _eventBus?.Unsubscribe&lt;PlayerLivesChangedEvent&gt;(OnPlayerLivesChanged);&#10;        }&#10;&#10;        private void OnGameOver(GameOverEvent gameOverEvent)&#10;        {&#10;            ChangeState(GameState.GameOver);&#10;            RestartLevelAfterDelayAsync(restartDelay);&#10;        }&#10;&#10;        private async void OnLevelCompleted(LevelCompletedEvent levelEvent)&#10;        {&#10;            ChangeState(GameState.Victory);&#10;            &#10;            // Update level progress through GameDataCoordinator&#10;            _gameDataCoordinator?.UpdateLevelProgress(levelEvent.LevelName, true, levelEvent.CompletionTime);&#10;            &#10;            // Also update it in GameData for immediate checking&#10;            var gameData = _gameDataCoordinator?.GetCurrentData();&#10;            if (gameData != null &amp;&amp; !gameData.completedLevels.Contains(levelEvent.LevelName))&#10;            {&#10;                gameData.completedLevels.Add(levelEvent.LevelName);&#10;                &#10;                // Unlock next level if it exists&#10;                UnlockNextLevel(levelEvent.LevelName, gameData);&#10;            }&#10;            &#10;            if (await IsGameCompletedAsync())&#10;            {&#10;                Debug.Log(&quot;[GameFlowManager] All levels completed! Transitioning to YouWonScene...&quot;);&#10;                TransitionToVictorySceneAsync();&#10;            }&#10;            else&#10;            {&#10;                Debug.Log($&quot;[GameFlowManager] Level {levelEvent.LevelName} completed. Returning to level selection...&quot;);&#10;                ReturnToLevelSelectionAsync();&#10;            }&#10;        }&#10;&#10;        private void UnlockNextLevel(string completedLevelName, GameData gameData)&#10;        {&#10;            // Simple next level unlocking logic - you can make this more sophisticated&#10;            if (completedLevelName.Contains(&quot;Level_&quot;))&#10;            {&#10;                var levelNumber = ExtractLevelNumber(completedLevelName);&#10;                var nextLevelName = $&quot;Level_{levelNumber + 1:D2}&quot;;&#10;                &#10;                if (!gameData.unlockedLevels.Contains(nextLevelName))&#10;                {&#10;                    gameData.unlockedLevels.Add(nextLevelName);&#10;                    Debug.Log($&quot;[GameFlowManager] Unlocked next level: {nextLevelName}&quot;);&#10;                }&#10;            }&#10;        }&#10;&#10;        private int ExtractLevelNumber(string levelName)&#10;        {&#10;            // Extract number from level name like &quot;Level_01&quot; -&gt; 1&#10;            var parts = levelName.Split('_');&#10;            if (parts.Length &gt; 1 &amp;&amp; int.TryParse(parts[1], out int levelNum))&#10;            {&#10;                return levelNum;&#10;            }&#10;            return 0;&#10;        }&#10;&#10;        private async Task&lt;bool&gt; IsGameCompletedAsync()&#10;        {&#10;            try&#10;            {&#10;                // Check using GameData completed levels through GameDataCoordinator&#10;                var gameData = _gameDataCoordinator?.GetCurrentData();&#10;                if (gameData == null) return false;&#10;&#10;                // Get all available levels through GameDataCoordinator&#10;                var allLevels = await _gameDataCoordinator.DiscoverLevelsAsync();&#10;                &#10;                if (allLevels == null || allLevels.Count == 0)&#10;                {&#10;                    Debug.LogWarning(&quot;[GameFlowManager] No levels found in discovery service&quot;);&#10;                    return false;&#10;                }&#10;&#10;                // Check if all levels are in the completed list&#10;                var completedCount = 0;&#10;                foreach (var level in allLevels)&#10;                {&#10;                    if (gameData.completedLevels.Contains(level.levelName))&#10;                    {&#10;                        completedCount++;&#10;                    }&#10;                }&#10;                &#10;                Debug.Log($&quot;[GameFlowManager] Game completion check: {completedCount}/{allLevels.Count} levels completed&quot;);&#10;                &#10;                if (completedCount &gt;= allLevels.Count)&#10;                {&#10;                    Debug.Log(&quot;[GameFlowManager] All levels completed!&quot;);&#10;                    return true;&#10;                }&#10;&#10;                var remainingLevels = allLevels.Where(l =&gt; !gameData.completedLevels.Contains(l.levelName)).Select(l =&gt; l.levelName);&#10;                Debug.Log($&quot;[GameFlowManager] Remaining levels: {string.Join(&quot;, &quot;, remainingLevels)}&quot;);&#10;                return false;&#10;            }&#10;            catch (Exception e)&#10;            {&#10;                Debug.LogError($&quot;[GameFlowManager] Error checking game completion: {e}&quot;);&#10;                return false;&#10;            }&#10;        }&#10;&#10;        private async void TransitionToVictorySceneAsync()&#10;        {&#10;            try&#10;            {&#10;                await Task.Delay((int)(victoryTransitionDelay * 1000));&#10;                &#10;                _eventBus?.Publish(new GameCompletedEvent&#10;                {&#10;                    Timestamp = Time.time,&#10;                    FinalLevelName = _currentLevelName&#10;                });&#10;                &#10;                SceneManager.LoadScene(victorySceneName);&#10;            }&#10;            catch (Exception e)&#10;            {&#10;                Debug.LogError($&quot;[GameFlowManager] Failed to transition to victory scene: {e}&quot;);&#10;                SceneManager.LoadScene(&quot;Level Select&quot;);&#10;            }&#10;        }&#10;&#10;        private async void ReturnToLevelSelectionAsync()&#10;        {&#10;            try&#10;            {&#10;                await Task.Delay((int)(2f * 1000));&#10;                SceneManager.LoadScene(&quot;Level Select&quot;);&#10;            }&#10;            catch (Exception e)&#10;            {&#10;                Debug.LogError($&quot;[GameFlowManager] Failed to return to level selection: {e}&quot;);&#10;            }&#10;        }&#10;&#10;        private void OnPlayerLivesChanged(PlayerLivesChangedEvent livesEvent)&#10;        {&#10;            bool lostLife = livesEvent.PreviousLives &gt; livesEvent.CurrentLives;&#10;            bool isGameOver = livesEvent.CurrentLives == 0;&#10;&#10;            if (isGameOver)&#10;            {&#10;                ChangeState(GameState.GameOver);&#10;                _gameDataCoordinator?.ResetAllData();&#10;                _eventBus?.Publish(new GameOverEvent { Timestamp = Time.time });&#10;            }&#10;&#10;            if (lostLife)&#10;            {&#10;                _eventBus?.Publish(new PlayerDeathEvent&#10;                {&#10;                    DeathPosition = PlayerLocator.PlayerTransform.position,&#10;                    Timestamp = Time.time&#10;                });&#10;            }&#10;&#10;            if (isGameOver || lostLife)&#10;            {&#10;                Time.timeScale = 0.01f;&#10;                RestartLevelAfterDelayAsync(restartDelay);&#10;            }&#10;        }&#10;&#10;        private static async void RestartLevelAfterDelayAsync(float delay)&#10;        {&#10;            try&#10;            {&#10;                await Task.Delay((int)(delay * 1000));&#10;                SceneManager.LoadScene(SceneManager.GetActiveScene().name);&#10;            }&#10;            catch (Exception e)&#10;            {&#10;                Debug.LogError($&quot;[GameFlowManager] Failed to restart level after delay: {e}&quot;);&#10;            }&#10;        }&#10;&#10;        private void ChangeState(GameState newState)&#10;        {&#10;            if (CurrentState == newState) return;&#10;&#10;            GameState oldState = CurrentState;&#10;            CurrentState = newState;&#10;&#10;            _eventBus?.Publish(new GameStateChangedEvent&#10;            {&#10;                PreviousState = oldState,&#10;                NewState = newState,&#10;                Timestamp = Time.time&#10;            });&#10;        }&#10;&#10;        private string GetCurrentLevelName() =&gt; SceneManager.GetActiveScene().name;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using System;&#10;using System.Linq;&#10;using System.Threading.Tasks;&#10;using Core.Data;&#10;using Core.Events;&#10;using Player.Components;&#10;using UnityEngine;&#10;using UnityEngine.SceneManagement;&#10;using VContainer;&#10;&#10;namespace Core&#10;{&#10;    public class GameFlowManager : MonoBehaviour&#10;    {&#10;        [Header(&quot;Game Settings&quot;)]&#10;        [SerializeField] private bool autoStartGame = true;&#10;        [SerializeField] private float restartDelay = 2f;&#10;        &#10;        [Header(&quot;Victory Settings&quot;)]&#10;        [SerializeField] private string victorySceneName = &quot;YouWonScene&quot;;&#10;        [SerializeField] private float victoryTransitionDelay = 3f;&#10;&#10;        private string _currentLevelName = &quot;Unknown&quot;;&#10;        private float _levelStartTime;&#10;        private IEventBus _eventBus;&#10;        private GameDataCoordinator _gameDataCoordinator;&#10;&#10;        public GameState CurrentState { get; private set; } = GameState.MainMenu;&#10;        public bool IsPlaying =&gt; CurrentState == GameState.Playing;&#10;&#10;        [Inject]&#10;        public void Construct(IEventBus eventBus, GameDataCoordinator gameDataCoordinator)&#10;        {&#10;            _eventBus = eventBus;&#10;            _gameDataCoordinator = gameDataCoordinator;&#10;            SubscribeToEvents();&#10;        }&#10;&#10;        private void Start()&#10;        {&#10;            _currentLevelName = GetCurrentLevelName();&#10;&#10;            if (autoStartGame)&#10;            {&#10;                StartGame();&#10;            }&#10;        }&#10;&#10;        private void OnDestroy()&#10;        {&#10;            UnsubscribeFromEvents();&#10;        }&#10;&#10;        private void StartGame()&#10;        {&#10;            Time.timeScale = 1;&#10;            ChangeState(GameState.Playing);&#10;            _levelStartTime = Time.time;&#10;&#10;            _eventBus?.Publish(new LevelStartedEvent&#10;            {&#10;                LevelName = _currentLevelName,&#10;                Timestamp = Time.time&#10;            });&#10;        }&#10;&#10;        public void PauseGame()&#10;        {&#10;            if (CurrentState == GameState.Playing)&#10;                ChangeState(GameState.Paused);&#10;        }&#10;&#10;        public void ResumeGame()&#10;        {&#10;            if (CurrentState == GameState.Paused)&#10;                ChangeState(GameState.Playing);&#10;        }&#10;&#10;        public void RestartLevel()&#10;        {&#10;            SceneManager.LoadScene(SceneManager.GetActiveScene().name);&#10;        }&#10;&#10;        public void HandlePlayerDeath(Vector3 deathPosition)&#10;        {&#10;            _eventBus?.Publish(new PlayerDeathEvent&#10;            {&#10;                DeathPosition = deathPosition,&#10;                Timestamp = Time.time&#10;            });&#10;        }&#10;&#10;        public void CompleteLevel(string currentLevelName, string nextLevelName, bool autoReturnToLevelSelect)&#10;        {&#10;            float completionTime = Time.time - _levelStartTime;&#10;            &#10;            _eventBus?.Publish(new LevelCompletedEvent&#10;            {&#10;                LevelName = currentLevelName,&#10;                CompletionTime = completionTime,&#10;                Timestamp = Time.time&#10;            });&#10;        }&#10;&#10;        public void RequestLevelLoad(string levelName, string sceneName)&#10;        {&#10;            _eventBus?.Publish(new LevelLoadRequestedEvent&#10;            {&#10;                Timestamp = Time.time,&#10;                LevelName = levelName,&#10;                SceneName = sceneName&#10;            });&#10;        }&#10;&#10;        public void SelectLevel(string levelName, int levelIndex)&#10;        {&#10;            _eventBus?.Publish(new LevelSelectedEvent&#10;            {&#10;                Timestamp = Time.time,&#10;                LevelName = levelName,&#10;                LevelIndex = levelIndex&#10;            });&#10;        }&#10;&#10;        public void NavigateLevel(int previousIndex, int newIndex, Vector2 direction)&#10;        {&#10;            _eventBus?.Publish(new LevelNavigationEvent&#10;            {&#10;                Timestamp = Time.time,&#10;                PreviousIndex = previousIndex,&#10;                NewIndex = newIndex,&#10;                Direction = direction&#10;            });&#10;        }&#10;&#10;        private void SubscribeToEvents()&#10;        {&#10;            _eventBus?.Subscribe&lt;GameOverEvent&gt;(OnGameOver);&#10;            _eventBus?.Subscribe&lt;LevelCompletedEvent&gt;(OnLevelCompleted);&#10;            _eventBus?.Subscribe&lt;PlayerLivesChangedEvent&gt;(OnPlayerLivesChanged);&#10;        }&#10;&#10;        private void UnsubscribeFromEvents()&#10;        {&#10;            _eventBus?.Unsubscribe&lt;GameOverEvent&gt;(OnGameOver);&#10;            _eventBus?.Unsubscribe&lt;LevelCompletedEvent&gt;(OnLevelCompleted);&#10;            _eventBus?.Unsubscribe&lt;PlayerLivesChangedEvent&gt;(OnPlayerLivesChanged);&#10;        }&#10;&#10;        private void OnGameOver(GameOverEvent gameOverEvent)&#10;        {&#10;            ChangeState(GameState.GameOver);&#10;            RestartLevelAfterDelayAsync(restartDelay);&#10;        }&#10;&#10;        private async void OnLevelCompleted(LevelCompletedEvent levelEvent)&#10;        {&#10;            ChangeState(GameState.Victory);&#10;            &#10;            // Update level progress through GameDataCoordinator&#10;            _gameDataCoordinator?.UpdateLevelProgress(levelEvent.LevelName, true, levelEvent.CompletionTime);&#10;            &#10;            // Also update it in GameData for immediate checking&#10;            var gameData = _gameDataCoordinator?.GetCurrentData();&#10;            if (gameData != null &amp;&amp; !gameData.completedLevels.Contains(levelEvent.LevelName))&#10;            {&#10;                gameData.completedLevels.Add(levelEvent.LevelName);&#10;                &#10;                // Unlock next level if it exists&#10;                UnlockNextLevel(levelEvent.LevelName, gameData);&#10;            }&#10;            &#10;            if (await IsGameCompletedAsync())&#10;            {&#10;                Debug.Log(&quot;[GameFlowManager] All levels completed! Transitioning to YouWonScene...&quot;);&#10;                TransitionToVictorySceneAsync();&#10;            }&#10;            else&#10;            {&#10;                Debug.Log($&quot;[GameFlowManager] Level {levelEvent.LevelName} completed. Returning to level selection...&quot;);&#10;                ReturnToLevelSelectionAsync();&#10;            }&#10;        }&#10;&#10;        private void UnlockNextLevel(string completedLevelName, GameData gameData)&#10;        {&#10;            // Simple next level unlocking logic - you can make this more sophisticated&#10;            if (completedLevelName.Contains(&quot;Level_&quot;))&#10;            {&#10;                var levelNumber = ExtractLevelNumber(completedLevelName);&#10;                var nextLevelName = $&quot;Level_{levelNumber + 1:D2}&quot;;&#10;                &#10;                if (!gameData.unlockedLevels.Contains(nextLevelName))&#10;                {&#10;                    gameData.unlockedLevels.Add(nextLevelName);&#10;                    Debug.Log($&quot;[GameFlowManager] Unlocked next level: {nextLevelName}&quot;);&#10;                }&#10;            }&#10;        }&#10;&#10;        private int ExtractLevelNumber(string levelName)&#10;        {&#10;            // Extract number from level name like &quot;Level_01&quot; -&gt; 1&#10;            var parts = levelName.Split('_');&#10;            if (parts.Length &gt; 1 &amp;&amp; int.TryParse(parts[1], out int levelNum))&#10;            {&#10;                return levelNum;&#10;            }&#10;            return 0;&#10;        }&#10;&#10;        private async Task&lt;bool&gt; IsGameCompletedAsync()&#10;        {&#10;            try&#10;            {&#10;                // Check using GameData completed levels through GameDataCoordinator&#10;                var gameData = _gameDataCoordinator?.GetCurrentData();&#10;                if (gameData == null) return false;&#10;&#10;                // Get all available levels through GameDataCoordinator&#10;                var allLevels = await _gameDataCoordinator.DiscoverLevelsAsync();&#10;                &#10;                if (allLevels == null || allLevels.Count == 0)&#10;                {&#10;                    Debug.LogWarning(&quot;[GameFlowManager] No levels found in discovery service&quot;);&#10;                    return false;&#10;                }&#10;&#10;                // Check if all levels are in the completed list&#10;                var completedCount = 0;&#10;                foreach (var level in allLevels)&#10;                {&#10;                    if (gameData.completedLevels.Contains(level.levelName))&#10;                    {&#10;                        completedCount++;&#10;                    }&#10;                }&#10;                &#10;                Debug.Log($&quot;[GameFlowManager] Game completion check: {completedCount}/{allLevels.Count} levels completed&quot;);&#10;                &#10;                if (completedCount &gt;= allLevels.Count)&#10;                {&#10;                    Debug.Log(&quot;[GameFlowManager] All levels completed!&quot;);&#10;                    return true;&#10;                }&#10;&#10;                var remainingLevels = allLevels.Where(l =&gt; !gameData.completedLevels.Contains(l.levelName)).Select(l =&gt; l.levelName);&#10;                Debug.Log($&quot;[GameFlowManager] Remaining levels: {string.Join(&quot;, &quot;, remainingLevels)}&quot;);&#10;                return false;&#10;            }&#10;            catch (Exception e)&#10;            {&#10;                Debug.LogError($&quot;[GameFlowManager] Error checking game completion: {e}&quot;);&#10;                return false;&#10;            }&#10;        }&#10;&#10;        private async void TransitionToVictorySceneAsync()&#10;        {&#10;            try&#10;            {&#10;                await Task.Delay((int)(victoryTransitionDelay * 1000));&#10;                &#10;                _eventBus?.Publish(new GameCompletedEvent&#10;                {&#10;                    Timestamp = Time.time,&#10;                    FinalLevelName = _currentLevelName&#10;                });&#10;                &#10;                SceneManager.LoadScene(victorySceneName);&#10;            }&#10;            catch (Exception e)&#10;            {&#10;                Debug.LogError($&quot;[GameFlowManager] Failed to transition to victory scene: {e}&quot;);&#10;                SceneManager.LoadScene(&quot;Level Select&quot;);&#10;            }&#10;        }&#10;&#10;        private async void ReturnToLevelSelectionAsync()&#10;        {&#10;            try&#10;            {&#10;                await Task.Delay((int)(2f * 1000));&#10;                SceneManager.LoadScene(&quot;Level Select&quot;);&#10;            }&#10;            catch (Exception e)&#10;            {&#10;                Debug.LogError($&quot;[GameFlowManager] Failed to return to level selection: {e}&quot;);&#10;            }&#10;        }&#10;&#10;        private void OnPlayerLivesChanged(PlayerLivesChangedEvent livesEvent)&#10;        {&#10;            bool lostLife = livesEvent.PreviousLives &gt; livesEvent.CurrentLives;&#10;            bool isGameOver = livesEvent.CurrentLives == 0;&#10;&#10;            if (isGameOver)&#10;            {&#10;                ChangeState(GameState.GameOver);&#10;                _gameDataCoordinator?.ResetAllData();&#10;                _eventBus?.Publish(new GameOverEvent { Timestamp = Time.time });&#10;            }&#10;&#10;            if (lostLife)&#10;            {&#10;                _eventBus?.Publish(new PlayerDeathEvent&#10;                {&#10;                    DeathPosition = PlayerLocator.PlayerTransform.position,&#10;                    Timestamp = Time.time&#10;                });&#10;            }&#10;&#10;            if (isGameOver || lostLife)&#10;            {&#10;                Time.timeScale = 0.01f;&#10;                RestartLevelAfterDelayAsync(restartDelay);&#10;            }&#10;        }&#10;&#10;        private static async void RestartLevelAfterDelayAsync(float delay)&#10;        {&#10;            try&#10;            {&#10;                await Task.Delay((int)(delay * 1000));&#10;                SceneManager.LoadScene(SceneManager.GetActiveScene().name);&#10;            }&#10;            catch (Exception e)&#10;            {&#10;                Debug.LogError($&quot;[GameFlowManager] Failed to restart level after delay: {e}&quot;);&#10;            }&#10;        }&#10;&#10;        private void ChangeState(GameState newState)&#10;        {&#10;            if (CurrentState == newState) return;&#10;&#10;            GameState oldState = CurrentState;&#10;            CurrentState = newState;&#10;&#10;            _eventBus?.Publish(new GameStateChangedEvent&#10;            {&#10;                PreviousState = oldState,&#10;                NewState = newState,&#10;                Timestamp = Time.time&#10;            });&#10;        }&#10;&#10;        private string GetCurrentLevelName() =&gt; SceneManager.GetActiveScene().name;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemies/Behaviors/FrogProximityJump.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemies/Behaviors/FrogProximityJump.cs" />
              <option name="originalContent" value="using Enemies.Interfaces;&#10;using Player.Components;&#10;using UnityEngine;&#10;&#10;namespace Enemies.Behaviors&#10;{&#10;    // Emits an event when the player is within a certain distance&#10;    [RequireComponent(typeof(Rigidbody2D))]&#10;    public class FrogProximityTrigger : MonoBehaviour, ITrigger&#10;    {&#10;        [SerializeField] private LayerMask groundLayer;&#10;        [SerializeField] private float triggerDistance = 3f;&#10;        [SerializeField] private float jumpCooldown = 2f;&#10;        [SerializeField] private int checkEveryNFrames = 1;&#10;&#10;        private int _frameCounter;&#10;        private bool _grounded;&#10;        private float _lastTriggerTime;&#10;        private Transform _player;&#10;&#10;        private void Start()&#10;        {&#10;            _player = PlayerLocator.PlayerTransform;&#10;        }&#10;&#10;        private void OnCollisionEnter2D(Collision2D collision)&#10;        {&#10;            if ((1 &lt;&lt; collision.gameObject.layer &amp; groundLayer) != 0)&#10;                _grounded = true;&#10;        }&#10;&#10;        private void OnCollisionExit2D(Collision2D collision)&#10;        {&#10;            if ((1 &lt;&lt; collision.gameObject.layer &amp; groundLayer) != 0)&#10;                _grounded = false;&#10;        }&#10;&#10;        public bool IsTriggered { get; private set; }&#10;&#10;        public void CheckTrigger()&#10;        {&#10;            if (++_frameCounter % checkEveryNFrames != 0 || !_player) return;&#10;&#10;            Vector2 toPlayer = _player.position - transform.position;&#10;            float sqrDist = toPlayer.sqrMagnitude;&#10;            float sqrTrigger = triggerDistance * triggerDistance;&#10;&#10;            if (sqrDist &lt; sqrTrigger &amp;&amp; Time.time - _lastTriggerTime &gt; jumpCooldown &amp;&amp; _grounded)&#10;            {&#10;                IsTriggered = true;&#10;                _lastTriggerTime = Time.time;&#10;            }&#10;            else&#10;            {&#10;                IsTriggered = false;&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using Enemies.Interfaces;&#10;using Player.Components;&#10;using UnityEngine;&#10;&#10;namespace Enemies.Behaviors&#10;{&#10;    // Emits an event when the player is within a certain distance&#10;    [RequireComponent(typeof(Rigidbody2D))]&#10;    public class FrogProximityTrigger : MonoBehaviour, ITrigger&#10;    {&#10;        [SerializeField] private LayerMask groundLayer;&#10;        [SerializeField] private float triggerDistance = 3f;&#10;        [SerializeField] private float jumpCooldown = 2f;&#10;        [SerializeField] private int checkEveryNFrames = 1;&#10;&#10;        private int _frameCounter;&#10;        private bool _grounded;&#10;        private float _lastTriggerTime;&#10;        private Transform _player;&#10;&#10;        private void Start()&#10;        {&#10;            _player = PlayerLocator.PlayerTransform;&#10;        }&#10;&#10;        private void OnCollisionEnter2D(Collision2D collision)&#10;        {&#10;            if ((1 &lt;&lt; collision.gameObject.layer &amp; groundLayer) != 0)&#10;                _grounded = true;&#10;        }&#10;&#10;        private void OnCollisionExit2D(Collision2D collision)&#10;        {&#10;            if ((1 &lt;&lt; collision.gameObject.layer &amp; groundLayer) != 0)&#10;                _grounded = false;&#10;        }&#10;&#10;        public bool IsTriggered { get; private set; }&#10;&#10;        public void CheckTrigger()&#10;        {&#10;            if (++_frameCounter % checkEveryNFrames != 0 || !_player) return;&#10;&#10;            Vector2 toPlayer = _player.position - transform.position;&#10;            float sqrDist = toPlayer.sqrMagnitude;&#10;            float sqrTrigger = triggerDistance * triggerDistance;&#10;&#10;            if (sqrDist &lt; sqrTrigger &amp;&amp; Time.time - _lastTriggerTime &gt; jumpCooldown &amp;&amp; _grounded)&#10;            {&#10;                IsTriggered = true;&#10;                _lastTriggerTime = Time.time;&#10;            }&#10;            else&#10;            {&#10;                IsTriggered = false;&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemies/Behaviors/JumpMover.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemies/Behaviors/JumpMover.cs" />
              <option name="originalContent" value="using Enemies.Interfaces;&#10;using UnityEngine;&#10;&#10;namespace Enemies.Behaviors&#10;{&#10;    // Command to make the enemy jump forward&#10;    [RequireComponent(typeof(Rigidbody2D))]&#10;    public class JumpCommand : MonoBehaviour, IMovementCommand&#10;    {&#10;        [SerializeField] private LayerMask groundLayer;&#10;        [SerializeField] private float jumpForceX = 2f;&#10;        [SerializeField] private float jumpForceY = 5f;&#10;&#10;        private bool _grounded;&#10;        private Rigidbody2D _rb;&#10;&#10;        private void Awake()&#10;        {&#10;            _rb = GetComponent&lt;Rigidbody2D&gt;();&#10;        }&#10;&#10;        private void OnCollisionEnter2D(Collision2D collision)&#10;        {&#10;            if ((1 &lt;&lt; collision.gameObject.layer &amp; groundLayer) != 0)&#10;                _grounded = true;&#10;        }&#10;&#10;        private void OnCollisionExit2D(Collision2D collision)&#10;        {&#10;            if ((1 &lt;&lt; collision.gameObject.layer &amp; groundLayer) != 0)&#10;                _grounded = false;&#10;        }&#10;&#10;        public void Execute()&#10;        {&#10;            if (_grounded)&#10;            {&#10;                Vector2 jumpDir = new(transform.localScale.x * jumpForceX, jumpForceY);&#10;                _rb.linearVelocity = jumpDir;&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using Enemies.Interfaces;&#10;using UnityEngine;&#10;&#10;namespace Enemies.Behaviors&#10;{&#10;    // Command to make the enemy jump forward&#10;    [RequireComponent(typeof(Rigidbody2D))]&#10;    public class JumpCommand : MonoBehaviour, IMovementCommand&#10;    {&#10;        [SerializeField] private LayerMask groundLayer;&#10;        [SerializeField] private float jumpForceX = 2f;&#10;        [SerializeField] private float jumpForceY = 5f;&#10;&#10;        private bool _grounded;&#10;        private Rigidbody2D _rb;&#10;&#10;        private void Awake()&#10;        {&#10;            _rb = GetComponent&lt;Rigidbody2D&gt;();&#10;        }&#10;&#10;        private void OnCollisionEnter2D(Collision2D collision)&#10;        {&#10;            if ((1 &lt;&lt; collision.gameObject.layer &amp; groundLayer) != 0)&#10;                _grounded = true;&#10;        }&#10;&#10;        private void OnCollisionExit2D(Collision2D collision)&#10;        {&#10;            if ((1 &lt;&lt; collision.gameObject.layer &amp; groundLayer) != 0)&#10;                _grounded = false;&#10;        }&#10;&#10;        public void Execute()&#10;        {&#10;            if (_grounded)&#10;            {&#10;                Vector2 jumpDir = new(transform.localScale.x * jumpForceX, jumpForceY);&#10;                _rb.linearVelocity = jumpDir;&#10;            }&#10;        }&#10;&#10;        public void ResetState()&#10;        {&#10;            _grounded = false;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemies/Behaviors/ProjectileShooter.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemies/Behaviors/ProjectileShooter.cs" />
              <option name="originalContent" value="using Enemies.Interfaces;&#10;using UnityEngine;&#10;using Weapons.Models;&#10;&#10;namespace Enemies.Behaviors&#10;{&#10;    // Command to shoot a projectile at intervals&#10;    public class ProjectileShootCommand : MonoBehaviour, IAttackCommand&#10;    {&#10;        [SerializeField] private FireballWeapon fireballWeapon;&#10;        [SerializeField] private float fireInterval = 2f;&#10;&#10;        private float _lastFireTime;&#10;&#10;        private void Start()&#10;        {&#10;            fireballWeapon.Equip();&#10;        }&#10;&#10;        public void Execute()&#10;        {&#10;            if (!fireballWeapon)&#10;                return;&#10;&#10;            if (Time.time - _lastFireTime &lt; fireInterval)&#10;                return;&#10;&#10;            fireballWeapon.Shoot();&#10;            _lastFireTime = Time.time;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using Enemies.Interfaces;&#10;using UnityEngine;&#10;using Weapons.Models;&#10;&#10;namespace Enemies.Behaviors&#10;{&#10;    // Command to shoot a projectile at intervals&#10;    public class ProjectileShootCommand : MonoBehaviour, IAttackCommand&#10;    {&#10;        [SerializeField] private FireballWeapon fireballWeapon;&#10;        [SerializeField] private float fireInterval = 2f;&#10;&#10;        private float _lastFireTime;&#10;&#10;        private void Start()&#10;        {&#10;            fireballWeapon.Equip();&#10;        }&#10;&#10;        public void Execute()&#10;        {&#10;            if (!fireballWeapon)&#10;                return;&#10;&#10;            if (Time.time - _lastFireTime &lt; fireInterval)&#10;                return;&#10;&#10;            fireballWeapon.Shoot();&#10;            _lastFireTime = Time.time;&#10;        }&#10;&#10;        public void ResetCooldown()&#10;        {&#10;            _lastFireTime = 0f;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemies/Behaviors/VerticalMover.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemies/Behaviors/VerticalMover.cs" />
              <option name="originalContent" value="using Enemies.Interfaces;&#10;using UnityEngine;&#10;&#10;namespace Enemies.Behaviors&#10;{&#10;    // Command to move the enemy up and down&#10;    public class VerticalMoveCommand : MonoBehaviour, IMovementCommand&#10;    {&#10;        [SerializeField] private float amplitude = 2f;&#10;        [SerializeField] private float frequency = 0.8f;&#10;&#10;        private Rigidbody2D _rb;&#10;        private float _startY;&#10;&#10;        private void Awake()&#10;        {&#10;            _rb = GetComponent&lt;Rigidbody2D&gt;();&#10;            _startY = transform.position.y;&#10;        }&#10;&#10;        public void Execute()&#10;        {&#10;            float t = Mathf.PingPong(Time.time * frequency, 1f);&#10;            float triangle = 2f * Mathf.Abs(t - 0.5f);&#10;            float y = _startY + (triangle - 0.5f) * 2f * amplitude;&#10;            _rb.linearVelocityY = (y - _rb.position.y) / Time.fixedDeltaTime;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using Enemies.Interfaces;&#10;using UnityEngine;&#10;&#10;namespace Enemies.Behaviors&#10;{&#10;    // Command to move the enemy up and down&#10;    public class VerticalMoveCommand : MonoBehaviour, IMovementCommand&#10;    {&#10;        [SerializeField] private float amplitude = 2f;&#10;        [SerializeField] private float frequency = 0.8f;&#10;&#10;        private Rigidbody2D _rb;&#10;        private float _startY;&#10;&#10;        private void Awake()&#10;        {&#10;            _rb = GetComponent&lt;Rigidbody2D&gt;();&#10;            _startY = transform.position.y;&#10;        }&#10;&#10;        public void Execute()&#10;        {&#10;            float t = Mathf.PingPong(Time.time * frequency, 1f);&#10;            float triangle = 2f * Mathf.Abs(t - 0.5f);&#10;            float y = _startY + (triangle - 0.5f) * 2f * amplitude;&#10;            _rb.linearVelocityY = (y - _rb.position.y) / Time.fixedDeltaTime;&#10;        }&#10;&#10;        public void ResetPosition()&#10;        {&#10;            _rb.position = new Vector2(_rb.position.x, _startY);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemies/Behaviors/WaveMover.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemies/Behaviors/WaveMover.cs" />
              <option name="originalContent" value="using Enemies.Interfaces;&#10;using UnityEngine;&#10;&#10;namespace Enemies.Behaviors&#10;{&#10;    // Command to move the enemy in a wave pattern&#10;    public class WaveMoveCommand : MonoBehaviour, IMovementCommand&#10;    {&#10;        [SerializeField] private float speed = 2f;&#10;        [SerializeField] private float amplitude = 1f;&#10;        [SerializeField] private float frequency = 1.11f;&#10;&#10;        private Rigidbody2D _rb;&#10;        private float _startY;&#10;&#10;        private void Awake()&#10;        {&#10;            _rb = GetComponent&lt;Rigidbody2D&gt;();&#10;            _startY = transform.position.y;&#10;        }&#10;&#10;        public void Execute()&#10;        {&#10;            float t = Mathf.PingPong(Time.time * frequency, 1f);&#10;            float triangle = 2f * Mathf.Abs(t - 0.5f);&#10;            float y = _startY + (triangle - 0.5f) * 2f * amplitude;&#10;            _rb.linearVelocity = new Vector2(-speed, (y - _rb.position.y) / Time.fixedDeltaTime);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using Enemies.Interfaces;&#10;using UnityEngine;&#10;&#10;namespace Enemies.Behaviors&#10;{&#10;    // Command to move the enemy in a wave pattern&#10;    public class WaveMoveCommand : MonoBehaviour, IMovementCommand&#10;    {&#10;        [SerializeField] private float speed = 2f;&#10;        [SerializeField] private float amplitude = 1f;&#10;        [SerializeField] private float frequency = 1.11f;&#10;&#10;        private Rigidbody2D _rb;&#10;        private float _startY;&#10;&#10;        private void Awake()&#10;        {&#10;            _rb = GetComponent&lt;Rigidbody2D&gt;();&#10;            _startY = transform.position.y;&#10;        }&#10;&#10;        public void Execute()&#10;        {&#10;            float t = Mathf.PingPong(Time.time * frequency, 1f);&#10;            float triangle = 2f * Mathf.Abs(t - 0.5f);&#10;            float y = _startY + (triangle - 0.5f) * 2f * amplitude;&#10;            _rb.linearVelocity = new Vector2(-speed, (y - _rb.position.y) / Time.fixedDeltaTime);&#10;        }&#10;&#10;        public void ResetPosition()&#10;        {&#10;            _rb.position = new Vector2(_rb.position.x, _startY);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemies/Core/BehaviorOrchestrator.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemies/Core/BehaviorOrchestrator.cs" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemies/Core/EnemyBehaviorController.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemies/Core/EnemyBehaviorController.cs" />
              <option name="originalContent" value="using UnityEngine;&#10;using Enemies.Interfaces;&#10;&#10;namespace Enemies.Core&#10;{&#10;    // Wires up modular behaviors. Attach this to any enemy prefab.&#10;    public class EnemyBehaviorController : MonoBehaviour&#10;    {&#10;        private IMovementBehavior[] _movementBehaviors;&#10;        private IAttackBehavior[] _attackBehaviors;&#10;        private ITriggerBehavior[] _triggerBehaviors;&#10;&#10;        private void Awake()&#10;        {&#10;            _movementBehaviors = GetComponents&lt;IMovementBehavior&gt;();&#10;            _attackBehaviors = GetComponents&lt;IAttackBehavior&gt;();&#10;            _triggerBehaviors = GetComponents&lt;ITriggerBehavior&gt;();&#10;        }&#10;&#10;        private void Update()&#10;        {&#10;            foreach (ITriggerBehavior trigger in _triggerBehaviors) trigger.CheckTrigger();&#10;            foreach (IMovementBehavior move in _movementBehaviors) move.Move();&#10;            foreach (IAttackBehavior attack in _attackBehaviors) attack.Attack();&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using UnityEngine;&#10;using Enemies.Interfaces;&#10;&#10;namespace Enemies.Core&#10;{&#10;    // Coordinates modular behaviors. Attach this to any enemy prefab.&#10;    public class EnemyBehaviorController : MonoBehaviour&#10;    {&#10;        private IMovementBehavior[] _movementBehaviors;&#10;        private IAttackBehavior[] _attackBehaviors;&#10;        private ITriggerBehavior[] _triggerBehaviors;&#10;&#10;        private void Awake()&#10;        {&#10;            _movementBehaviors = GetComponents&lt;IMovementBehavior&gt;();&#10;            _attackBehaviors = GetComponents&lt;IAttackBehavior&gt;();&#10;            _triggerBehaviors = GetComponents&lt;ITriggerBehavior&gt;();&#10;        }&#10;&#10;        private void Update()&#10;        {&#10;            foreach (ITriggerBehavior trigger in _triggerBehaviors) trigger.CheckTrigger();&#10;        }&#10;&#10;        private void FixedUpdate()&#10;        {&#10;            foreach (IMovementBehavior move in _movementBehaviors) move.Move();&#10;        }&#10;&#10;        private void LateUpdate()&#10;        {&#10;            foreach (IAttackBehavior attack in _attackBehaviors) attack.Attack();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemies/Core/EnemyController.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemies/Core/EnemyController.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;using Enemies.Interfaces;&#10;&#10;namespace Enemies.Core&#10;{&#10;    // Wires up modular behaviors. Attach this to any enemy prefab.&#10;    public class EnemyController : MonoBehaviour&#10;    {&#10;        private IMovementBehavior[] _movementBehaviors;&#10;        private IAttackBehavior[] _attackBehaviors;&#10;        private ITriggerBehavior[] _triggerBehaviors;&#10;&#10;        private void Awake()&#10;        {&#10;            _movementBehaviors = GetComponents&lt;IMovementBehavior&gt;();&#10;            _attackBehaviors = GetComponents&lt;IAttackBehavior&gt;();&#10;            _triggerBehaviors = GetComponents&lt;ITriggerBehavior&gt;();&#10;        }&#10;&#10;        private void Update()&#10;        {&#10;            foreach (var trigger in _triggerBehaviors) trigger.CheckTrigger();&#10;            foreach (var move in _movementBehaviors) move.Move();&#10;            foreach (var attack in _attackBehaviors) attack.Attack();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemies/Core/TriggerManager.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemies/Core/TriggerManager.cs" />
              <option name="originalContent" value="using Enemies.Interfaces;&#10;using UnityEngine;&#10;using System.Linq;&#10;&#10;namespace Enemies.Core&#10;{&#10;    // Manages periodic checks for all triggers in the scene&#10;    public class TriggerManager : MonoBehaviour&#10;    {&#10;        private TriggerGroup[] _triggerGroups;&#10;&#10;        private void Awake()&#10;        {&#10;            _triggerGroups = FindObjectsOfType&lt;MonoBehaviour&gt;().OfType&lt;TriggerGroup&gt;().ToArray();&#10;        }&#10;&#10;        private void Update()&#10;        {&#10;            foreach (var group in _triggerGroups)&#10;            {&#10;                group.Update();&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using Enemies.Interfaces;&#10;using UnityEngine;&#10;using System.Linq;&#10;&#10;namespace Enemies.Core&#10;{&#10;    // Manages periodic checks for all triggers in the scene&#10;    public class TriggerManager : MonoBehaviour&#10;    {&#10;        private TriggerGroup[] _triggerGroups;&#10;&#10;        private void Awake()&#10;        {&#10;            _triggerGroups = FindObjectsOfType&lt;MonoBehaviour&gt;().OfType&lt;TriggerGroup&gt;().ToArray();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemies/DeathEffects/DeathEffectData.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemies/DeathEffects/DeathEffectData.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemies/DeathEffects/DeathEffectFactory.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemies/DeathEffects/DeathEffectFactory.cs" />
              <option name="updatedContent" value="using Enemies.DeathEffects.Builder;&#10;        }&#10;&#10;        public IDeathEffectBuilder GetBuilder(DeathEffectType type)&#10;        {&#10;            switch (type)&#10;            {&#10;                case DeathEffectType.Falling:&#10;                    return new FallingDeathEffectBuilder();&#10;                default:&#10;                    UnityEngine.Debug.LogError($&quot;DeathEffectFactory: Unknown death effect type: {type}&quot;);&#10;                    return null;&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemies/DeathEffects/DeathEffects.meta">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemies/DeathEffects/DeathEffects.meta" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemies/DeathEffects/FallingDeathEffect.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemies/DeathEffects/FallingDeathEffect.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemies/DeathEffects/FallingDeathEffectBuilder.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemies/DeathEffects/FallingDeathEffectBuilder.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;                return null;&#10;            }&#10;&#10;            if (_camera == null)&#10;            {&#10;                _camera = Camera.main;&#10;            }&#10;&#10;            // Create new GameObject&#10;            GameObject effectObject = new GameObject(&quot;DeathEffect&quot;);&#10;            effectObject.transform.position = _position;&#10;&#10;            // Add and configure the death effect component&#10;            FallingDeathEffect deathEffect = effectObject.AddComponent&lt;FallingDeathEffect&gt;();&#10;            deathEffect.Initialize(_sprite, _velocity, _rotationSpeed, _gravityScale, _destroyDelay, _camera);&#10;&#10;            return deathEffect;&#10;        }&#10;&#10;        public void Reset()&#10;        {&#10;            _position = Vector3.zero;&#10;            _velocity = new Vector3(2f, 5f, 0f);&#10;            _sprite = null;&#10;            _rotationSpeed = 180f;&#10;            _gravityScale = 1f;&#10;            _destroyDelay = 5f;&#10;            _camera = null;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemies/DeathEffects/IDeathEffect.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemies/DeathEffects/IDeathEffect.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemies/DeathEffects/IDeathEffectBuilder.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemies/DeathEffects/IDeathEffectBuilder.cs" />
              <option name="updatedContent" value="using Enemies.DeathEffects.Data;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemies/DeathEffects/IDeathEffectFactory.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemies/DeathEffects/IDeathEffectFactory.cs" />
              <option name="updatedContent" value="using Enemies.DeathEffects.Builder;&#10;using Enemies.DeathEffects.Interfaces;&#10;&#10;namespace Enemies.DeathEffects.Factory&#10;{&#10;    /// &lt;summary&gt;&#10;    /// Factory interface for creating different types of death effects&#10;    /// &lt;/summary&gt;&#10;    public interface IDeathEffectFactory&#10;    {&#10;        IDeathEffect CreateDeathEffect(DeathEffectType type);&#10;        IDeathEffectBuilder GetBuilder(DeathEffectType type);&#10;    }&#10;&#10;    /// &lt;summary&gt;&#10;    /// Enum defining the types of death effects available&#10;    /// &lt;/summary&gt;&#10;    public enum DeathEffectType&#10;    {&#10;        Falling,&#10;        // Future types can be added here like Exploding, Dissolving, etc.&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemies/Interfaces/IAttackBehavior.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemies/Interfaces/IAttackBehavior.cs" />
              <option name="originalContent" value="namespace Enemies.Interfaces&#10;{&#10;    public interface IAttackBehavior&#10;    {&#10;        void Attack();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="namespace Enemies.Interfaces&#10;{&#10;    public interface IAttackBehavior&#10;    {&#10;        void Attack();&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemies/Interfaces/IMovementBehavior.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemies/Interfaces/IMovementBehavior.cs" />
              <option name="originalContent" value="namespace Enemies.Interfaces&#10;{&#10;    public interface IMovementBehavior&#10;    {&#10;        void Move();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="namespace Enemies.Interfaces&#10;{&#10;    public interface IMovementBehavior&#10;    {&#10;        void Move();&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemies/Interfaces/ITriggerBehavior.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemies/Interfaces/ITriggerBehavior.cs" />
              <option name="originalContent" value="namespace Enemies.Interfaces&#10;{&#10;    public interface ITrigger&#10;    {&#10;        bool IsTriggered { get; }&#10;    }&#10;&#10;    public interface ITriggerBehavior&#10;    {&#10;        void CheckTrigger();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="namespace Enemies.Interfaces&#10;{&#10;    public interface ITrigger&#10;    {&#10;        bool IsTriggered { get; }&#10;        void CheckTrigger();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemy/Behaviors/EnemyBehaviors.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemy/Behaviors/EnemyBehaviors.cs" />
              <option name="updatedContent" value="namespace Enemy.Behaviors&#10;{&#10;    // Optional movement behavior&#10;    public interface IMovable&#10;    {&#10;        void Move();&#10;    }&#10;&#10;    // Optional player proximity reaction&#10;    public interface IPlayerProximityReactable&#10;    {&#10;        void OnPlayerNearby();&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemy/BirdEnemy.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemy/BirdEnemy.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;using Enemy.Behaviors;&#10;&#10;namespace Enemy&#10;{&#10;    // Bird: Moves left, goes up and down&#10;    public class BirdEnemy : EnemyBase, IMovable&#10;    {&#10;        [SerializeField] private float moveSpeed = 2f;&#10;        [SerializeField] private float verticalAmplitude = 1f;&#10;        [SerializeField] private float verticalFrequency = 1f;&#10;        private Vector3 _startPos;&#10;        private float _time;&#10;&#10;        protected override void Awake()&#10;        {&#10;            base.Awake();&#10;            _startPos = transform.position;&#10;        }&#10;&#10;        public void Move()&#10;        {&#10;            _time += Time.deltaTime;&#10;            float yOffset = Mathf.Sin(_time * verticalFrequency) * verticalAmplitude;&#10;            transform.position = _startPos + new Vector3(-moveSpeed * _time, yOffset, 0);&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemy/EnemyBase.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemy/EnemyBase.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;&#10;namespace Enemy&#10;{&#10;    public abstract class EnemyBase : MonoBehaviour&#10;    {&#10;        protected Rigidbody2D rb;&#10;        protected Collider2D col;&#10;        protected virtual void Awake()&#10;        {&#10;            rb = GetComponent&lt;Rigidbody2D&gt;();&#10;            col = GetComponent&lt;Collider2D&gt;();&#10;        }&#10;&#10;        public virtual void Move() { }&#10;        public virtual void Attack() { }&#10;        public virtual void OnPlayerNearby() { }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemy/EnemyBuilder.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemy/EnemyBuilder.cs" />
              <option name="originalContent" value="using Enemy.Behaviors;&#10;using Weapons.Models;&#10;using UnityEngine;&#10;&#10;namespace Enemy&#10;{&#10;    public class EnemyBuilder&#10;    {&#10;        private readonly EnemyBase _enemy;&#10;&#10;        public EnemyBuilder(EnemyBase enemy)&#10;        {&#10;            _enemy = enemy;&#10;        }&#10;&#10;        public EnemyBuilder WithFireSnakeBehavior()&#10;        {&#10;            // Example: assign FireballWeapon if available&#10;            var fireSnake = _enemy as FireSnakeEnemy;&#10;            if (fireSnake)&#10;            {&#10;                FireballWeapon weapon = fireSnake.GetComponentInChildren&lt;FireballWeapon&gt;();&#10;                if (weapon)&#10;                {&#10;                    weapon.Equip();&#10;                    // Additional setup if needed&#10;                }&#10;            }&#10;            return this;&#10;        }&#10;&#10;        public EnemyBuilder WithSpiderBehavior()&#10;        {&#10;            // Assign movement or proximity logic as needed&#10;            return this;&#10;        }&#10;&#10;        public EnemyBuilder WithBirdBehavior()&#10;        {&#10;            // Assign movement logic as needed&#10;            return this;&#10;        }&#10;&#10;        public EnemyBuilder WithSnakeBehavior()&#10;        {&#10;            // Assign jump logic as needed&#10;            var snake = _enemy as SnakeEnemy;&#10;            if (snake)&#10;            {&#10;                // Example: assign a jump movement component or set jump parameters&#10;                // (Assume SnakeEnemy implements IMovable and has a Jump method)&#10;            }&#10;            return this;&#10;        }&#10;&#10;        public EnemyBuilder WithFrogBehavior()&#10;        {&#10;            // Assign jump and proximity logic as needed&#10;            var frog = _enemy as FrogEnemy;&#10;            if (frog)&#10;            {&#10;                // Example: assign a jump movement component or set jump parameters&#10;                // (Assume FrogEnemy implements IMovable and IPlayerProximityReactable)&#10;            }&#10;            return this;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using Enemy.Behaviors;&#10;using Weapons.Models;&#10;using UnityEngine;&#10;&#10;namespace Enemy&#10;{&#10;    public class EnemyBuilder&#10;    {&#10;        private readonly EnemyBase _enemy;&#10;&#10;        public EnemyBuilder(EnemyBase enemy)&#10;        {&#10;            _enemy = enemy;&#10;        }&#10;&#10;        public EnemyBuilder WithFireSnakeBehavior()&#10;        {&#10;            // Example: assign FireballWeapon if available&#10;            var fireSnake = _enemy as FireSnakeEnemy;&#10;            if (fireSnake)&#10;            {&#10;                FireballWeapon weapon = fireSnake.GetComponentInChildren&lt;FireballWeapon&gt;();&#10;                if (weapon)&#10;                {&#10;                    weapon.Equip();&#10;                    // Additional setup if needed&#10;                }&#10;            }&#10;            return this;&#10;        }&#10;&#10;        public EnemyBuilder WithSpiderBehavior()&#10;        {&#10;            // Spider: Can move up/down or stay static in air&#10;            var spider = _enemy as SpiderEnemy;&#10;            if (spider)&#10;            {&#10;                // No extra setup needed; movement handled in SpiderEnemy&#10;            }&#10;            return this;&#10;        }&#10;&#10;        public EnemyBuilder WithBirdBehavior()&#10;        {&#10;            // Bird: Moves left, goes up and down&#10;            var bird = _enemy as BirdEnemy;&#10;            if (bird)&#10;            {&#10;                // No extra setup needed; movement handled in BirdEnemy&#10;            }&#10;            return this;&#10;        }&#10;&#10;        public EnemyBuilder WithSnakeBehavior()&#10;        {&#10;            // Snake: Jumps forward&#10;            var snake = _enemy as SnakeEnemy;&#10;            if (snake)&#10;            {&#10;                // No extra setup needed; jump logic handled in SnakeEnemy&#10;            }&#10;            return this;&#10;        }&#10;&#10;        public EnemyBuilder WithFrogBehavior()&#10;        {&#10;            // Frog: Jumps higher/farther, jumps when player is near&#10;            var frog = _enemy as FrogEnemy;&#10;            if (frog)&#10;            {&#10;                // No extra setup needed; jump and proximity handled in FrogEnemy&#10;            }&#10;            return this;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemy/EnemyDirector.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemy/EnemyDirector.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;&#10;namespace Enemy&#10;{&#10;    public static class EnemyDirector&#10;    {&#10;        // Entry point for configuring an enemy in the scene&#10;        public static void ConstructEnemy(EnemyType type, EnemyBase enemy)&#10;        {&#10;            // The director delegates the construction to the factory&#10;            EnemyFactory.ConfigureEnemy(type, enemy);&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemy/EnemyFactory.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemy/EnemyFactory.cs" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="using System;&#10;using UnityEngine;&#10;&#10;namespace Enemy&#10;{&#10;    public enum EnemyType&#10;    {&#10;        FireSnake,&#10;        Spider,&#10;        Bird,&#10;        Snake,&#10;        Frog&#10;    }&#10;&#10;    public static class EnemyFactory&#10;    {&#10;        // Configures an existing enemy instance using the builder pattern&#10;        public static void ConfigureEnemy(EnemyType type, EnemyBase enemy)&#10;        {&#10;            if (enemy == null) throw new ArgumentNullException(nameof(enemy));&#10;            var builder = new EnemyBuilder(enemy);&#10;            switch (type)&#10;            {&#10;                case EnemyType.FireSnake:&#10;                    builder.WithFireSnakeBehavior();&#10;                    break;&#10;                case EnemyType.Spider:&#10;                    builder.WithSpiderBehavior();&#10;                    break;&#10;                case EnemyType.Bird:&#10;                    builder.WithBirdBehavior();&#10;                    break;&#10;                case EnemyType.Snake:&#10;                    builder.WithSnakeBehavior();&#10;                    break;&#10;                case EnemyType.Frog:&#10;                    builder.WithFrogBehavior();&#10;                    break;&#10;                default:&#10;                    break;&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemy/FireSnakeEnemy.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemy/FireSnakeEnemy.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;using Weapons.Models;&#10;&#10;namespace Enemy&#10;{&#10;    public class FireSnakeEnemy : EnemyBase&#10;    {&#10;        [SerializeField] private FireballWeapon fireballWeapon;&#10;        [SerializeField] private float attackCooldown = 2f;&#10;        private float _nextAttackTime;&#10;&#10;        protected override void Awake()&#10;        {&#10;            base.Awake();&#10;            if (fireballWeapon != null)&#10;                fireballWeapon.Equip();&#10;        }&#10;&#10;        public override void Attack()&#10;        {&#10;            if (fireballWeapon == null)&#10;                return;&#10;            if (Time.time &lt; _nextAttackTime)&#10;                return;&#10;            fireballWeapon.Shoot();&#10;            _nextAttackTime = Time.time + attackCooldown;&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemy/FrogEnemy.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemy/FrogEnemy.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;using Enemy.Behaviors;&#10;&#10;namespace Enemy&#10;{&#10;    // Frog: Jumps higher and farther, jumps when player is near&#10;    public class FrogEnemy : EnemyBase, IMovable, IPlayerProximityReactable&#10;    {&#10;        [SerializeField] private float jumpForce = 12f;&#10;        [SerializeField] private float jumpDistance = 6f;&#10;        [SerializeField] private float jumpCooldown = 2f;&#10;        private float _nextJumpTime;&#10;        private Rigidbody2D _rb;&#10;        private bool _playerNearby;&#10;&#10;        protected override void Awake()&#10;        {&#10;            base.Awake();&#10;            _rb = GetComponent&lt;Rigidbody2D&gt;();&#10;        }&#10;&#10;        public void Move()&#10;        {&#10;            if (_playerNearby &amp;&amp; Time.time &gt;= _nextJumpTime)&#10;            {&#10;                Vector2 jumpVector = new Vector2(jumpDistance, jumpForce);&#10;                _rb.AddForce(jumpVector, ForceMode2D.Impulse);&#10;                _nextJumpTime = Time.time + jumpCooldown;&#10;                _playerNearby = false; // Only jump once per proximity event&#10;            }&#10;        }&#10;&#10;        public void OnPlayerNearby()&#10;        {&#10;            _playerNearby = true;&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemy/MVC/EnemyBase.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemy/MVC/EnemyBase.cs" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemy/MVC/FireSnake.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemy/MVC/FireSnake.cs" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemy/SnakeEnemy.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemy/SnakeEnemy.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;using Enemy.Behaviors;&#10;&#10;namespace Enemy&#10;{&#10;    // Snake: Jumps forward&#10;    public class SnakeEnemy : EnemyBase, IMovable&#10;    {&#10;        [SerializeField] private float jumpForce = 7f;&#10;        [SerializeField] private float jumpInterval = 2f;&#10;        private float _nextJumpTime;&#10;        private Rigidbody2D _rb;&#10;&#10;        protected override void Awake()&#10;        {&#10;            base.Awake();&#10;            _rb = GetComponent&lt;Rigidbody2D&gt;();&#10;        }&#10;&#10;        public void Move()&#10;        {&#10;            if (Time.time &gt;= _nextJumpTime)&#10;            {&#10;                _rb.AddForce(Vector2.right * jumpForce, ForceMode2D.Impulse);&#10;                _nextJumpTime = Time.time + jumpInterval;&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemy/SpiderEnemy.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemy/SpiderEnemy.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;using Enemy.Behaviors;&#10;&#10;namespace Enemy&#10;{&#10;    // Spider: Can move up/down or stay static in air&#10;    public class SpiderEnemy : EnemyBase, IMovable&#10;    {&#10;        [SerializeField] private bool canMove = true;&#10;        [SerializeField] private float moveSpeed = 2f;&#10;        [SerializeField] private float moveDistance = 3f;&#10;        private Vector3 _startPos;&#10;        private bool _movingUp = true;&#10;&#10;        protected override void Awake()&#10;        {&#10;            base.Awake();&#10;            _startPos = transform.position;&#10;        }&#10;&#10;        public void Move()&#10;        {&#10;            if (!canMove) return;&#10;            float delta = moveSpeed * Time.deltaTime * (_movingUp ? 1 : -1);&#10;            transform.position += new Vector3(0, delta, 0);&#10;            if (Mathf.Abs(transform.position.y - _startPos.y) &gt; moveDistance)&#10;                _movingUp = !_movingUp;&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Health/Damage/Conditions/AlwaysAllowDamage.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Health/Damage/Conditions/AlwaysAllowDamage.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;using Health.Interfaces;&#10;&#10;namespace Health.Damage.Conditions&#10;{&#10;    [DisallowMultipleComponent]&#10;    public class AlwaysAllowDamage : MonoBehaviour, IDamageCondition&#10;    {&#10;        public bool CanBeDamagedBy(GameObject damager) =&gt; true;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Health/Damage/Conditions/AndDamageCondition.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Health/Damage/Conditions/AndDamageCondition.cs" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Health/Damage/Conditions/OrDamageCondition.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Health/Damage/Conditions/OrDamageCondition.cs" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Health/Damage/DamageOnCollision.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Health/Damage/DamageOnCollision.cs" />
              <option name="originalContent" value="using Health.Interfaces;&#10;using UnityEngine;&#10;&#10;namespace Health.Damage&#10;{&#10;    [DisallowMultipleComponent]&#10;    public class DamageOnCollision : MonoBehaviour&#10;    {&#10;        private IDamageDealer _dealer;&#10;        private DamageConditionsComponent _damageConditions;&#10;&#10;        [SerializeField] private LayerMask targetLayers = ~0; // All layers by default&#10;&#10;        private void Awake()&#10;        {&#10;            _dealer = GetComponent&lt;IDamageDealer&gt;();&#10;            _damageConditions = GetComponent&lt;DamageConditionsComponent&gt;();&#10;        }&#10;&#10;        private void OnCollisionEnter2D(Collision2D collision)&#10;        {&#10;            GameObject target = collision.gameObject;&#10;            if (((1 &lt;&lt; target.layer) &amp; targetLayers) == 0)&#10;                return;&#10;            IDamageable damageable = target.GetComponent&lt;IDamageable&gt;();&#10;            if (damageable == null) return;&#10;&#10;            if (_damageConditions &amp;&amp; !_damageConditions.CanBeDamagedBy(target))&#10;                return;&#10;&#10;            int amount = _dealer?.GetDamageAmount() ?? 1;&#10;            damageable.Damage(amount, gameObject);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using Health.Interfaces;&#10;using System.Linq;&#10;using UnityEngine;&#10;&#10;namespace Health.Damage&#10;{&#10;    [DisallowMultipleComponent]&#10;    public class BidirectionalDamageOnCollision : MonoBehaviour&#10;    {&#10;        private IDamageDealer _dealer;&#10;        private DamageConditionsComponent _damageConditions;&#10;        [SerializeField] private LayerMask targetLayers = ~0;&#10;&#10;        private void Awake()&#10;        {&#10;            _dealer = GetComponent&lt;IDamageDealer&gt;();&#10;            _damageConditions = GetComponent&lt;DamageConditionsComponent&gt;();&#10;        }&#10;&#10;        private void OnCollisionEnter2D(Collision2D collision)&#10;        {&#10;            GameObject other = collision.gameObject;&#10;            GameObject self = gameObject;&#10;&#10;            // 1. This object damages the other&#10;            TryDealDamage(self, other, _dealer, _damageConditions, targetLayers);&#10;&#10;            // 2. The other object damages this&#10;            var otherDealer = other.GetComponent&lt;IDamageDealer&gt;();&#10;            var otherConditions = other.GetComponent&lt;DamageConditionsComponent&gt;();&#10;            TryDealDamage(other, self, otherDealer, otherConditions, targetLayers);&#10;        }&#10;&#10;        private static void TryDealDamage(&#10;            GameObject dealerObj,&#10;            GameObject targetObj,&#10;            IDamageDealer dealer,&#10;            DamageConditionsComponent conditions,&#10;            LayerMask targetLayers)&#10;        {&#10;            if (dealer == null) return;&#10;            if (((1 &lt;&lt; targetObj.layer) &amp; targetLayers) == 0) return;&#10;            var damageable = targetObj.GetComponent&lt;IDamageable&gt;();&#10;            if (damageable == null) return;&#10;            if (conditions &amp;&amp; !conditions.CanBeDamagedBy(targetObj)) return;&#10;            int amount = dealer.GetDamageAmount();&#10;            if (amount &gt; 0)&#10;                damageable.Damage(amount, dealerObj);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Health/Damage/DealDamageOnCollision.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Health/Damage/DealDamageOnCollision.cs" />
              <option name="originalContent" value="using Health.Interfaces;&#10;using UnityEngine;&#10;&#10;namespace Health.Damage&#10;{&#10;    [DisallowMultipleComponent]&#10;    public class DealDamageOnCollision : MonoBehaviour&#10;    {&#10;        private IDamageDealer _dealer;&#10;        private DamageConditionsComponent _damageConditions;&#10;        [SerializeField] private LayerMask targetLayers = ~0;&#10;&#10;        private void Awake()&#10;        {&#10;            _dealer = GetComponent&lt;IDamageDealer&gt;();&#10;            _damageConditions = GetComponent&lt;DamageConditionsComponent&gt;();&#10;        }&#10;&#10;        private void OnCollisionEnter2D(Collision2D collision)&#10;        {&#10;            GameObject target = collision.gameObject;&#10;            if (_dealer == null) return;&#10;            if (((1 &lt;&lt; target.layer) &amp; targetLayers) == 0) return;&#10;            IDamageable damageable = target.GetComponent&lt;IDamageable&gt;();&#10;            if (damageable == null) return;&#10;            if (_damageConditions &amp;&amp; !_damageConditions.CanBeDamagedBy(target)) return;&#10;            int amount = _dealer.GetDamageAmount();&#10;            if (amount &gt; 0)&#10;                damageable.Damage(amount, gameObject);&#10;        }&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="using Health.Interfaces;&#10;using UnityEngine;&#10;&#10;namespace Health.Damage&#10;{&#10;    [DisallowMultipleComponent]&#10;    public class DealDamageOnCollision : MonoBehaviour&#10;    {&#10;        private IDamageDealer _dealer;&#10;        private DamageConditionsComponent _damageConditions;&#10;        [SerializeField] private LayerMask targetLayers = ~0;&#10;&#10;        private void Awake()&#10;        {&#10;            _dealer = GetComponent&lt;IDamageDealer&gt;();&#10;            _damageConditions = GetComponent&lt;DamageConditionsComponent&gt;();&#10;        }&#10;&#10;        private void OnCollisionEnter2D(Collision2D collision)&#10;        {&#10;            GameObject target = collision.gameObject;&#10;            if (_dealer == null) return;&#10;            if (((1 &lt;&lt; target.layer) &amp; targetLayers) == 0) return;&#10;            IDamageable damageable = target.GetComponent&lt;IDamageable&gt;();&#10;            if (damageable == null) return;&#10;            if (_damageConditions &amp;&amp; !_damageConditions.CanBeDamagedBy(target)) return;&#10;            int amount = _dealer.GetDamageAmount();&#10;            if (amount &gt; 0)&#10;                damageable.Damage(amount, gameObject);&#10;        }&#10;    }&#10;}&#10;&#10;// This script is now deprecated in favor of TakeDamageOnCollision for most use cases.&#10;// Please use TakeDamageOnCollision on all damageable objects instead." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Health/Damage/HazardComponent.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Health/Damage/HazardComponent.cs" />
              <option name="originalContent" value="using System.Linq;&#10;using Health.Interfaces;&#10;using UnityEngine;&#10;&#10;namespace Health.Damage&#10;{&#10;    [DisallowMultipleComponent]&#10;    public class HazardComponent : MonoBehaviour&#10;    {&#10;        [Tooltip(&quot;Assign components implementing IDamageCondition here.&quot;)] [SerializeField]&#10;        private MonoBehaviour[] damageConditions;&#10;&#10;        private IDamageCondition[] _conditions;&#10;        private void Awake()&#10;        {&#10;            _conditions = damageConditions.Cast&lt;IDamageCondition&gt;().ToArray();&#10;        }&#10;        public bool CanBeDamagedBy(GameObject damager)&#10;        {&#10;            foreach (IDamageCondition cond in _conditions)&#10;            {&#10;                if (cond != null &amp;&amp; !cond.CanBeDamagedBy(damager))&#10;                    return false;&#10;            }&#10;&#10;            return true;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using System.Linq;&#10;using Health.Interfaces;&#10;using UnityEngine;&#10;&#10;namespace Health.Damage&#10;{&#10;    [DisallowMultipleComponent]&#10;    public class HazardComponent : MonoBehaviour&#10;    {&#10;        [Tooltip(&quot;Assign components implementing IDamageCondition here.&quot;)] [SerializeField]&#10;        private MonoBehaviour[] damageConditions;&#10;&#10;        private IDamageCondition[] _conditions;&#10;        private void Awake()&#10;        {&#10;            _conditions = damageConditions.Cast&lt;IDamageCondition&gt;().ToArray();&#10;        }&#10;        public bool CanBeDamagedBy(GameObject damager)&#10;        {&#10;            return _conditions.All(cond =&gt; cond == null || cond.CanBeDamagedBy(damager));&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Health/Damage/ShieldBreaksHazardOnCollision.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Health/Damage/ShieldBreaksHazardOnCollision.cs" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Health/Editor/ConditionNodeTreeDrawers.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Health/Editor/ConditionNodeTreeDrawers.cs" />
              <option name="originalContent" value="using Health.Damage;&#10;using UnityEditor;&#10;using UnityEngine;&#10;&#10;[CustomPropertyDrawer(typeof(ConditionLeaf))]&#10;public class ConditionLeafPropertyDrawer : ConditionNodePropertyDrawer {}&#10;&#10;[CustomPropertyDrawer(typeof(AndCondition))]&#10;public class AndConditionPropertyDrawer : ConditionNodePropertyDrawer {&#10;    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {&#10;        EditorGUI.BeginProperty(position, label, property);&#10;        var childrenProp = property.FindPropertyRelative(&quot;children&quot;);&#10;        float y = position.y;&#10;        float width = position.width;&#10;        float lineHeight = EditorGUIUtility.singleLineHeight + 2;&#10;        // Draw header&#10;        Rect headerRect = new Rect(position.x, y, width, lineHeight);&#10;        EditorGUI.LabelField(headerRect, &quot;AND Group&quot;, EditorStyles.boldLabel);&#10;        y += lineHeight;&#10;        // Draw each child node using the full custom node UI&#10;        if (childrenProp != null &amp;&amp; childrenProp.isArray) {&#10;            for (int i = 0; i &lt; childrenProp.arraySize; i++) {&#10;                var childProp = childrenProp.GetArrayElementAtIndex(i);&#10;                float childHeight = GetNodeHeight(childProp);&#10;                Rect childRect = new Rect(position.x + 16, y, width - 16, childHeight);&#10;                DrawNode(childRect, childProp, 1); // indent = 1 for children&#10;                y += childHeight + 2;&#10;            }&#10;            // Add button&#10;            Rect addRect = new Rect(position.x + 16, y, width - 16, lineHeight);&#10;            if (GUI.Button(addRect, &quot;+ Add Child Node&quot;)) {&#10;                childrenProp.InsertArrayElementAtIndex(childrenProp.arraySize);&#10;                var newChild = childrenProp.GetArrayElementAtIndex(childrenProp.arraySize - 1);&#10;                newChild.managedReferenceValue = new ConditionLeaf();&#10;                property.serializedObject.ApplyModifiedProperties();&#10;                property.serializedObject.Update();&#10;                EditorUtility.SetDirty(property.serializedObject.targetObject);&#10;                GUI.FocusControl(null);&#10;            }&#10;            y += lineHeight;&#10;        }&#10;        EditorGUI.EndProperty();&#10;    }&#10;    public override float GetPropertyHeight(SerializedProperty property, GUIContent label) {&#10;        float height = EditorGUIUtility.singleLineHeight + 2; // header&#10;        var childrenProp = property.FindPropertyRelative(&quot;children&quot;);&#10;        if (childrenProp != null &amp;&amp; childrenProp.isArray) {&#10;            for (int i = 0; i &lt; childrenProp.arraySize; i++) {&#10;                var childProp = childrenProp.GetArrayElementAtIndex(i);&#10;                height += GetNodeHeight(childProp) + 2;&#10;            }&#10;            height += EditorGUIUtility.singleLineHeight + 2; // add button&#10;        }&#10;        return height;&#10;    }&#10;}&#10;&#10;[CustomPropertyDrawer(typeof(OrCondition))]&#10;public class OrConditionPropertyDrawer : ConditionNodePropertyDrawer {&#10;    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {&#10;        EditorGUI.BeginProperty(position, label, property);&#10;        var childrenProp = property.FindPropertyRelative(&quot;children&quot;);&#10;        float y = position.y;&#10;        float width = position.width;&#10;        float lineHeight = EditorGUIUtility.singleLineHeight + 2;&#10;        // Draw header&#10;        Rect headerRect = new Rect(position.x, y, width, lineHeight);&#10;        EditorGUI.LabelField(headerRect, &quot;OR Group&quot;, EditorStyles.boldLabel);&#10;        y += lineHeight;&#10;        // Draw each child node using the full custom node UI&#10;        if (childrenProp != null &amp;&amp; childrenProp.isArray) {&#10;            for (int i = 0; i &lt; childrenProp.arraySize; i++) {&#10;                var childProp = childrenProp.GetArrayElementAtIndex(i);&#10;                float childHeight = GetNodeHeight(childProp);&#10;                Rect childRect = new Rect(position.x + 16, y, width - 16, childHeight);&#10;                DrawNode(childRect, childProp, 1); // indent = 1 for children&#10;                y += childHeight + 2;&#10;            }&#10;            // Add button&#10;            Rect addRect = new Rect(position.x + 16, y, width - 16, lineHeight);&#10;            if (GUI.Button(addRect, &quot;+ Add Child Node&quot;)) {&#10;                childrenProp.InsertArrayElementAtIndex(childrenProp.arraySize);&#10;                var newChild = childrenProp.GetArrayElementAtIndex(childrenProp.arraySize - 1);&#10;                newChild.managedReferenceValue = new ConditionLeaf();&#10;                property.serializedObject.ApplyModifiedProperties();&#10;                property.serializedObject.Update();&#10;                EditorUtility.SetDirty(property.serializedObject.targetObject);&#10;                GUI.FocusControl(null);&#10;            }&#10;            y += lineHeight;&#10;        }&#10;        EditorGUI.EndProperty();&#10;    }&#10;    public override float GetPropertyHeight(SerializedProperty property, GUIContent label) {&#10;        float height = EditorGUIUtility.singleLineHeight + 2; // header&#10;        var childrenProp = property.FindPropertyRelative(&quot;children&quot;);&#10;        if (childrenProp != null &amp;&amp; childrenProp.isArray) {&#10;            for (int i = 0; i &lt; childrenProp.arraySize; i++) {&#10;                var childProp = childrenProp.GetArrayElementAtIndex(i);&#10;                height += GetNodeHeight(childProp) + 2;&#10;            }&#10;            height += EditorGUIUtility.singleLineHeight + 2; // add button&#10;        }&#10;        return height;&#10;    }&#10;}&#10;&#10;[CustomPropertyDrawer(typeof(NotCondition))]&#10;public class NotConditionPropertyDrawer : ConditionNodePropertyDrawer {}&#10;" />
              <option name="updatedContent" value="// All custom property drawers for node types are now handled by ConditionNodePropertyDrawer.&#10;// This file is no longer needed and can be deleted, or you can leave it empty." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Health/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Health/README.md" />
              <option name="updatedContent" value="// Health/README.md&#10;&#10;# Health System Setup Guide&#10;&#10;## Folder Structure&#10;- `Core/` – Health logic&#10;- `Interfaces/` – All interfaces&#10;- `Shield/` – Shield logic&#10;- `Invincibility/` – Invincibility logic&#10;- `Damage/` – Damage logic and conditions&#10;&#10;## How to Compose Entities in Unity Editor&#10;&#10;### Player (Basic)&#10;- Add `HealthComponent` (Core)&#10;&#10;### Player with Shield&#10;- Add `HealthComponent` (Core)&#10;- Add `ShieldComponent` (Shield)&#10;&#10;### Player with Invincibility&#10;- Add `HealthComponent` (Core)&#10;- Add `InvincibilityComponent` (Invincibility)&#10;- Connect to your `IPowerUp` system to toggle invincibility&#10;&#10;### Enemy&#10;- Add `HealthComponent` (Core)&#10;&#10;### Hazard (Standard)&#10;- Add `HazardComponent` (Damage)&#10;- Add `DamageDealerComponent` (Damage)&#10;- Add a damage condition (e.g., `AlwaysAllowDamage`, `OnlyInvincibleCanDamage`, `OnlyShieldedCanDamage`) as needed&#10;- Assign the condition(s) to the `HazardComponent`'s `damageConditions` array in the Inspector&#10;&#10;### Custom Damage Conditions&#10;- Create a new MonoBehaviour implementing `IDamageCondition`&#10;- Add it to the hazard GameObject&#10;- Assign it in the `HazardComponent`&#10;&#10;## Extending&#10;- To add new damage conditions, create a new script implementing `IDamageCondition` and add it in the Editor. No need to modify existing code.&#10;&#10;## Events&#10;- Use UnityEvents or C# events on components for custom reactions (e.g., OnDeath, OnShieldBroken)&#10;&#10;## Cleanup&#10;- Remove old scripts like `ShieldActiveDisappearHazard`, `OnlyInvincibilityDamageController`, etc. after migration.&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/LevelSelection/DI/LevelSelectionLifetimeScope.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/LevelSelection/DI/LevelSelectionLifetimeScope.cs" />
              <option name="originalContent" value="using Core;&#10;using Core.Data;&#10;using Core.Events;&#10;using Core.Services;&#10;using LevelSelection.Services;&#10;using UnityEngine;&#10;using VContainer;&#10;using VContainer.Unity;&#10;&#10;namespace LevelSelection.DI&#10;{&#10;    /// &lt;summary&gt;&#10;    ///     VContainer lifetime scope for Level Selection services&#10;    /// &lt;/summary&gt;&#10;    public class LevelSelectionLifetimeScope : LifetimeScope&#10;    {&#10;        protected override void Configure(IContainerBuilder builder)&#10;        {&#10;            Debug.Log(&quot;[LevelSelectionLifetimeScope] Configuring level selection DI container...&quot;);&#10;&#10;            // Register core services that level selection depends on&#10;            builder.Register&lt;IEventBus, EventBus&gt;(Lifetime.Singleton);&#10;            builder.Register&lt;IGameDataRepository, JsonGameDataRepository&gt;(Lifetime.Singleton);&#10;            builder.Register&lt;IGameDataService, GameDataService&gt;(Lifetime.Singleton);&#10;            builder.Register&lt;IAutoSaveService, AutoSaveService&gt;(Lifetime.Singleton);&#10;&#10;            // Register core game management components&#10;            builder.RegisterComponentInHierarchy&lt;GameFlowManager&gt;();&#10;            builder.RegisterComponentInHierarchy&lt;GameDataCoordinator&gt;();&#10;&#10;            // Register the new service-based architecture&#10;            builder.Register&lt;ILevelDiscoveryService, LevelDiscoveryService&gt;(Lifetime.Scoped);&#10;            builder.Register&lt;ILevelNavigationService, LevelNavigationService&gt;(Lifetime.Scoped);&#10;            builder.Register&lt;ILevelDisplayService, LevelDisplayService&gt;(Lifetime.Scoped);&#10;&#10;            // Register NEW focused services following SOLID principles&#10;            builder.Register&lt;ISelectorService, SelectorService&gt;(Lifetime.Scoped);&#10;            builder.Register&lt;IInputFilterService, InputFilterService&gt;(Lifetime.Scoped);&#10;            builder.Register&lt;IAudioFeedbackService, AudioFeedbackService&gt;(Lifetime.Scoped);&#10;            builder.Register&lt;IItemSelectService, ItemSelectService&gt;(Lifetime.Scoped);&#10;            builder.Register&lt;ISceneLoadService, SceneLoadService&gt;(Lifetime.Scoped);&#10;&#10;            // Register the main controller&#10;            builder.RegisterComponentInHierarchy&lt;LevelSelectionController&gt;();&#10;&#10;            // Register supporting components that are still used&#10;            builder.RegisterComponentInHierarchy&lt;ItemSelectScreen&gt;();&#10;&#10;            // Register the scene transition manager&#10;            builder.RegisterComponentInHierarchy&lt;SceneTransitionManager&gt;();&#10;&#10;            Debug.Log(&quot;[LevelSelectionLifetimeScope] Level selection DI container configured successfully.&quot;);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using Core;&#10;using Core.Data;&#10;using Core.Events;&#10;using Core.Services;&#10;using LevelSelection.Services;&#10;using UnityEngine;&#10;using VContainer;&#10;using VContainer.Unity;&#10;&#10;namespace LevelSelection.DI&#10;{&#10;    /// &lt;summary&gt;&#10;    ///     VContainer lifetime scope for Level Selection services&#10;    /// &lt;/summary&gt;&#10;    public class LevelSelectionLifetimeScope : LifetimeScope&#10;    {&#10;        protected override void Configure(IContainerBuilder builder)&#10;        {&#10;            Debug.Log(&quot;[LevelSelectionLifetimeScope] Configuring level selection DI container...&quot;);&#10;&#10;            // Register core services that level selection depends on&#10;            builder.Register&lt;IEventBus, EventBus&gt;(Lifetime.Singleton);&#10;            builder.Register&lt;IGameDataRepository, JsonGameDataRepository&gt;(Lifetime.Singleton);&#10;            builder.Register&lt;IGameDataService, GameDataService&gt;(Lifetime.Singleton);&#10;            builder.Register&lt;IAutoSaveService, AutoSaveService&gt;(Lifetime.Singleton);&#10;&#10;            // Register core game management components&#10;            builder.RegisterComponentInHierarchy&lt;GameFlowManager&gt;();&#10;            builder.RegisterComponentInHierarchy&lt;GameDataCoordinator&gt;();&#10;&#10;            // Register the new service-based architecture&#10;            builder.Register&lt;ILevelDiscoveryService, LevelDiscoveryService&gt;(Lifetime.Scoped);&#10;            builder.Register&lt;ILevelNavigationService, LevelNavigationService&gt;(Lifetime.Scoped);&#10;&#10;            // Register NEW focused services following SOLID principles&#10;            builder.Register&lt;ISelectorService, SelectorService&gt;(Lifetime.Scoped);&#10;            builder.Register&lt;IInputFilterService, InputFilterService&gt;(Lifetime.Scoped);&#10;            builder.Register&lt;IAudioFeedbackService, AudioFeedbackService&gt;(Lifetime.Scoped);&#10;            builder.Register&lt;IItemSelectService, ItemSelectService&gt;(Lifetime.Scoped);&#10;            builder.Register&lt;ISceneLoadService, SceneLoadService&gt;(Lifetime.Scoped);&#10;&#10;            // Register the main controller&#10;            builder.RegisterComponentInHierarchy&lt;LevelSelectionController&gt;();&#10;&#10;            // Register supporting components that are still used&#10;            builder.RegisterComponentInHierarchy&lt;ItemSelectScreen&gt;();&#10;&#10;            // Register the scene transition manager&#10;            builder.RegisterComponentInHierarchy&lt;SceneTransitionManager&gt;();&#10;&#10;            Debug.Log(&quot;[LevelSelectionLifetimeScope] Level selection DI container configured successfully.&quot;);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/LevelSelection/EndLevelZone.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/LevelSelection/EndLevelZone.cs" />
              <option name="originalContent" value="using System.Collections;&#10;using Core;&#10;using ModularCharacterController.Core;&#10;using UnityEngine;&#10;using VContainer;&#10;&#10;namespace LevelSelection&#10;{&#10;    /// &lt;summary&gt;&#10;    ///     Trigger zone that detects when the player completes a level.&#10;    ///     Its only responsibility is to notify the GameFlowManager.&#10;    /// &lt;/summary&gt;&#10;    [RequireComponent(typeof(Collider2D))]&#10;    public class EndLevelZone : MonoBehaviour&#10;    {&#10;        [Header(&quot;Level Completion Settings&quot;)] [SerializeField]&#10;        private string currentLevelName;&#10;&#10;        [SerializeField] private string nextLevelName;&#10;        [SerializeField] private bool autoReturnToLevelSelect = true;&#10;        [SerializeField] private float completionDelay = 2f;&#10;&#10;        [Header(&quot;Audio Feedback&quot;)] [SerializeField]&#10;        private AudioClip completionSound;&#10;&#10;        [Header(&quot;UI Feedback&quot;)] [SerializeField]&#10;        private GameObject completionUI;&#10;&#10;        [SerializeField] private float uiDisplayDuration = 3f;&#10;&#10;        private AudioSource _audioSource;&#10;        private GameFlowManager _gameFlowManager;&#10;        private bool _hasTriggered;&#10;&#10;        private void Awake()&#10;        {&#10;            // Setup audio component&#10;            _audioSource = GetComponent&lt;AudioSource&gt;();&#10;            if (_audioSource == null)&#10;            {&#10;                _audioSource = gameObject.AddComponent&lt;AudioSource&gt;();&#10;            }&#10;&#10;            // Ensure trigger is set up correctly&#10;            Collider2D col = GetComponent&lt;Collider2D&gt;();&#10;            col.isTrigger = true;&#10;&#10;            // Hide completion UI initially&#10;            if (completionUI != null)&#10;            {&#10;                completionUI.SetActive(false);&#10;            }&#10;        }&#10;&#10;        private void OnTriggerEnter2D(Collider2D other)&#10;        {&#10;            // Check if player entered&#10;            if (other.CompareTag(&quot;Player&quot;) &amp;&amp; !_hasTriggered)&#10;            {&#10;                Rigidbody2D rb = other.GetComponent&lt;Rigidbody2D&gt;();&#10;                InputHandler input = other.GetComponent&lt;InputHandler&gt;();&#10;                StartCoroutine(CompleteLevel(rb, input));&#10;            }&#10;        }&#10;&#10;        [Inject]&#10;        public void Construct(GameFlowManager gameFlowManager)&#10;        {&#10;            _gameFlowManager = gameFlowManager;&#10;        }&#10;&#10;        private IEnumerator CompleteLevel(Rigidbody2D rb, InputHandler input)&#10;        {&#10;            _hasTriggered = true;&#10;&#10;            // Take control from the player&#10;            if (input)&#10;            {&#10;                input.enabled = false; // Disable player input&#10;            }&#10;            &#10;            if (rb)&#10;            {&#10;                rb.velocity = Vector2.zero; // Reset velocity&#10;            }&#10;&#10;            // Make the player walk right&#10;            const float walkDuration = 1.3f;&#10;            float timer = 0f;&#10;            while (timer &lt; walkDuration)&#10;            {&#10;                if (rb)&#10;                {&#10;                    rb.velocity = new Vector2(2f, rb.velocity.y);&#10;                }&#10;&#10;                timer += Time.fixedDeltaTime;&#10;                yield return new WaitForFixedUpdate();&#10;            }&#10;&#10;            Debug.Log($&quot;[EndLevelZone] Player completed level: {currentLevelName}&quot;);&#10;&#10;            // Play completion sound&#10;            if (completionSound &amp;&amp; _audioSource)&#10;            {&#10;                _audioSource.PlayOneShot(completionSound);&#10;            }&#10;&#10;            // Show completion UI&#10;            if (completionUI != null)&#10;            {&#10;                completionUI.SetActive(true);&#10;                yield return new WaitForSeconds(uiDisplayDuration);&#10;                completionUI.SetActive(false);&#10;            }&#10;&#10;            // Wait for completion delay&#10;            yield return new WaitForSeconds(completionDelay);&#10;&#10;            // Notify GameFlowManager, which will handle all subsequent logic.&#10;            _gameFlowManager?.CompleteLevel(currentLevelName, nextLevelName, autoReturnToLevelSelect);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using System.Collections;&#10;using Core;&#10;using ModularCharacterController.Core;&#10;using UnityEngine;&#10;using VContainer;&#10;&#10;namespace LevelSelection&#10;{&#10;    /// &lt;summary&gt;&#10;    ///     Trigger zone that detects when the player completes a level.&#10;    ///     Its only responsibility is to notify the GameFlowManager.&#10;    /// &lt;/summary&gt;&#10;    [RequireComponent(typeof(Collider2D))]&#10;    public class EndLevelZone : MonoBehaviour&#10;    {&#10;        [Header(&quot;Level Completion Settings&quot;)] [SerializeField]&#10;        private string currentLevelName;&#10;&#10;        [SerializeField] private string nextLevelName;&#10;        [SerializeField] private bool autoReturnToLevelSelect = true;&#10;        [SerializeField] private float completionDelay = 2f;&#10;&#10;        [Header(&quot;Audio Feedback&quot;)] [SerializeField]&#10;        private AudioClip completionSound;&#10;&#10;        [Header(&quot;UI Feedback&quot;)] [SerializeField]&#10;        private GameObject completionUI;&#10;&#10;        [SerializeField] private float uiDisplayDuration = 3f;&#10;&#10;        private AudioSource _audioSource;&#10;        private GameFlowManager _gameFlowManager;&#10;        private bool _hasTriggered;&#10;&#10;        private void Awake()&#10;        {&#10;            // Setup audio component&#10;            _audioSource = GetComponent&lt;AudioSource&gt;();&#10;            if (_audioSource == null)&#10;            {&#10;                _audioSource = gameObject.AddComponent&lt;AudioSource&gt;();&#10;            }&#10;&#10;            // Ensure trigger is set up correctly&#10;            Collider2D col = GetComponent&lt;Collider2D&gt;();&#10;            col.isTrigger = true;&#10;&#10;            // Hide completion UI initially&#10;            if (completionUI != null)&#10;            {&#10;                completionUI.SetActive(false);&#10;            }&#10;        }&#10;&#10;        private void OnTriggerEnter2D(Collider2D other)&#10;        {&#10;            // Check if player entered&#10;            if (other.CompareTag(&quot;Player&quot;) &amp;&amp; !_hasTriggered)&#10;            {&#10;                Rigidbody2D rb = other.GetComponent&lt;Rigidbody2D&gt;();&#10;                InputHandler input = other.GetComponent&lt;InputHandler&gt;();&#10;                StartCoroutine(CompleteLevel(rb, input));&#10;            }&#10;        }&#10;&#10;        [Inject]&#10;        public void Construct(GameFlowManager gameFlowManager)&#10;        {&#10;            _gameFlowManager = gameFlowManager;&#10;        }&#10;&#10;        private IEnumerator CompleteLevel(Rigidbody2D rb, InputHandler input)&#10;        {&#10;            _hasTriggered = true;&#10;&#10;            // Take control from the player&#10;            if (input)&#10;            {&#10;                input.enabled = false; // Disable player input&#10;            }&#10;            &#10;            if (rb)&#10;            {&#10;                rb.velocity = Vector2.zero; // Reset velocity&#10;            }&#10;&#10;            // Make the player walk right&#10;            const float walkDuration = 1.3f;&#10;            float timer = 0f;&#10;            while (timer &lt; walkDuration)&#10;            {&#10;                if (rb)&#10;                {&#10;                    rb.velocity = new Vector2(2f, rb.velocity.y);&#10;                }&#10;&#10;                timer += Time.fixedDeltaTime;&#10;                yield return new WaitForFixedUpdate();&#10;            }&#10;&#10;            Debug.Log($&quot;[EndLevelZone] Player completed level: {currentLevelName}&quot;);&#10;&#10;            // Play completion sound&#10;            if (completionSound &amp;&amp; _audioSource)&#10;            {&#10;                _audioSource.PlayOneShot(completionSound);&#10;            }&#10;&#10;            // Show completion UI&#10;            if (completionUI != null)&#10;            {&#10;                completionUI.SetActive(true);&#10;                yield return new WaitForSeconds(uiDisplayDuration);&#10;                completionUI.SetActive(false);&#10;            }&#10;&#10;            // Wait for completion delay&#10;            yield return new WaitForSeconds(completionDelay);&#10;&#10;            // Notify GameFlowManager, which will handle all subsequent logic.&#10;            _gameFlowManager?.CompleteLevel(currentLevelName, nextLevelName, autoReturnToLevelSelect);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/LevelSelection/ItemSelectScreen.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/LevelSelection/ItemSelectScreen.cs" />
              <option name="originalContent" value="using System;&#10;using System.Collections;&#10;using Core;&#10;using UnityEngine;&#10;using UnityEngine.InputSystem;&#10;using UnityEngine.UI;&#10;using VContainer;&#10;&#10;namespace LevelSelection&#10;{&#10;    public class ItemSelectScreen : MonoBehaviour&#10;    {&#10;        [Header(&quot;UI References&quot;)] public Image itemSelectImage;&#10;&#10;        [SerializeField] private Sprite itemSelectSprite;&#10;&#10;        [Header(&quot;Display Settings&quot;)] public float displayDuration = 2f;&#10;&#10;        public bool waitForInput = true;&#10;&#10;        [Header(&quot;Audio&quot;)] public AudioClip confirmSound;&#10;&#10;        [Header(&quot;Input Actions&quot;)] [SerializeField]&#10;        private InputActionReference submitAction;&#10;&#10;        private AudioSource _audioSource;&#10;        private GameFlowManager _gameFlowManager;&#10;        private Action _onComplete;&#10;        private string _pendingLevelName;&#10;        private string _pendingSceneName;&#10;&#10;        private bool IsWaitingForInput { get; set; }&#10;&#10;        private void Awake()&#10;        {&#10;            _audioSource = GetComponent&lt;AudioSource&gt;();&#10;            if (!_audioSource)&#10;            {&#10;                _audioSource = gameObject.AddComponent&lt;AudioSource&gt;();&#10;            }&#10;&#10;            // Setup the item select sprite if available&#10;            if (itemSelectSprite &amp;&amp; itemSelectImage)&#10;            {&#10;                itemSelectImage.sprite = itemSelectSprite;&#10;            }&#10;&#10;            // Hide the image component at start&#10;            if (itemSelectImage != null)&#10;            {&#10;                itemSelectImage.enabled = false;&#10;            }&#10;&#10;            // Keep GameObject active but start with hidden image&#10;            gameObject.SetActive(true);&#10;&#10;            Debug.Log(&quot;[ItemSelectScreen] Initialized with hidden image&quot;);&#10;        }&#10;&#10;        private void OnEnable()&#10;        {&#10;            if (submitAction)&#10;            {&#10;                submitAction.action.Enable();&#10;                submitAction.action.performed += OnConfirmInput;&#10;            }&#10;        }&#10;&#10;        private void OnDisable()&#10;        {&#10;            if (submitAction)&#10;            {&#10;                submitAction.action.performed -= OnConfirmInput;&#10;                submitAction.action.Disable();&#10;            }&#10;        }&#10;&#10;&#10;&#10;        [Inject]&#10;        public void Construct(GameFlowManager gameFlowManager)&#10;        {&#10;            _gameFlowManager = gameFlowManager;&#10;        }&#10;&#10;        public void ShowItemSelect(string levelName, string sceneName, Action onComplete = null)&#10;        {&#10;            _pendingLevelName = levelName;&#10;            _pendingSceneName = sceneName;&#10;            _onComplete = onComplete;&#10;&#10;            // Show the item select image&#10;            if (itemSelectImage != null)&#10;            {&#10;                itemSelectImage.enabled = true;&#10;            }&#10;&#10;            Debug.Log($&quot;[ItemSelectScreen] Showing item select for level: {levelName}&quot;);&#10;&#10;            if (waitForInput)&#10;            {&#10;                IsWaitingForInput = true;&#10;            }&#10;            else&#10;            {&#10;                StartCoroutine(AutoProgressAfterDelay());&#10;            }&#10;        }&#10;&#10;        private IEnumerator AutoProgressAfterDelay()&#10;        {&#10;            yield return new WaitForSeconds(displayDuration);&#10;            ConfirmAndProceed();&#10;        }&#10;&#10;        private void OnConfirmInput(InputAction.CallbackContext context)&#10;        {&#10;            if (IsWaitingForInput)&#10;            {&#10;                ConfirmAndProceed();&#10;            }&#10;        }&#10;&#10;        private void ConfirmAndProceed()&#10;        {&#10;            // Use config sound first, then fallback to assigned sound&#10;            AudioClip soundToPlay = _config?.selectionSound ?? confirmSound;&#10;&#10;            if (_audioSource &amp;&amp; soundToPlay)&#10;            {&#10;                _audioSource.PlayOneShot(soundToPlay);&#10;            }&#10;&#10;            CompleteSelection();&#10;        }&#10;&#10;        private void CompleteSelection()&#10;        {&#10;            Debug.Log($&quot;[ItemSelectScreen] Completing selection for level: {_pendingLevelName}&quot;);&#10;&#10;            IsWaitingForInput = false;&#10;&#10;            // Hide the image component&#10;            if (itemSelectImage != null)&#10;            {&#10;                itemSelectImage.enabled = false;&#10;            }&#10;&#10;            // Request level load through GameFlowManager instead of publishing directly&#10;            _gameFlowManager?.RequestLevelLoad(_pendingLevelName, _pendingSceneName);&#10;&#10;            _onComplete?.Invoke();&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using System;&#10;using System.Collections;&#10;using Core;&#10;using UnityEngine;&#10;using UnityEngine.InputSystem;&#10;using UnityEngine.UI;&#10;using VContainer;&#10;&#10;namespace LevelSelection&#10;{&#10;    public class ItemSelectScreen : MonoBehaviour&#10;    {&#10;        [Header(&quot;UI References&quot;)] public Image itemSelectImage;&#10;&#10;        [SerializeField] private Sprite itemSelectSprite;&#10;&#10;        [Header(&quot;Display Settings&quot;)] public float displayDuration = 2f;&#10;&#10;        public bool waitForInput = true;&#10;&#10;        [Header(&quot;Audio&quot;)] public AudioClip confirmSound;&#10;&#10;        [Header(&quot;Input Actions&quot;)] [SerializeField]&#10;        private InputActionReference submitAction;&#10;&#10;        private AudioSource _audioSource;&#10;        private GameFlowManager _gameFlowManager;&#10;        private Action _onComplete;&#10;        private string _pendingLevelName;&#10;        private string _pendingSceneName;&#10;&#10;        private bool IsWaitingForInput { get; set; }&#10;&#10;        private void Awake()&#10;        {&#10;            _audioSource = GetComponent&lt;AudioSource&gt;();&#10;            if (!_audioSource)&#10;            {&#10;                _audioSource = gameObject.AddComponent&lt;AudioSource&gt;();&#10;            }&#10;&#10;            // Setup the item select sprite if available&#10;            if (itemSelectSprite &amp;&amp; itemSelectImage)&#10;            {&#10;                itemSelectImage.sprite = itemSelectSprite;&#10;            }&#10;&#10;            // Hide the image component at start&#10;            if (itemSelectImage != null)&#10;            {&#10;                itemSelectImage.enabled = false;&#10;            }&#10;&#10;            // Keep GameObject active but start with hidden image&#10;            gameObject.SetActive(true);&#10;&#10;            Debug.Log(&quot;[ItemSelectScreen] Initialized with hidden image&quot;);&#10;        }&#10;&#10;        private void OnEnable()&#10;        {&#10;            if (submitAction)&#10;            {&#10;                submitAction.action.Enable();&#10;                submitAction.action.performed += OnConfirmInput;&#10;            }&#10;        }&#10;&#10;        private void OnDisable()&#10;        {&#10;            if (submitAction)&#10;            {&#10;                submitAction.action.performed -= OnConfirmInput;&#10;                submitAction.action.Disable();&#10;            }&#10;        }&#10;&#10;&#10;&#10;        [Inject]&#10;        public void Construct(GameFlowManager gameFlowManager)&#10;        {&#10;            _gameFlowManager = gameFlowManager;&#10;        }&#10;&#10;        public void ShowItemSelect(string levelName, string sceneName, Action onComplete = null)&#10;        {&#10;            _pendingLevelName = levelName;&#10;            _pendingSceneName = sceneName;&#10;            _onComplete = onComplete;&#10;&#10;            // Show the item select image&#10;            if (itemSelectImage != null)&#10;            {&#10;                itemSelectImage.enabled = true;&#10;            }&#10;&#10;            Debug.Log($&quot;[ItemSelectScreen] Showing item select for level: {levelName}&quot;);&#10;&#10;            if (waitForInput)&#10;            {&#10;                IsWaitingForInput = true;&#10;            }&#10;            else&#10;            {&#10;                StartCoroutine(AutoProgressAfterDelay());&#10;            }&#10;        }&#10;&#10;        private IEnumerator AutoProgressAfterDelay()&#10;        {&#10;            yield return new WaitForSeconds(displayDuration);&#10;            ConfirmAndProceed();&#10;        }&#10;&#10;        private void OnConfirmInput(InputAction.CallbackContext context)&#10;        {&#10;            if (IsWaitingForInput)&#10;            {&#10;                ConfirmAndProceed();&#10;            }&#10;        }&#10;&#10;        private void ConfirmAndProceed()&#10;        {&#10;            if (_audioSource &amp;&amp; confirmSound)&#10;            {&#10;                _audioSource.PlayOneShot(confirmSound);&#10;            }&#10;&#10;            CompleteSelection();&#10;        }&#10;&#10;        private void CompleteSelection()&#10;        {&#10;            Debug.Log($&quot;[ItemSelectScreen] Completing selection for level: {_pendingLevelName}&quot;);&#10;&#10;            IsWaitingForInput = false;&#10;&#10;            // Hide the image component&#10;            if (itemSelectImage != null)&#10;            {&#10;                itemSelectImage.enabled = false;&#10;            }&#10;&#10;            // Request level load through GameFlowManager instead of publishing directly&#10;            _gameFlowManager?.RequestLevelLoad(_pendingLevelName, _pendingSceneName);&#10;&#10;            _onComplete?.Invoke();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/LevelSelection/LevelSelectionController.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/LevelSelection/LevelSelectionController.cs" />
              <option name="originalContent" value="using System.Linq;&#10;using System.Threading.Tasks;&#10;using Core;&#10;using Core.Data;&#10;using Core.Events;&#10;using LevelSelection.Services;&#10;using UnityEngine;&#10;using UnityEngine.InputSystem;&#10;using VContainer;&#10;&#10;namespace LevelSelection&#10;{&#10;    public class LevelSelectionController : MonoBehaviour&#10;    {&#10;        [Header(&quot;Configuration&quot;)]&#10;        [SerializeField] private bool autoActivateOnStart = true;&#10;&#10;        [Header(&quot;UI Components&quot;)]&#10;        [SerializeField] private GameObject selectorObject;&#10;        [SerializeField] private ItemSelectScreen itemSelectScreen;&#10;&#10;        [Header(&quot;Input Actions&quot;)]&#10;        [SerializeField] private InputActionReference navigateAction;&#10;        [SerializeField] private InputActionReference submitAction;&#10;&#10;        private IAudioFeedbackService _audioFeedbackService;&#10;        private ILevelNavigationService _navigationService;&#10;        private IEventBus _eventBus;&#10;        private IInputFilterService _inputFilterService;&#10;        private IItemSelectService _itemSelectService;&#10;        private ISceneLoadService _sceneLoadService;&#10;        private GameFlowManager _gameFlowManager;&#10;        private IGameDataService _gameDataService;&#10;        private ISelectorService _selectorService;&#10;&#10;        public bool IsActive { get; private set; }&#10;&#10;        private async void Start()&#10;        {&#10;            await InitializeAsync();&#10;&#10;            if (autoActivateOnStart)&#10;            {&#10;                Activate();&#10;            }&#10;        }&#10;&#10;        private void Update()&#10;        {&#10;            _selectorService?.Update();&#10;        }&#10;&#10;        private void OnEnable()&#10;        {&#10;            if (navigateAction != null)&#10;            {&#10;                navigateAction.action.Enable();&#10;                navigateAction.action.performed += OnNavigate;&#10;            }&#10;&#10;            if (submitAction != null)&#10;            {&#10;                submitAction.action.Enable();&#10;                submitAction.action.performed += OnSubmit;&#10;            }&#10;        }&#10;&#10;        private void OnDisable()&#10;        {&#10;            if (navigateAction != null)&#10;            {&#10;                navigateAction.action.performed -= OnNavigate;&#10;                navigateAction.action.Disable();&#10;            }&#10;&#10;            if (submitAction != null)&#10;            {&#10;                submitAction.action.performed -= OnSubmit;&#10;                submitAction.action.Disable();&#10;            }&#10;        }&#10;&#10;        private void OnDestroy()&#10;        {&#10;            _eventBus?.Unsubscribe&lt;LevelNavigationEvent&gt;(OnLevelNavigation);&#10;            _eventBus?.Unsubscribe&lt;LevelSelectedEvent&gt;(OnLevelSelected);&#10;            _eventBus?.Unsubscribe&lt;LevelLoadRequestedEvent&gt;(OnLevelLoadRequested);&#10;        }&#10;&#10;        [Inject]&#10;        public void Construct(&#10;            ILevelNavigationService navigationService,&#10;            IEventBus eventBus,&#10;            ISelectorService selectorService,&#10;            IInputFilterService inputFilterService,&#10;            IAudioFeedbackService audioFeedbackService,&#10;            IItemSelectService itemSelectService,&#10;            ISceneLoadService sceneLoadService,&#10;            GameFlowManager gameFlowManager,&#10;            IGameDataService gameDataService)&#10;        {&#10;            _navigationService = navigationService;&#10;            _eventBus = eventBus;&#10;            _selectorService = selectorService;&#10;            _inputFilterService = inputFilterService;&#10;            _audioFeedbackService = audioFeedbackService;&#10;            _itemSelectService = itemSelectService;&#10;            _sceneLoadService = sceneLoadService;&#10;            _gameFlowManager = gameFlowManager;&#10;            _gameDataService = gameDataService;&#10;&#10;            SubscribeToEvents();&#10;        }&#10;&#10;        private async Task InitializeAsync()&#10;        {&#10;            InitializeServices();&#10;&#10;            if (_gameFlowManager != null)&#10;            {&#10;                _gameFlowManager.PauseGame();&#10;            }&#10;&#10;            var levelData = await _gameDataService.DiscoverLevelsAsync();&#10;            await _navigationService.InitializeAsync(levelData);&#10;&#10;            // Configure navigation service with grid width (hardcoded since config removed)&#10;            _navigationService.SetGridWidth(4); // Default grid width&#10;        }&#10;&#10;        private void InitializeServices()&#10;        {&#10;            AudioSource audioSource = GetComponent&lt;AudioSource&gt;();&#10;            if (audioSource == null)&#10;            {&#10;                audioSource = gameObject.AddComponent&lt;AudioSource&gt;();&#10;            }&#10;&#10;            _selectorService.Initialize(selectorObject);&#10;            _inputFilterService.Initialize();&#10;            _audioFeedbackService.Initialize(audioSource);&#10;            _itemSelectService.Initialize(itemSelectScreen, _sceneLoadService);&#10;&#10;            _itemSelectService.OnStateChanged += OnItemSelectStateChanged;&#10;        }&#10;&#10;        private void OnItemSelectStateChanged(bool isActive)&#10;        {&#10;            _selectorService.SetVisible(!isActive);&#10;            _inputFilterService.SetEnabled(!isActive);&#10;        }&#10;&#10;        private void OnNavigate(InputAction.CallbackContext context)&#10;        {&#10;            if (!IsActive || _itemSelectService.IsActive) return;&#10;&#10;            Vector2 direction = context.ReadValue&lt;Vector2&gt;();&#10;&#10;            if (_inputFilterService.ProcessNavigationInput(direction, out Vector2 filteredDirection))&#10;            {&#10;                _navigationService.NavigateInDirection(filteredDirection);&#10;            }&#10;        }&#10;&#10;        private void OnSubmit(InputAction.CallbackContext context)&#10;        {&#10;            if (!IsActive || _itemSelectService.IsActive) return;&#10;&#10;            _navigationService.SelectCurrentLevel();&#10;        }&#10;&#10;        private void SubscribeToEvents()&#10;        {&#10;            _eventBus?.Subscribe&lt;LevelNavigationEvent&gt;(OnLevelNavigation);&#10;            _eventBus?.Subscribe&lt;LevelSelectedEvent&gt;(OnLevelSelected);&#10;            _eventBus?.Subscribe&lt;LevelLoadRequestedEvent&gt;(OnLevelLoadRequested);&#10;        }&#10;&#10;        private void OnLevelNavigation(LevelNavigationEvent navigationEvent)&#10;        {&#10;            _audioFeedbackService.PlayNavigationSound();&#10;            _selectorService.MoveToCurrentLevel(_navigationService);&#10;        }&#10;&#10;        private void OnLevelSelected(LevelSelectedEvent selectionEvent)&#10;        {&#10;            LevelData levelData = _navigationService.CurrentLevel;&#10;            if (levelData != null &amp;&amp; !levelData.isUnlocked)&#10;            {&#10;                _audioFeedbackService.PlayLockedSound();&#10;                return;&#10;            }&#10;&#10;            _audioFeedbackService.PlaySelectionSound();&#10;&#10;            string sceneName = _sceneLoadService.GetSceneNameForLevel(levelData);&#10;            _itemSelectService.ShowItemSelect(selectionEvent.LevelName, sceneName);&#10;        }&#10;&#10;        private void OnLevelLoadRequested(LevelLoadRequestedEvent loadEvent)&#10;        {&#10;            if (_gameDataService != null)&#10;            {&#10;                _gameDataService.UpdateCurrentLevel(loadEvent.LevelName);&#10;            }&#10;&#10;            if (_gameFlowManager != null)&#10;            {&#10;                _gameFlowManager.ResumeGame();&#10;            }&#10;&#10;            _sceneLoadService.LoadLevel(loadEvent.SceneName);&#10;        }&#10;&#10;        public void Activate()&#10;        {&#10;            IsActive = true;&#10;            _navigationService?.Activate();&#10;&#10;            if (_navigationService?.CurrentIndex &gt;= 0)&#10;            {&#10;                _selectorService?.MoveToCurrentLevel(_navigationService);&#10;            }&#10;        }&#10;&#10;        public void Deactivate()&#10;        {&#10;            IsActive = false;&#10;            _navigationService?.Deactivate();&#10;        }&#10;&#10;        public void SetCurrentLevel(int levelIndex)&#10;        {&#10;            _navigationService?.SetCurrentIndex(levelIndex);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using System.Linq;&#10;using System.Threading.Tasks;&#10;using Core;&#10;using Core.Data;&#10;using Core.Events;&#10;using LevelSelection.Services;&#10;using UnityEngine;&#10;using UnityEngine.InputSystem;&#10;using VContainer;&#10;&#10;namespace LevelSelection&#10;{&#10;    public class LevelSelectionController : MonoBehaviour&#10;    {&#10;        [Header(&quot;Configuration&quot;)]&#10;        [SerializeField] private bool autoActivateOnStart = true;&#10;&#10;        [Header(&quot;UI Components&quot;)]&#10;        [SerializeField] private GameObject selectorObject;&#10;        [SerializeField] private ItemSelectScreen itemSelectScreen;&#10;&#10;        [Header(&quot;Input Actions&quot;)]&#10;        [SerializeField] private InputActionReference navigateAction;&#10;        [SerializeField] private InputActionReference submitAction;&#10;&#10;        private IAudioFeedbackService _audioFeedbackService;&#10;        private ILevelNavigationService _navigationService;&#10;        private IEventBus _eventBus;&#10;        private IInputFilterService _inputFilterService;&#10;        private IItemSelectService _itemSelectService;&#10;        private ISceneLoadService _sceneLoadService;&#10;        private GameFlowManager _gameFlowManager;&#10;        private GameDataCoordinator _gameDataCoordinator;&#10;        private ISelectorService _selectorService;&#10;&#10;        public bool IsActive { get; private set; }&#10;&#10;        private async void Start()&#10;        {&#10;            await InitializeAsync();&#10;&#10;            if (autoActivateOnStart)&#10;            {&#10;                Activate();&#10;            }&#10;        }&#10;&#10;        private void Update()&#10;        {&#10;            _selectorService?.Update();&#10;        }&#10;&#10;        private void OnEnable()&#10;        {&#10;            if (navigateAction != null)&#10;            {&#10;                navigateAction.action.Enable();&#10;                navigateAction.action.performed += OnNavigate;&#10;            }&#10;&#10;            if (submitAction != null)&#10;            {&#10;                submitAction.action.Enable();&#10;                submitAction.action.performed += OnSubmit;&#10;            }&#10;        }&#10;&#10;        private void OnDisable()&#10;        {&#10;            if (navigateAction != null)&#10;            {&#10;                navigateAction.action.performed -= OnNavigate;&#10;                navigateAction.action.Disable();&#10;            }&#10;&#10;            if (submitAction != null)&#10;            {&#10;                submitAction.action.performed -= OnSubmit;&#10;                submitAction.action.Disable();&#10;            }&#10;        }&#10;&#10;        private void OnDestroy()&#10;        {&#10;            _eventBus?.Unsubscribe&lt;LevelNavigationEvent&gt;(OnLevelNavigation);&#10;            _eventBus?.Unsubscribe&lt;LevelSelectedEvent&gt;(OnLevelSelected);&#10;            _eventBus?.Unsubscribe&lt;LevelLoadRequestedEvent&gt;(OnLevelLoadRequested);&#10;        }&#10;&#10;        [Inject]&#10;        public void Construct(&#10;            ILevelNavigationService navigationService,&#10;            IEventBus eventBus,&#10;            ISelectorService selectorService,&#10;            IInputFilterService inputFilterService,&#10;            IAudioFeedbackService audioFeedbackService,&#10;            IItemSelectService itemSelectService,&#10;            ISceneLoadService sceneLoadService,&#10;            GameFlowManager gameFlowManager,&#10;            GameDataCoordinator gameDataCoordinator)&#10;        {&#10;            _navigationService = navigationService;&#10;            _eventBus = eventBus;&#10;            _selectorService = selectorService;&#10;            _inputFilterService = inputFilterService;&#10;            _audioFeedbackService = audioFeedbackService;&#10;            _itemSelectService = itemSelectService;&#10;            _sceneLoadService = sceneLoadService;&#10;            _gameFlowManager = gameFlowManager;&#10;            _gameDataCoordinator = gameDataCoordinator;&#10;&#10;            SubscribeToEvents();&#10;        }&#10;&#10;        private async Task InitializeAsync()&#10;        {&#10;            InitializeServices();&#10;&#10;            if (_gameFlowManager != null)&#10;            {&#10;                _gameFlowManager.PauseGame();&#10;            }&#10;&#10;            var levelData = await _gameDataCoordinator.DiscoverLevelsAsync();&#10;            await _navigationService.InitializeAsync(levelData);&#10;&#10;            // Configure navigation service with grid width (hardcoded since config removed)&#10;            _navigationService.SetGridWidth(4); // Default grid width&#10;        }&#10;&#10;        private void InitializeServices()&#10;        {&#10;            AudioSource audioSource = GetComponent&lt;AudioSource&gt;();&#10;            if (audioSource == null)&#10;            {&#10;                audioSource = gameObject.AddComponent&lt;AudioSource&gt;();&#10;            }&#10;&#10;            _selectorService.Initialize(selectorObject);&#10;            _inputFilterService.Initialize();&#10;            _audioFeedbackService.Initialize(audioSource);&#10;            _itemSelectService.Initialize(itemSelectScreen, _sceneLoadService);&#10;&#10;            _itemSelectService.OnStateChanged += OnItemSelectStateChanged;&#10;        }&#10;&#10;        private void OnItemSelectStateChanged(bool isActive)&#10;        {&#10;            _selectorService.SetVisible(!isActive);&#10;            _inputFilterService.SetEnabled(!isActive);&#10;        }&#10;&#10;        private void OnNavigate(InputAction.CallbackContext context)&#10;        {&#10;            if (!IsActive || _itemSelectService.IsActive) return;&#10;&#10;            Vector2 direction = context.ReadValue&lt;Vector2&gt;();&#10;&#10;            if (_inputFilterService.ProcessNavigationInput(direction, out Vector2 filteredDirection))&#10;            {&#10;                _navigationService.NavigateInDirection(filteredDirection);&#10;            }&#10;        }&#10;&#10;        private void OnSubmit(InputAction.CallbackContext context)&#10;        {&#10;            if (!IsActive || _itemSelectService.IsActive) return;&#10;&#10;            _navigationService.SelectCurrentLevel();&#10;        }&#10;&#10;        private void SubscribeToEvents()&#10;        {&#10;            _eventBus?.Subscribe&lt;LevelNavigationEvent&gt;(OnLevelNavigation);&#10;            _eventBus?.Subscribe&lt;LevelSelectedEvent&gt;(OnLevelSelected);&#10;            _eventBus?.Subscribe&lt;LevelLoadRequestedEvent&gt;(OnLevelLoadRequested);&#10;        }&#10;&#10;        private void OnLevelNavigation(LevelNavigationEvent navigationEvent)&#10;        {&#10;            _audioFeedbackService.PlayNavigationSound();&#10;            _selectorService.MoveToCurrentLevel(_navigationService);&#10;        }&#10;&#10;        private void OnLevelSelected(LevelSelectedEvent selectionEvent)&#10;        {&#10;            LevelData levelData = _navigationService.CurrentLevel;&#10;            if (levelData != null &amp;&amp; !levelData.isUnlocked)&#10;            {&#10;                _audioFeedbackService.PlayLockedSound();&#10;                return;&#10;            }&#10;&#10;            _audioFeedbackService.PlaySelectionSound();&#10;&#10;            string sceneName = _sceneLoadService.GetSceneNameForLevel(levelData);&#10;            _itemSelectService.ShowItemSelect(selectionEvent.LevelName, sceneName);&#10;        }&#10;&#10;        private void OnLevelLoadRequested(LevelLoadRequestedEvent loadEvent)&#10;        {&#10;            _gameDataCoordinator?.UpdateCurrentLevel(loadEvent.LevelName);&#10;&#10;            if (_gameFlowManager != null)&#10;            {&#10;                _gameFlowManager.ResumeGame();&#10;            }&#10;&#10;            _sceneLoadService.LoadLevel(loadEvent.SceneName);&#10;        }&#10;&#10;        public void Activate()&#10;        {&#10;            IsActive = true;&#10;            _navigationService?.Activate();&#10;&#10;            if (_navigationService?.CurrentIndex &gt;= 0)&#10;            {&#10;                _selectorService?.MoveToCurrentLevel(_navigationService);&#10;            }&#10;        }&#10;&#10;        public void Deactivate()&#10;        {&#10;            IsActive = false;&#10;            _navigationService?.Deactivate();&#10;        }&#10;&#10;        public void SetCurrentLevel(int levelIndex)&#10;        {&#10;            _navigationService?.SetCurrentIndex(levelIndex);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/LevelSelection/LevelSelectionDirector.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/LevelSelection/LevelSelectionDirector.cs" />
              <option name="originalContent" value="using System.Collections.Generic;&#10;using UnityEngine;&#10;&#10;namespace LevelSelection&#10;{&#10;    /// &lt;summary&gt;&#10;    /// Director pattern implementation for building level data structures&#10;    /// &lt;/summary&gt;&#10;    public class LevelSelectionDirector&#10;    {&#10;        public List&lt;LevelData&gt; BuildLevelData(List&lt;GameObject&gt; levelGameObjects)&#10;        {&#10;            var levelDataList = new List&lt;LevelData&gt;();&#10;            &#10;            for (int i = 0; i &lt; levelGameObjects.Count; i++)&#10;            {&#10;                var levelObject = levelGameObjects[i];&#10;                if (levelObject == null) continue;&#10;&#10;                var levelData = LevelDataFactory.CreateFromGameObject(levelObject, i);&#10;                if (levelData != null)&#10;                {&#10;                    levelDataList.Add(levelData);&#10;                }&#10;                else&#10;                {&#10;                    // Fallback - create basic level data from GameObject name&#10;                    var fallbackData = LevelDataFactory.CreateDefault(&#10;                        levelObject.name,&#10;                        levelObject.name,&#10;                        levelObject.transform.position,&#10;                        i&#10;                    );&#10;                    levelDataList.Add(fallbackData);&#10;                }&#10;            }&#10;            &#10;            return levelDataList;&#10;        }&#10;&#10;        public LevelData BuildSingleLevel(GameObject levelObject, int index)&#10;        {&#10;            if (levelObject == null) return null;&#10;            &#10;            return LevelDataFactory.CreateFromGameObject(levelObject, index) ??&#10;                   LevelDataFactory.CreateDefault(levelObject.name, levelObject.name, levelObject.transform.position, index);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using System.Collections.Generic;&#10;using UnityEngine;&#10;&#10;namespace LevelSelection&#10;{&#10;    /// &lt;summary&gt;&#10;    /// Director pattern implementation for building level data structures&#10;    /// &lt;/summary&gt;&#10;    public class LevelSelectionDirector&#10;    {&#10;        public List&lt;LevelData&gt; BuildLevelData(List&lt;GameObject&gt; levelGameObjects)&#10;        {&#10;            var levelDataList = new List&lt;LevelData&gt;();&#10;            &#10;            for (int i = 0; i &lt; levelGameObjects.Count; i++)&#10;            {&#10;                var levelObject = levelGameObjects[i];&#10;                if (levelObject == null) continue;&#10;&#10;                // Try to create from LevelPoint component first&#10;                var levelData = LevelDataFactory.CreateFromGameObject(levelObject, i);&#10;                &#10;                if (levelData == null)&#10;                {&#10;                    // Fallback - create from transform position and object name&#10;                    Debug.Log($&quot;Creating level data from transform for {levelObject.name} at position {levelObject.transform.position}&quot;);&#10;                    levelData = LevelDataFactory.CreateFromTransform(levelObject, i);&#10;                }&#10;                &#10;                if (levelData != null)&#10;                {&#10;                    Debug.Log($&quot;Level {i}: {levelData.levelName} at position {levelData.mapPosition}&quot;);&#10;                    levelDataList.Add(levelData);&#10;                }&#10;            }&#10;            &#10;            return levelDataList;&#10;        }&#10;&#10;        public LevelData BuildSingleLevel(GameObject levelObject, int index)&#10;        {&#10;            if (levelObject == null) return null;&#10;            &#10;            // Try LevelPoint component first, fallback to transform-based creation&#10;            return LevelDataFactory.CreateFromGameObject(levelObject, index) ??&#10;                   LevelDataFactory.CreateFromTransform(levelObject, index);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/LevelSelection/LevelSelectionManager.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/LevelSelection/LevelSelectionManager.cs" />
              <option name="originalContent" value="using System.Collections.Generic;&#10;using System.Linq;&#10;using Core.Data;&#10;using Core.Events;&#10;using UnityEngine;&#10;using UnityEngine.InputSystem;&#10;using UnityEngine.SceneManagement;&#10;using VContainer;&#10;&#10;namespace LevelSelection&#10;{&#10;    public class LevelSelectionManager : MonoBehaviour&#10;    {&#10;        [Header(&quot;Level Configuration&quot;)]&#10;        [SerializeField] private bool autoDiscoverLevels = true;&#10;        [SerializeField] private bool autoActivateOnStart = true; &#10;        [SerializeField] private string levelTagFilter = &quot;&quot;; &#10;        public List&lt;GameObject&gt; levelGameObjects = new();&#10;        public Transform levelContainer;&#10;&#10;        [Header(&quot;Components&quot;)] public LevelSelector levelSelector;&#10;&#10;        public ItemSelectScreen itemSelectScreen;&#10;        public NESCrossfade crossfade;&#10;&#10;        [Header(&quot;Input Actions&quot;)]&#10;        [SerializeField] private InputActionReference navigateAction;&#10;        [SerializeField] private InputActionReference submitAction;&#10;&#10;        private List&lt;LevelData&gt; _levelData;&#10;        private List&lt;LevelPoint&gt; _levelPoints;&#10;        private IEventBus _eventBus;&#10;        private IGameDataService _gameDataService;&#10;        private bool _isActive = false;&#10;        private LevelSelectionDirector _director;&#10;&#10;        public bool IsActive&#10;        {&#10;            get =&gt; _isActive;&#10;            private set =&gt; _isActive = value;&#10;        }&#10;&#10;        private void Awake()&#10;        {&#10;            _director = new LevelSelectionDirector();&#10;            InitializeLevelSelection();&#10;        }&#10;&#10;        private void OnEnable()&#10;        {&#10;            if (navigateAction != null)&#10;            {&#10;                navigateAction.action.Enable();&#10;                navigateAction.action.performed += OnNavigate;&#10;            }&#10;&#10;            if (submitAction != null)&#10;            {&#10;                submitAction.action.Enable();&#10;                submitAction.action.performed += OnConfirm;&#10;            }&#10;        }&#10;&#10;        private void OnDisable()&#10;        {&#10;            if (navigateAction != null)&#10;            {&#10;                navigateAction.action.performed -= OnNavigate;&#10;                navigateAction.action.Disable();&#10;            }&#10;&#10;            if (submitAction != null)&#10;            {&#10;                submitAction.action.performed -= OnConfirm;&#10;                submitAction.action.Disable();&#10;            }&#10;        }&#10;&#10;        private void OnDestroy()&#10;        {&#10;            _eventBus?.Unsubscribe&lt;LevelSelectedEvent&gt;(OnLevelSelected);&#10;            _eventBus?.Unsubscribe&lt;LevelLoadRequestedEvent&gt;(OnLevelLoadRequested);&#10;            _eventBus?.Unsubscribe&lt;LevelCompletedEvent&gt;(OnLevelCompleted);&#10;        }&#10;&#10;        [Inject]&#10;        public void Construct(IEventBus eventBus, IGameDataService gameDataService)&#10;        {&#10;            _eventBus = eventBus;&#10;            _gameDataService = gameDataService;&#10;&#10;            SubscribeToEvents();&#10;        }&#10;&#10;        private void SubscribeToEvents()&#10;        {&#10;            _eventBus?.Subscribe&lt;LevelSelectedEvent&gt;(OnLevelSelected);&#10;            _eventBus?.Subscribe&lt;LevelLoadRequestedEvent&gt;(OnLevelLoadRequested);&#10;            _eventBus?.Subscribe&lt;LevelCompletedEvent&gt;(OnLevelCompleted);&#10;        }&#10;&#10;        private void InitializeLevelSelection()&#10;        {&#10;            // Auto-discover level objects&#10;            if (autoDiscoverLevels)&#10;            {&#10;                AutoDiscoverLevelObjects();&#10;            }&#10;            // Manual discovery from container (fallback)&#10;            else if (levelContainer != null &amp;&amp; levelGameObjects.Count == 0)&#10;            {&#10;                for (int i = 0; i &lt; levelContainer.childCount; i++)&#10;                {&#10;                    Transform child = levelContainer.GetChild(i);&#10;                    if (child.GetComponent&lt;LevelPoint&gt;() != null)&#10;                    {&#10;                        levelGameObjects.Add(child.gameObject);&#10;                    }&#10;                }&#10;            }&#10;&#10;            Debug.Log($&quot;[LevelSelectionManager] Found {levelGameObjects.Count} level objects&quot;);&#10;&#10;            // Use director pattern to build level data&#10;            _levelData = _director.BuildLevelData(levelGameObjects);&#10;            _levelPoints = levelGameObjects.Select(go =&gt; go.GetComponent&lt;LevelPoint&gt;()).ToList();&#10;&#10;            LoadLevelProgressFromGameData();&#10;&#10;            GameData gameData = _gameDataService?.CurrentData;&#10;            int selectedIndex = gameData?.selectedLevelIndex ?? 0;&#10;&#10;            levelSelector?.Initialize(_levelData, _levelPoints, selectedIndex);&#10;&#10;            // Auto-activate level selection on start if enabled&#10;            if (autoActivateOnStart)&#10;            {&#10;                ActivateLevelSelection();&#10;            }&#10;        }&#10;&#10;        private void AutoDiscoverLevelObjects()&#10;        {&#10;            levelGameObjects.Clear();&#10;&#10;            // Find all GameObjects with LevelPoint components in the scene&#10;            LevelPoint[] allLevelPoints = FindObjectsByType&lt;LevelPoint&gt;(FindObjectsSortMode.None);&#10;&#10;            Debug.Log($&quot;[LevelSelectionManager] Auto-discovered {allLevelPoints.Length} LevelPoint components&quot;);&#10;&#10;            foreach (LevelPoint levelPoint in allLevelPoints)&#10;            {&#10;                // Optional tag filtering&#10;                if (!string.IsNullOrEmpty(levelTagFilter) &amp;&amp; !levelPoint.CompareTag(levelTagFilter))&#10;                {&#10;                    continue;&#10;                }&#10;&#10;                levelGameObjects.Add(levelPoint.gameObject);&#10;            }&#10;&#10;            // Sort by name or position for consistent ordering&#10;            levelGameObjects.Sort((a, b) =&gt; string.Compare(a.name, b.name, System.StringComparison.Ordinal));&#10;&#10;            Debug.Log($&quot;[LevelSelectionManager] After filtering and sorting: {levelGameObjects.Count} level objects&quot;);&#10;        }&#10;&#10;        private void LoadLevelProgressFromGameData()&#10;        {&#10;            GameData gameData = _gameDataService?.CurrentData;&#10;            if (gameData == null) return;&#10;&#10;            // Update unlock status based on game data&#10;            for (int i = 0; i &lt; _levelData.Count; i++)&#10;            {&#10;                LevelData level = _levelData[i];&#10;                level.isUnlocked = gameData.unlockedLevels.Contains(level.levelName);&#10;&#10;                if (gameData.levelCompleted.TryGetValue(level.levelName, out bool completed))&#10;                {&#10;                    level.isCompleted = completed;&#10;                }&#10;&#10;                if (gameData.levelBestTimes.TryGetValue(level.levelName, out float bestTime))&#10;                {&#10;                    level.bestTime = bestTime;&#10;                }&#10;            }&#10;        }&#10;&#10;        private void OnNavigate(InputAction.CallbackContext context)&#10;        {&#10;            if (!IsActive || levelSelector == null)&#10;            {&#10;                Debug.Log($&quot;[LevelSelectionManager] Navigate blocked - IsActive: {IsActive}, levelSelector: {levelSelector != null}&quot;);&#10;                return;&#10;            }&#10;&#10;            Vector2 direction = context.ReadValue&lt;Vector2&gt;();&#10;            Debug.Log($&quot;[LevelSelectionManager] Navigate input received: {direction}&quot;);&#10;&#10;            levelSelector.Navigate(direction);&#10;            SaveSelectedLevel();&#10;        }&#10;&#10;        private void OnConfirm(InputAction.CallbackContext context)&#10;        {&#10;            if (!IsActive || levelSelector == null) return;&#10;&#10;            levelSelector.SelectCurrentLevel();&#10;        }&#10;&#10;        private void SaveSelectedLevel()&#10;        {&#10;            GameData gameData = _gameDataService?.CurrentData;&#10;            if (gameData != null)&#10;            {&#10;                gameData.selectedLevelIndex = levelSelector.CurrentIndex;&#10;                _gameDataService?.SaveData();&#10;            }&#10;        }&#10;&#10;        public void ActivateLevelSelection()&#10;        {&#10;            IsActive = true;&#10;            gameObject.SetActive(true);&#10;            Debug.Log($&quot;[LevelSelectionManager] Level selection activated. Level count: {_levelData?.Count ?? 0}&quot;);&#10;        }&#10;&#10;        public void DeactivateLevelSelection()&#10;        {&#10;            IsActive = false;&#10;            gameObject.SetActive(false);&#10;        }&#10;&#10;        // Debug method to check system status&#10;        [ContextMenu(&quot;Debug Level Selection Status&quot;)]&#10;        public void DebugStatus()&#10;        {&#10;            Debug.Log($&quot;=== Level Selection Debug Status ===&quot;);&#10;            Debug.Log($&quot;IsActive: {IsActive}&quot;);&#10;            Debug.Log($&quot;Navigate Action Assigned: {navigateAction != null}&quot;);&#10;            Debug.Log($&quot;Submit Action Assigned: {submitAction != null}&quot;);&#10;            Debug.Log($&quot;Level Selector Assigned: {levelSelector != null}&quot;);&#10;            Debug.Log($&quot;Level Data Count: {_levelData?.Count ?? 0}&quot;);&#10;            Debug.Log($&quot;Level GameObjects Count: {levelGameObjects.Count}&quot;);&#10;&#10;            if (levelSelector != null)&#10;            {&#10;                Debug.Log($&quot;Selector Object Assigned: {levelSelector.selectorObject != null}&quot;);&#10;                Debug.Log($&quot;Current Index: {levelSelector.CurrentIndex}&quot;);&#10;                Debug.Log($&quot;Is Moving: {levelSelector.IsMoving}&quot;);&#10;            }&#10;        }&#10;&#10;        private void OnLevelSelected(LevelSelectedEvent levelEvent)&#10;        {&#10;            LevelData selectedLevel = _levelData.FirstOrDefault(l =&gt; l.levelName == levelEvent.LevelName);&#10;            if (selectedLevel == null) return;&#10;&#10;            // Update current level in game data&#10;            GameData gameData = _gameDataService?.CurrentData;&#10;            if (gameData != null)&#10;            {&#10;                gameData.currentLevel = selectedLevel.levelName;&#10;                gameData.selectedLevelIndex = levelEvent.LevelIndex;&#10;                _gameDataService?.SaveData();&#10;            }&#10;&#10;            // Show item select screen&#10;            _eventBus?.Publish(new ItemSelectScreenRequestedEvent&#10;            {&#10;                Timestamp = Time.time,&#10;                LevelName = selectedLevel.levelName&#10;            });&#10;&#10;            itemSelectScreen?.ShowItemSelect(selectedLevel.levelName, selectedLevel.sceneName);&#10;        }&#10;&#10;        private void OnLevelLoadRequested(LevelLoadRequestedEvent loadEvent)&#10;        {&#10;            // Start crossfade and load scene&#10;            crossfade?.FadeOutAndIn(&#10;                () =&gt;&#10;                {&#10;                    // Load the scene&#10;                    SceneManager.LoadScene(loadEvent.SceneName);&#10;                },&#10;                () =&gt;&#10;                {&#10;                    // Publish level started event&#10;                    _eventBus?.Publish(new LevelStartedEvent&#10;                    {&#10;                        Timestamp = Time.time,&#10;                        LevelName = loadEvent.LevelName&#10;                    });&#10;                }&#10;            );&#10;        }&#10;&#10;        private void OnLevelCompleted(LevelCompletedEvent completedEvent)&#10;        {&#10;            // Update level completion status and unlock next level&#10;            GameData gameData = _gameDataService?.CurrentData;&#10;            if (gameData == null) return;&#10;&#10;            // Mark level as completed&#10;            gameData.levelCompleted[completedEvent.LevelName] = true;&#10;&#10;            // Update best time&#10;            if (!gameData.levelBestTimes.ContainsKey(completedEvent.LevelName) ||&#10;                completedEvent.CompletionTime &lt; gameData.levelBestTimes[completedEvent.LevelName])&#10;            {&#10;                gameData.levelBestTimes[completedEvent.LevelName] = completedEvent.CompletionTime;&#10;            }&#10;&#10;            // Unlock next level&#10;            int completedIndex = _levelData.FindIndex(l =&gt; l.levelName == completedEvent.LevelName);&#10;            if (completedIndex &gt;= 0 &amp;&amp; completedIndex + 1 &lt; _levelData.Count)&#10;            {&#10;                string nextLevelName = _levelData[completedIndex + 1].levelName;&#10;                if (!gameData.unlockedLevels.Contains(nextLevelName))&#10;                {&#10;                    gameData.unlockedLevels.Add(nextLevelName);&#10;                }&#10;            }&#10;&#10;            _gameDataService?.SaveData();&#10;&#10;            // Refresh level data if we're still in level selection&#10;            if (IsActive)&#10;            {&#10;                LoadLevelProgressFromGameData();&#10;                levelSelector?.Initialize(_levelData, _levelPoints, levelSelector.CurrentIndex);&#10;            }&#10;        }&#10;&#10;        public List&lt;LevelData&gt; GetLevelData() =&gt; _levelData;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using System.Collections.Generic;&#10;using System.Linq;&#10;using Core.Data;&#10;using Core.Events;&#10;using UnityEngine;&#10;using UnityEngine.InputSystem;&#10;using UnityEngine.SceneManagement;&#10;using VContainer;&#10;&#10;namespace LevelSelection&#10;{&#10;    public class LevelSelectionManager : MonoBehaviour&#10;    {&#10;        [Header(&quot;Level Configuration&quot;)]&#10;        [SerializeField] private bool autoActivateOnStart = true;&#10;        &#10;        [Header(&quot;Components - Auto-discovered if not assigned&quot;)]&#10;        public LevelSelector levelSelector;&#10;        public ItemSelectScreen itemSelectScreen;&#10;        public NESCrossfade crossfade;&#10;&#10;        [Header(&quot;Input Actions - Auto-assigned from UI action map&quot;)]&#10;        [SerializeField] private InputActionReference navigateAction;&#10;        [SerializeField] private InputActionReference submitAction;&#10;&#10;        // All private - no manual setup required&#10;        private List&lt;GameObject&gt; _levelGameObjects = new();&#10;        private List&lt;LevelData&gt; _levelData;&#10;        private List&lt;LevelPoint&gt; _levelPoints;&#10;        private IEventBus _eventBus;&#10;        private IGameDataService _gameDataService;&#10;        private bool _isActive = false;&#10;        private LevelSelectionDirector _director;&#10;&#10;        public bool IsActive&#10;        {&#10;            get =&gt; _isActive;&#10;            private set =&gt; _isActive = value;&#10;        }&#10;&#10;        private void Awake()&#10;        {&#10;            _director = new LevelSelectionDirector();&#10;            AutoDiscoverComponents();&#10;            InitializeLevelSelection();&#10;        }&#10;&#10;        private void OnEnable()&#10;        {&#10;            if (navigateAction != null)&#10;            {&#10;                navigateAction.action.Enable();&#10;                navigateAction.action.performed += OnNavigate;&#10;            }&#10;&#10;            if (submitAction != null)&#10;            {&#10;                submitAction.action.Enable();&#10;                submitAction.action.performed += OnConfirm;&#10;            }&#10;        }&#10;&#10;        private void OnDisable()&#10;        {&#10;            if (navigateAction != null)&#10;            {&#10;                navigateAction.action.performed -= OnNavigate;&#10;                navigateAction.action.Disable();&#10;            }&#10;&#10;            if (submitAction != null)&#10;            {&#10;                submitAction.action.performed -= OnConfirm;&#10;                submitAction.action.Disable();&#10;            }&#10;        }&#10;&#10;        private void OnDestroy()&#10;        {&#10;            _eventBus?.Unsubscribe&lt;LevelSelectedEvent&gt;(OnLevelSelected);&#10;            _eventBus?.Unsubscribe&lt;LevelLoadRequestedEvent&gt;(OnLevelLoadRequested);&#10;            _eventBus?.Unsubscribe&lt;LevelCompletedEvent&gt;(OnLevelCompleted);&#10;        }&#10;&#10;        [Inject]&#10;        public void Construct(IEventBus eventBus, IGameDataService gameDataService)&#10;        {&#10;            _eventBus = eventBus;&#10;            _gameDataService = gameDataService;&#10;&#10;            SubscribeToEvents();&#10;        }&#10;&#10;        private void SubscribeToEvents()&#10;        {&#10;            _eventBus?.Subscribe&lt;LevelSelectedEvent&gt;(OnLevelSelected);&#10;            _eventBus?.Subscribe&lt;LevelLoadRequestedEvent&gt;(OnLevelLoadRequested);&#10;            _eventBus?.Subscribe&lt;LevelCompletedEvent&gt;(OnLevelCompleted);&#10;        }&#10;&#10;        private void InitializeLevelSelection()&#10;        {&#10;            // Auto-discover level objects&#10;            AutoDiscoverLevelObjects();&#10;&#10;            Debug.Log($&quot;[LevelSelectionManager] Found {_levelGameObjects.Count} level objects&quot;);&#10;&#10;            // Use director pattern to build level data&#10;            _levelData = _director.BuildLevelData(_levelGameObjects);&#10;            _levelPoints = _levelGameObjects.Select(go =&gt; go.GetComponent&lt;LevelPoint&gt;()).ToList();&#10;&#10;            LoadLevelProgressFromGameData();&#10;&#10;            GameData gameData = _gameDataService?.CurrentData;&#10;            int selectedIndex = gameData?.selectedLevelIndex ?? 0;&#10;&#10;            levelSelector?.Initialize(_levelData, _levelPoints, selectedIndex);&#10;&#10;            // Auto-activate level selection on start if enabled&#10;            if (autoActivateOnStart)&#10;            {&#10;                ActivateLevelSelection();&#10;            }&#10;        }&#10;&#10;        private void AutoDiscoverComponents()&#10;        {&#10;            // Automatically discover and assign components in the scene&#10;            if (levelSelector == null)&#10;            {&#10;                levelSelector = FindObjectOfType&lt;LevelSelector&gt;();&#10;            }&#10;&#10;            if (itemSelectScreen == null)&#10;            {&#10;                itemSelectScreen = FindObjectOfType&lt;ItemSelectScreen&gt;();&#10;            }&#10;&#10;            if (crossfade == null)&#10;            {&#10;                crossfade = FindObjectOfType&lt;NESCrossfade&gt;();&#10;            }&#10;&#10;            // Log any missing components&#10;            if (levelSelector == null)&#10;            {&#10;                Debug.LogError(&quot;[LevelSelectionManager] LevelSelector not found in the scene.&quot;);&#10;            }&#10;&#10;            if (itemSelectScreen == null)&#10;            {&#10;                Debug.LogError(&quot;[LevelSelectionManager] ItemSelectScreen not found in the scene.&quot;);&#10;            }&#10;&#10;            if (crossfade == null)&#10;            {&#10;                Debug.LogError(&quot;[LevelSelectionManager] NESCrossfade not found in the scene.&quot;);&#10;            }&#10;        }&#10;&#10;        private void AutoDiscoverLevelObjects()&#10;        {&#10;            _levelGameObjects.Clear();&#10;&#10;            // Find all GameObjects with LevelPoint components in the scene&#10;            LevelPoint[] allLevelPoints = FindObjectsByType&lt;LevelPoint&gt;(FindObjectsSortMode.None);&#10;&#10;            Debug.Log($&quot;[LevelSelectionManager] Auto-discovered {allLevelPoints.Length} LevelPoint components&quot;);&#10;&#10;            foreach (LevelPoint levelPoint in allLevelPoints)&#10;            {&#10;                _levelGameObjects.Add(levelPoint.gameObject);&#10;            }&#10;&#10;            // Sort by name or position for consistent ordering&#10;            _levelGameObjects.Sort((a, b) =&gt; string.Compare(a.name, b.name, System.StringComparison.Ordinal));&#10;&#10;            Debug.Log($&quot;[LevelSelectionManager] After sorting: {_levelGameObjects.Count} level objects&quot;);&#10;        }&#10;&#10;        private void LoadLevelProgressFromGameData()&#10;        {&#10;            GameData gameData = _gameDataService?.CurrentData;&#10;            if (gameData == null) return;&#10;&#10;            // Update unlock status based on game data&#10;            for (int i = 0; i &lt; _levelData.Count; i++)&#10;            {&#10;                LevelData level = _levelData[i];&#10;                level.isUnlocked = gameData.unlockedLevels.Contains(level.levelName);&#10;&#10;                if (gameData.levelCompleted.TryGetValue(level.levelName, out bool completed))&#10;                {&#10;                    level.isCompleted = completed;&#10;                }&#10;&#10;                if (gameData.levelBestTimes.TryGetValue(level.levelName, out float bestTime))&#10;                {&#10;                    level.bestTime = bestTime;&#10;                }&#10;            }&#10;        }&#10;&#10;        private void OnNavigate(InputAction.CallbackContext context)&#10;        {&#10;            if (!IsActive || levelSelector == null)&#10;            {&#10;                Debug.Log($&quot;[LevelSelectionManager] Navigate blocked - IsActive: {IsActive}, levelSelector: {levelSelector != null}&quot;);&#10;                return;&#10;            }&#10;&#10;            Vector2 direction = context.ReadValue&lt;Vector2&gt;();&#10;            Debug.Log($&quot;[LevelSelectionManager] Navigate input received: {direction}&quot;);&#10;&#10;            levelSelector.Navigate(direction);&#10;            SaveSelectedLevel();&#10;        }&#10;&#10;        private void OnConfirm(InputAction.CallbackContext context)&#10;        {&#10;            if (!IsActive || levelSelector == null) return;&#10;&#10;            levelSelector.SelectCurrentLevel();&#10;        }&#10;&#10;        private void SaveSelectedLevel()&#10;        {&#10;            GameData gameData = _gameDataService?.CurrentData;&#10;            if (gameData != null)&#10;            {&#10;                gameData.selectedLevelIndex = levelSelector.CurrentIndex;&#10;                _gameDataService?.SaveData();&#10;            }&#10;        }&#10;&#10;        public void ActivateLevelSelection()&#10;        {&#10;            IsActive = true;&#10;            gameObject.SetActive(true);&#10;            Debug.Log($&quot;[LevelSelectionManager] Level selection activated. Level count: {_levelData?.Count ?? 0}&quot;);&#10;        }&#10;&#10;        public void DeactivateLevelSelection()&#10;        {&#10;            IsActive = false;&#10;            gameObject.SetActive(false);&#10;        }&#10;&#10;        // Debug method to check system status&#10;        [ContextMenu(&quot;Debug Level Selection Status&quot;)]&#10;        public void DebugStatus()&#10;        {&#10;            Debug.Log($&quot;=== Level Selection Debug Status ===&quot;);&#10;            Debug.Log($&quot;IsActive: {IsActive}&quot;);&#10;            Debug.Log($&quot;Navigate Action Assigned: {navigateAction != null}&quot;);&#10;            Debug.Log($&quot;Submit Action Assigned: {submitAction != null}&quot;);&#10;            Debug.Log($&quot;Level Selector Assigned: {levelSelector != null}&quot;);&#10;            Debug.Log($&quot;Level Data Count: {_levelData?.Count ?? 0}&quot;);&#10;            Debug.Log($&quot;Level GameObjects Count: {_levelGameObjects.Count}&quot;);&#10;&#10;            if (levelSelector != null)&#10;            {&#10;                Debug.Log($&quot;Selector Object Assigned: {levelSelector.selectorObject != null}&quot;);&#10;                Debug.Log($&quot;Current Index: {levelSelector.CurrentIndex}&quot;);&#10;                Debug.Log($&quot;Is Moving: {levelSelector.IsMoving}&quot;);&#10;            }&#10;        }&#10;&#10;        private void OnLevelSelected(LevelSelectedEvent levelEvent)&#10;        {&#10;            LevelData selectedLevel = _levelData.FirstOrDefault(l =&gt; l.levelName == levelEvent.LevelName);&#10;            if (selectedLevel == null) return;&#10;&#10;            // Update current level in game data&#10;            GameData gameData = _gameDataService?.CurrentData;&#10;            if (gameData != null)&#10;            {&#10;                gameData.currentLevel = selectedLevel.levelName;&#10;                gameData.selectedLevelIndex = levelEvent.LevelIndex;&#10;                _gameDataService?.SaveData();&#10;            }&#10;&#10;            // Show item select screen&#10;            _eventBus?.Publish(new ItemSelectScreenRequestedEvent&#10;            {&#10;                Timestamp = Time.time,&#10;                LevelName = selectedLevel.levelName&#10;            });&#10;&#10;            itemSelectScreen?.ShowItemSelect(selectedLevel.levelName, selectedLevel.sceneName);&#10;        }&#10;&#10;        private void OnLevelLoadRequested(LevelLoadRequestedEvent loadEvent)&#10;        {&#10;            // Start crossfade and load scene&#10;            crossfade?.FadeOutAndIn(&#10;                () =&gt;&#10;                {&#10;                    // Load the scene&#10;                    SceneManager.LoadScene(loadEvent.SceneName);&#10;                },&#10;                () =&gt;&#10;                {&#10;                    // Publish level started event&#10;                    _eventBus?.Publish(new LevelStartedEvent&#10;                    {&#10;                        Timestamp = Time.time,&#10;                        LevelName = loadEvent.LevelName&#10;                    });&#10;                }&#10;            );&#10;        }&#10;&#10;        private void OnLevelCompleted(LevelCompletedEvent completedEvent)&#10;        {&#10;            // Update level completion status and unlock next level&#10;            GameData gameData = _gameDataService?.CurrentData;&#10;            if (gameData == null) return;&#10;&#10;            // Mark level as completed&#10;            gameData.levelCompleted[completedEvent.LevelName] = true;&#10;&#10;            // Update best time&#10;            if (!gameData.levelBestTimes.ContainsKey(completedEvent.LevelName) ||&#10;                completedEvent.CompletionTime &lt; gameData.levelBestTimes[completedEvent.LevelName])&#10;            {&#10;                gameData.levelBestTimes[completedEvent.LevelName] = completedEvent.CompletionTime;&#10;            }&#10;&#10;            // Unlock next level&#10;            int completedIndex = _levelData.FindIndex(l =&gt; l.levelName == completedEvent.LevelName);&#10;            if (completedIndex &gt;= 0 &amp;&amp; completedIndex + 1 &lt; _levelData.Count)&#10;            {&#10;                string nextLevelName = _levelData[completedIndex + 1].levelName;&#10;                if (!gameData.unlockedLevels.Contains(nextLevelName))&#10;                {&#10;                    gameData.unlockedLevels.Add(nextLevelName);&#10;                }&#10;            }&#10;&#10;            _gameDataService?.SaveData();&#10;&#10;            // Refresh level data if we're still in level selection&#10;            if (IsActive)&#10;            {&#10;                LoadLevelProgressFromGameData();&#10;                levelSelector?.Initialize(_levelData, _levelPoints, levelSelector.CurrentIndex);&#10;            }&#10;        }&#10;&#10;        public List&lt;LevelData&gt; GetLevelData() =&gt; _levelData;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/LevelSelection/LevelSelector.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/LevelSelection/LevelSelector.cs" />
              <option name="originalContent" value="using System.Collections.Generic;&#10;using Core.Events;&#10;using UnityEngine;&#10;using VContainer;&#10;&#10;namespace LevelSelection&#10;{&#10;    public class LevelSelector : MonoBehaviour&#10;    {&#10;        [Header(&quot;Selector Configuration&quot;)] public GameObject selectorObject;&#10;&#10;        public float moveSpeed = 5f;&#10;        public AudioClip navigationSound;&#10;        public AudioClip selectionSound;&#10;        public AudioClip lockedSound;&#10;&#10;        [Header(&quot;Grid Navigation&quot;)] public int gridWidth = 4;&#10;&#10;        public float snapThreshold = 0.1f;&#10;        private AudioSource _audioSource;&#10;&#10;        private List&lt;LevelData&gt; _availableLevels;&#10;        private IEventBus _eventBus;&#10;        private List&lt;LevelPoint&gt; _levelPoints;&#10;        private Vector3 _targetPosition;&#10;&#10;        public int CurrentIndex { get; private set; }&#10;&#10;        public LevelData CurrentLevel =&gt; _availableLevels?[CurrentIndex];&#10;        public bool IsMoving { get; private set; }&#10;&#10;        private void Awake()&#10;        {&#10;            _audioSource = GetComponent&lt;AudioSource&gt;();&#10;            if (_audioSource == null)&#10;            {&#10;                _audioSource = gameObject.AddComponent&lt;AudioSource&gt;();&#10;            }&#10;        }&#10;&#10;        private void Update()&#10;        {&#10;            if (IsMoving &amp;&amp; selectorObject != null)&#10;            {&#10;                selectorObject.transform.position = Vector3.MoveTowards(&#10;                    selectorObject.transform.position,&#10;                    _targetPosition,&#10;                    moveSpeed * Time.deltaTime&#10;                );&#10;&#10;                if (Vector3.Distance(selectorObject.transform.position, _targetPosition) &lt; snapThreshold)&#10;                {&#10;                    selectorObject.transform.position = _targetPosition;&#10;                    IsMoving = false;&#10;                }&#10;            }&#10;        }&#10;&#10;        [Inject]&#10;        public void Construct(IEventBus eventBus)&#10;        {&#10;            _eventBus = eventBus;&#10;        }&#10;&#10;        public void Initialize(List&lt;LevelData&gt; levels, List&lt;LevelPoint&gt; levelPoints, int selectedIndex = 0)&#10;        {&#10;            _availableLevels = levels;&#10;            _levelPoints = levelPoints;&#10;            CurrentIndex = Mathf.Clamp(selectedIndex, 0, levels.Count - 1);&#10;&#10;            UpdateLevelStates();&#10;            MoveToCurrentLevel(true); // Instant move on initialization&#10;        }&#10;&#10;        public void Navigate(Vector2 direction)&#10;        {&#10;            if (IsMoving || _availableLevels == null || _availableLevels.Count == 0)&#10;                return;&#10;&#10;            int newIndex = CalculateNewIndex(direction);&#10;&#10;            if (newIndex != CurrentIndex &amp;&amp; newIndex &gt;= 0 &amp;&amp; newIndex &lt; _availableLevels.Count)&#10;            {&#10;                int previousIndex = CurrentIndex;&#10;                CurrentIndex = newIndex;&#10;&#10;                PlaySound(navigationSound);&#10;                UpdateSelection();&#10;                MoveToCurrentLevel();&#10;&#10;                _eventBus?.Publish(new LevelNavigationEvent&#10;                {&#10;                    Timestamp = Time.time,&#10;                    PreviousIndex = previousIndex,&#10;                    NewIndex = CurrentIndex,&#10;                    Direction = direction&#10;                });&#10;            }&#10;        }&#10;&#10;        private int CalculateNewIndex(Vector2 direction)&#10;        {&#10;            // Adventure Island III style navigation - mostly horizontal with some vertical&#10;            int currentRow = CurrentIndex / gridWidth;&#10;            int currentCol = CurrentIndex % gridWidth;&#10;&#10;            if (Mathf.Abs(direction.x) &gt; Mathf.Abs(direction.y))&#10;            {&#10;                // Horizontal movement&#10;                if (direction.x &gt; 0) // Right&#10;                {&#10;                    return Mathf.Min(CurrentIndex + 1, _availableLevels.Count - 1);&#10;                }&#10;&#10;                // Left&#10;                return Mathf.Max(CurrentIndex - 1, 0);&#10;            }&#10;&#10;            // Vertical movement&#10;            if (direction.y &gt; 0) // Up&#10;            {&#10;                int newIndex = CurrentIndex - gridWidth;&#10;                return newIndex &gt;= 0 ? newIndex : CurrentIndex;&#10;            }&#10;            else // Down&#10;            {&#10;                int newIndex = CurrentIndex + gridWidth;&#10;                return newIndex &lt; _availableLevels.Count ? newIndex : CurrentIndex;&#10;            }&#10;        }&#10;&#10;        public void SelectCurrentLevel()&#10;        {&#10;            if (_availableLevels == null || CurrentIndex &gt;= _availableLevels.Count)&#10;                return;&#10;&#10;            LevelData selectedLevel = _availableLevels[CurrentIndex];&#10;&#10;            if (!selectedLevel.isUnlocked)&#10;            {&#10;                PlaySound(lockedSound);&#10;                return;&#10;            }&#10;&#10;            PlaySound(selectionSound);&#10;&#10;            _eventBus?.Publish(new LevelSelectedEvent&#10;            {&#10;                Timestamp = Time.time,&#10;                LevelName = selectedLevel.levelName,&#10;                LevelIndex = CurrentIndex&#10;            });&#10;        }&#10;&#10;        private void UpdateSelection()&#10;        {&#10;            for (int i = 0; i &lt; _levelPoints.Count; i++)&#10;            {&#10;                if (_levelPoints[i] != null)&#10;                {&#10;                    _levelPoints[i].SetSelected(i == CurrentIndex);&#10;                }&#10;            }&#10;        }&#10;&#10;        private void UpdateLevelStates()&#10;        {&#10;            for (int i = 0; i &lt; _levelPoints.Count &amp;&amp; i &lt; _availableLevels.Count; i++)&#10;            {&#10;                if (_levelPoints[i] != null)&#10;                {&#10;                    _levelPoints[i].SetUnlocked(_availableLevels[i].isUnlocked);&#10;                    _levelPoints[i].SetSelected(i == CurrentIndex);&#10;                }&#10;            }&#10;        }&#10;&#10;        private void MoveToCurrentLevel(bool instant = false)&#10;        {&#10;            if (CurrentIndex &gt;= _levelPoints.Count || _levelPoints[CurrentIndex] == null)&#10;                return;&#10;&#10;            _targetPosition = _levelPoints[CurrentIndex].transform.position;&#10;&#10;            if (instant)&#10;            {&#10;                selectorObject.transform.position = _targetPosition;&#10;                IsMoving = false;&#10;            }&#10;            else&#10;            {&#10;                IsMoving = true;&#10;            }&#10;        }&#10;&#10;        private void PlaySound(AudioClip clip)&#10;        {&#10;            if (_audioSource &amp;&amp; clip)&#10;            {&#10;                _audioSource.PlayOneShot(clip);&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using System.Collections.Generic;&#10;using Core.Events;&#10;using UnityEngine;&#10;using VContainer;&#10;&#10;namespace LevelSelection&#10;{&#10;    public class LevelSelector : MonoBehaviour&#10;    {&#10;        [Header(&quot;Selector Configuration&quot;)] public GameObject selectorObject;&#10;&#10;        public float moveSpeed = 5f;&#10;        public AudioClip navigationSound;&#10;        public AudioClip selectionSound;&#10;        public AudioClip lockedSound;&#10;&#10;        [Header(&quot;Grid Navigation&quot;)] public int gridWidth = 4;&#10;&#10;        public float snapThreshold = 0.1f;&#10;        private AudioSource _audioSource;&#10;&#10;        private List&lt;LevelData&gt; _availableLevels;&#10;        private IEventBus _eventBus;&#10;        private List&lt;LevelPoint&gt; _levelPoints;&#10;        private Vector3 _targetPosition;&#10;&#10;        public int CurrentIndex { get; private set; }&#10;&#10;        public LevelData CurrentLevel =&gt; _availableLevels?[CurrentIndex];&#10;        public bool IsMoving { get; private set; }&#10;&#10;        private void Awake()&#10;        {&#10;            _audioSource = GetComponent&lt;AudioSource&gt;();&#10;            if (_audioSource == null)&#10;            {&#10;                _audioSource = gameObject.AddComponent&lt;AudioSource&gt;();&#10;            }&#10;        }&#10;&#10;        private void Update()&#10;        {&#10;            if (IsMoving &amp;&amp; selectorObject != null)&#10;            {&#10;                selectorObject.transform.position = Vector3.MoveTowards(&#10;                    selectorObject.transform.position,&#10;                    _targetPosition,&#10;                    moveSpeed * Time.deltaTime&#10;                );&#10;&#10;                if (Vector3.Distance(selectorObject.transform.position, _targetPosition) &lt; snapThreshold)&#10;                {&#10;                    selectorObject.transform.position = _targetPosition;&#10;                    IsMoving = false;&#10;                }&#10;            }&#10;        }&#10;&#10;        [Inject]&#10;        public void Construct(IEventBus eventBus)&#10;        {&#10;            _eventBus = eventBus;&#10;        }&#10;&#10;        public void Initialize(List&lt;LevelData&gt; levels, List&lt;LevelPoint&gt; levelPoints, int selectedIndex = 0)&#10;        {&#10;            _availableLevels = levels;&#10;            _levelPoints = levelPoints;&#10;            CurrentIndex = Mathf.Clamp(selectedIndex, 0, levels.Count - 1);&#10;&#10;            UpdateLevelStates();&#10;            MoveToCurrentLevel(true); // Instant move on initialization&#10;        }&#10;&#10;        public void Navigate(Vector2 direction)&#10;        {&#10;            Debug.Log($&quot;[LevelSelector] Navigate called with direction: {direction}&quot;);&#10;            Debug.Log($&quot;[LevelSelector] IsMoving: {IsMoving}, AvailableLevels count: {_availableLevels?.Count ?? 0}&quot;);&#10;            &#10;            if (IsMoving || _availableLevels == null || _availableLevels.Count == 0)&#10;            {&#10;                Debug.Log(&quot;[LevelSelector] Navigate blocked - IsMoving or no levels available&quot;);&#10;                return;&#10;            }&#10;&#10;            int newIndex = CalculateNewIndex(direction);&#10;            Debug.Log($&quot;[LevelSelector] Current index: {CurrentIndex}, New index: {newIndex}&quot;);&#10;&#10;            if (newIndex != CurrentIndex &amp;&amp; newIndex &gt;= 0 &amp;&amp; newIndex &lt; _availableLevels.Count)&#10;            {&#10;                int previousIndex = CurrentIndex;&#10;                CurrentIndex = newIndex;&#10;&#10;                Debug.Log($&quot;[LevelSelector] Moving from index {previousIndex} to {CurrentIndex}&quot;);&#10;                &#10;                PlaySound(navigationSound);&#10;                UpdateSelection();&#10;                MoveToCurrentLevel();&#10;&#10;                _eventBus?.Publish(new LevelNavigationEvent&#10;                {&#10;                    Timestamp = Time.time,&#10;                    PreviousIndex = previousIndex,&#10;                    NewIndex = CurrentIndex,&#10;                    Direction = direction&#10;                });&#10;            }&#10;            else&#10;            {&#10;                Debug.Log($&quot;[LevelSelector] Navigation blocked - same index or out of bounds&quot;);&#10;            }&#10;        }&#10;&#10;        private int CalculateNewIndex(Vector2 direction)&#10;        {&#10;            // Adventure Island III style navigation - mostly horizontal with some vertical&#10;            int currentRow = CurrentIndex / gridWidth;&#10;            int currentCol = CurrentIndex % gridWidth;&#10;&#10;            if (Mathf.Abs(direction.x) &gt; Mathf.Abs(direction.y))&#10;            {&#10;                // Horizontal movement&#10;                if (direction.x &gt; 0) // Right&#10;                {&#10;                    return Mathf.Min(CurrentIndex + 1, _availableLevels.Count - 1);&#10;                }&#10;&#10;                // Left&#10;                return Mathf.Max(CurrentIndex - 1, 0);&#10;            }&#10;&#10;            // Vertical movement&#10;            if (direction.y &gt; 0) // Up&#10;            {&#10;                int newIndex = CurrentIndex - gridWidth;&#10;                return newIndex &gt;= 0 ? newIndex : CurrentIndex;&#10;            }&#10;            else // Down&#10;            {&#10;                int newIndex = CurrentIndex + gridWidth;&#10;                return newIndex &lt; _availableLevels.Count ? newIndex : CurrentIndex;&#10;            }&#10;        }&#10;&#10;        public void SelectCurrentLevel()&#10;        {&#10;            if (_availableLevels == null || CurrentIndex &gt;= _availableLevels.Count)&#10;                return;&#10;&#10;            LevelData selectedLevel = _availableLevels[CurrentIndex];&#10;&#10;            if (!selectedLevel.isUnlocked)&#10;            {&#10;                PlaySound(lockedSound);&#10;                return;&#10;            }&#10;&#10;            PlaySound(selectionSound);&#10;&#10;            _eventBus?.Publish(new LevelSelectedEvent&#10;            {&#10;                Timestamp = Time.time,&#10;                LevelName = selectedLevel.levelName,&#10;                LevelIndex = CurrentIndex&#10;            });&#10;        }&#10;&#10;        private void UpdateSelection()&#10;        {&#10;            for (int i = 0; i &lt; _levelPoints.Count; i++)&#10;            {&#10;                if (_levelPoints[i] != null)&#10;                {&#10;                    _levelPoints[i].SetSelected(i == CurrentIndex);&#10;                }&#10;            }&#10;        }&#10;&#10;        private void UpdateLevelStates()&#10;        {&#10;            for (int i = 0; i &lt; _levelPoints.Count &amp;&amp; i &lt; _availableLevels.Count; i++)&#10;            {&#10;                if (_levelPoints[i] != null)&#10;                {&#10;                    _levelPoints[i].SetUnlocked(_availableLevels[i].isUnlocked);&#10;                    _levelPoints[i].SetSelected(i == CurrentIndex);&#10;                }&#10;            }&#10;        }&#10;&#10;        private void MoveToCurrentLevel(bool instant = false)&#10;        {&#10;            if (CurrentIndex &gt;= _levelPoints.Count || _levelPoints[CurrentIndex] == null)&#10;                return;&#10;&#10;            _targetPosition = _levelPoints[CurrentIndex].transform.position;&#10;&#10;            if (instant)&#10;            {&#10;                selectorObject.transform.position = _targetPosition;&#10;                IsMoving = false;&#10;            }&#10;            else&#10;            {&#10;                IsMoving = true;&#10;            }&#10;        }&#10;&#10;        private void PlaySound(AudioClip clip)&#10;        {&#10;            if (_audioSource &amp;&amp; clip)&#10;            {&#10;                _audioSource.PlayOneShot(clip);&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/LevelSelection/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/LevelSelection/README.md" />
              <option name="originalContent" value="# Level Selection System Setup Guide&#10;&#10;## Overview&#10;This level selection system integrates with your existing GameFlowManager, GameDataCoordinator, and event system to provide a complete level selection experience with NES-style navigation and transitions.&#10;&#10;## Components Created&#10;&#10;### Core Components:&#10;1. **LevelData.cs** - Data structures and builder/factory patterns for level information&#10;2. **LevelPoint.cs** - Component for level GameObjects with visual feedback&#10;3. **LevelSelector.cs** - Handles navigation between levels and selector movement&#10;4. **LevelSelectionManager.cs** - Main coordinator that manages the entire system&#10;5. **LevelSelectionDirector.cs** - Director pattern for building level data&#10;6. **ItemSelectScreen.cs** - Shows the &quot;item select screen&quot; before level starts&#10;7. **NESCrossfade.cs** - NES-style crossfade transitions between scenes&#10;&#10;## Setup Instructions&#10; for &#10;### 1. Scene Setup&#10;Create a level selection scene with the following hierarchy:&#10;&#10;```&#10;LevelSelectionScene&#10;├── LevelSelectionManager (with LevelSelectionManager script)&#10;├── LevelContainer (empty GameObject to hold level points)&#10;│   ├── Level_01 (with LevelPoint script)&#10;│   ├── Level_02 (with LevelPoint script)&#10;│   ├── Level_03 (with LevelPoint script)&#10;│   └── ... (more levels)&#10;├── Selector (GameObject that moves between levels)&#10;├── UI Canvas&#10;│   ├── ItemSelectScreen (with ItemSelectScreen script)&#10;│   └── CrossfadeOverlay (with NESCrossfade script)&#10;└── LevelSelector (with LevelSelector script)&#10;```&#10;&#10;### 2. Level Point Configuration&#10;For each level GameObject:&#10;1. Add the **LevelPoint** component&#10;2. Configure:&#10;   - Level Name (e.g., &quot;Level_01&quot;)&#10;   - Display Name (e.g., &quot;Forest Stage&quot;)&#10;   - Scene Name (the actual scene file name)&#10;   - Level Icon (sprite for the level)&#10;   - Icon Renderer (SpriteRenderer for the icon)&#10;   - Lock Renderer (SpriteRenderer for lock overlay)&#10;&#10;### 3. Level Selection Manager Configuration&#10;1. Assign all level GameObjects to the levelGameObjects list&#10;2. Set the levelContainer reference&#10;3. Assign the LevelSelector, ItemSelectScreen, and NESCrossfade components&#10;4. Configure input keys (defaults to arrow keys + Enter)&#10;&#10;### 4. Selector Configuration&#10;1. Assign the selector GameObject (this moves between levels)&#10;2. Set move speed and grid width for navigation&#10;3. Add audio clips for navigation, selection, and locked sounds&#10;&#10;### 5. Item Select Screen Setup&#10;1. Create a UI Image for the item select screen&#10;2. Place your &quot;item select screen.png&quot; sprite in Resources folder&#10;3. Configure display duration and input settings&#10;&#10;### 6. Crossfade Setup&#10;1. Create a UI Image that covers the full screen&#10;2. Configure fade colors and NES-style effect settings&#10;&#10;## Integration with Existing Systems&#10;&#10;### GameData Integration&#10;The system automatically:&#10;- Saves/loads unlocked levels&#10;- Tracks level completion status&#10;- Stores best completion times&#10;- Remembers selected level index&#10;&#10;### Event System Integration&#10;Publishes these events:&#10;- `LevelSelectedEvent` - When a level is chosen&#10;- `LevelNavigationEvent` - When navigating between levels&#10;- `ItemSelectScreenRequestedEvent` - When showing item select&#10;- `LevelLoadRequestedEvent` - When loading a level&#10;- `LevelStartedEvent` - When level begins&#10;- `LevelCompletedEvent` - When level is completed&#10;&#10;### GameFlowManager Integration&#10;- Added `LevelSelection` state to GameState enum&#10;- Handles scene transitions through crossfade system&#10;- Manages game state changes during level selection&#10;&#10;## Usage Example&#10;&#10;```csharp&#10;// From main menu, transition to level selection&#10;gameFlowManager.ChangeState(GameState.LevelSelection);&#10;&#10;// The system will automatically:&#10;// 1. Load unlocked levels from GameData&#10;// 2. Position selector on last selected level&#10;// 3. Handle input for navigation&#10;// 4. Show item select screen on confirmation&#10;// 5. Load the selected level scene with crossfade&#10;```&#10;&#10;## Navigation Controls&#10;- **Arrow Keys**: Navigate between levels (Adventure Island III style)&#10;- **Enter**: Confirm level selection&#10;- **Locked levels**: Play sound and prevent selection&#10;&#10;## Customization Points&#10;- Modify navigation grid layout in LevelSelector&#10;- Customize NES crossfade colors and timing&#10;- Add more visual feedback to level points&#10;- Extend level data with additional properties&#10;- Customize item select screen behavior&#10;&#10;## Factory and Builder Pattern Usage&#10;- **LevelDataFactory**: Creates LevelData from GameObjects&#10;- **LevelDataBuilder**: Fluent builder for LevelData construction&#10;- **LevelSelectionDirector**: Orchestrates level data building&#10;&#10;The system is fully integrated with your existing architecture and ready to use!&#10;" />
              <option name="updatedContent" value="# Level Selection System Setup Guide&#10;&#10;## Overview&#10;This level selection system integrates with your existing GameFlowManager, GameDataCoordinator, and event system to provide a complete level selection experience with NES-style navigation and transitions.&#10;&#10;## Components Created&#10;&#10;### Core Components:&#10;1. **LevelData.cs** - Data structures and builder/factory patterns for level information&#10;2. **LevelPoint.cs** - Component for level GameObjects with visual feedback&#10;3. **LevelSelector.cs** - Handles navigation between levels and selector movement&#10;4. **LevelSelectionManager.cs** - Main coordinator that manages the entire system&#10;5. **LevelSelectionDirector.cs** - Director pattern for building level data&#10;6. **ItemSelectScreen.cs** - Shows the &quot;item select screen&quot; before level starts&#10;7. **NESCrossfade.cs** - NES-style crossfade transitions between scenes&#10;&#10;## Setup Instructions&#10;&#10;### 1. Scene Setup&#10;Create a level selection scene with the following hierarchy:&#10;&#10;**Option A: Child Scope (Recommended)**&#10;```&#10;LevelSelectionScene&#10;├── GameManager (with GameLifetimeScope)&#10;│   └── LevelSelectionManager (with LevelSelectionLifetimeScope)&#10;├── LevelContainer (empty GameObject to hold level points)&#10;│   ├── Level_01 (with LevelPoint script)&#10;│   ├── Level_02 (with LevelPoint script)&#10;│   ├── Level_03 (with LevelPoint script)&#10;│   └── ... (more levels)&#10;├── Selector (GameObject that moves between levels)&#10;├── UI Canvas&#10;│   ├── ItemSelectScreen (with ItemSelectScreen script)&#10;│   └── CrossfadeOverlay (with NESCrossfade script)&#10;└── LevelSelector (with LevelSelector script)&#10;```&#10;&#10;**Option B: Separate Scopes**&#10;If you need separate scopes, make sure both GameLifetimeScope and LevelSelectionLifetimeScope are at the root level, and the level selection scope will inherit from the game scope.&#10;&#10;### 2. VContainer Setup&#10;- Ensure your main scene has a `GameLifetimeScope` that registers core services&#10;- The `LevelSelectionLifetimeScope` should be either a child of the GameLifetimeScope GameObject or set up to inherit from it&#10;- This allows the level selection components to access `IEventBus`, `IGameDataService`, etc.&#10;&#10;### 3. Level Point Configuration&#10;For each level GameObject:&#10;1. Add the **LevelPoint** component&#10;2. Configure:&#10;   - Level Name (e.g., &quot;Level_01&quot;)&#10;   - Display Name (e.g., &quot;Forest Stage&quot;)&#10;   - Scene Name (the actual scene file name)&#10;   - Level Icon (sprite for the level)&#10;   - Icon Renderer (SpriteRenderer for the icon)&#10;   - Lock Renderer (SpriteRenderer for lock overlay)&#10;&#10;### 4. Level Selection Manager Configuration&#10;1. Assign all level GameObjects to the levelGameObjects list&#10;2. Set the levelContainer reference&#10;3. Assign the LevelSelector, ItemSelectScreen, and NESCrossfade components&#10;4. Configure input keys (defaults to arrow keys + Enter)&#10;&#10;### 5. Selector Configuration&#10;1. Assign the selector GameObject (this moves between levels)&#10;2. Set move speed and grid width for navigation&#10;3. Add audio clips for navigation, selection, and locked sounds&#10;&#10;### 6. Item Select Screen Setup&#10;1. Create a UI Image for the item select screen&#10;2. Place your &quot;item select screen.png&quot; sprite in Resources folder&#10;3. Configure display duration and input settings&#10;&#10;### 7. Crossfade Setup&#10;1. Create a UI Image that covers the full screen&#10;2. Configure fade colors and NES-style effect settings&#10;&#10;## Integration with Existing Systems&#10;&#10;### GameData Integration&#10;The system automatically:&#10;- Saves/loads unlocked levels&#10;- Tracks level completion status&#10;- Stores best completion times&#10;- Remembers selected level index&#10;&#10;### Event System Integration&#10;Publishes these events:&#10;- `LevelSelectedEvent` - When a level is chosen&#10;- `LevelNavigationEvent` - When navigating between levels&#10;- `ItemSelectScreenRequestedEvent` - When showing item select&#10;- `LevelLoadRequestedEvent` - When loading a level&#10;- `LevelStartedEvent` - When level begins&#10;- `LevelCompletedEvent` - When level is completed&#10;&#10;### GameFlowManager Integration&#10;- Added `LevelSelection` state to GameState enum&#10;- Handles scene transitions through crossfade system&#10;- Manages game state changes during level selection&#10;&#10;## Usage Example&#10;&#10;```csharp&#10;// From main menu, transition to level selection&#10;gameFlowManager.ChangeState(GameState.LevelSelection);&#10;&#10;// The system will automatically:&#10;// 1. Load unlocked levels from GameData&#10;// 2. Position selector on last selected level&#10;// 3. Handle input for navigation&#10;// 4. Show item select screen on confirmation&#10;// 5. Load the selected level scene with crossfade&#10;```&#10;&#10;## Navigation Controls&#10;- **Arrow Keys**: Navigate between levels (Adventure Island III style)&#10;- **Enter**: Confirm level selection&#10;- **Locked levels**: Play sound and prevent selection&#10;&#10;## Customization Points&#10;- Modify navigation grid layout in LevelSelector&#10;- Customize NES crossfade colors and timing&#10;- Add more visual feedback to level points&#10;- Extend level data with additional properties&#10;- Customize item select screen behavior&#10;&#10;## Factory and Builder Pattern Usage&#10;- **LevelDataFactory**: Creates LevelData from GameObjects&#10;- **LevelDataBuilder**: Fluent builder for LevelData construction&#10;- **LevelSelectionDirector**: Orchestrates level data building&#10;&#10;The system is fully integrated with your existing architecture and ready to use!" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/LevelSelection/SerializableLevelPoint.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/LevelSelection/SerializableLevelPoint.cs" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/LevelSelection/Services/IAudioFeedbackService.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/LevelSelection/Services/IAudioFeedbackService.cs" />
              <option name="originalContent" value="using UnityEngine;&#10;&#10;namespace LevelSelection.Services&#10;{&#10;    /// &lt;summary&gt;&#10;    ///     Service responsible for audio feedback during level selection&#10;    /// &lt;/summary&gt;&#10;    public interface IAudioFeedbackService&#10;    {&#10;        void Initialize(AudioSource audioSource, LevelSelectionConfig config);&#10;        void PlayNavigationSound();&#10;        void PlaySelectionSound();&#10;        void PlayLockedSound();&#10;    }&#10;&#10;    /// &lt;summary&gt;&#10;    ///     Handles audio feedback for level selection events (Single Responsibility)&#10;    /// &lt;/summary&gt;&#10;    public class AudioFeedbackService : IAudioFeedbackService&#10;    {&#10;        private AudioSource _audioSource;&#10;        private LevelSelectionConfig _config;&#10;&#10;        public void Initialize(AudioSource audioSource, LevelSelectionConfig config)&#10;        {&#10;            _audioSource = audioSource;&#10;            _config = config;&#10;        }&#10;&#10;        public void PlayNavigationSound()&#10;        {&#10;            if (_config?.navigationSound &amp;&amp; _audioSource)&#10;            {&#10;                _audioSource.PlayOneShot(_config.navigationSound);&#10;            }&#10;        }&#10;&#10;        public void PlaySelectionSound()&#10;        {&#10;            if (_config?.selectionSound &amp;&amp; _audioSource)&#10;            {&#10;                _audioSource.PlayOneShot(_config.selectionSound);&#10;            }&#10;        }&#10;&#10;        public void PlayLockedSound()&#10;        {&#10;            if (_config?.lockedSound &amp;&amp; _audioSource)&#10;            {&#10;                _audioSource.PlayOneShot(_config.lockedSound);&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using UnityEngine;&#10;&#10;namespace LevelSelection.Services&#10;{&#10;    /// &lt;summary&gt;&#10;    ///     Service responsible for audio feedback during level selection&#10;    /// &lt;/summary&gt;&#10;    public interface IAudioFeedbackService&#10;    {&#10;        void Initialize(AudioSource audioSource);&#10;        void PlayNavigationSound();&#10;        void PlaySelectionSound();&#10;        void PlayLockedSound();&#10;    }&#10;&#10;    /// &lt;summary&gt;&#10;    ///     Handles audio feedback for level selection events (Single Responsibility)&#10;    /// &lt;/summary&gt;&#10;    public class AudioFeedbackService : IAudioFeedbackService&#10;    {&#10;        private AudioSource _audioSource;&#10;&#10;        public void Initialize(AudioSource audioSource)&#10;        {&#10;            _audioSource = audioSource;&#10;        }&#10;&#10;        public void PlayNavigationSound()&#10;        {&#10;            if (_audioSource)&#10;            {&#10;                _audioSource.PlayOneShot(_audioSource.clip);&#10;            }&#10;        }&#10;&#10;        public void PlaySelectionSound()&#10;        {&#10;            if (_audioSource)&#10;            {&#10;                _audioSource.PlayOneShot(_audioSource.clip);&#10;            }&#10;        }&#10;&#10;        public void PlayLockedSound()&#10;        {&#10;            if (_audioSource)&#10;            {&#10;                _audioSource.PlayOneShot(_audioSource.clip);&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/LevelSelection/Services/IInputFilterService.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/LevelSelection/Services/IInputFilterService.cs" />
              <option name="originalContent" value="using UnityEngine;&#10;&#10;namespace LevelSelection.Services&#10;{&#10;    /// &lt;summary&gt;&#10;    ///     Service responsible for input processing and filtering&#10;    /// &lt;/summary&gt;&#10;    public interface IInputFilterService&#10;    {&#10;        void Initialize(LevelSelectionConfig config);&#10;        void SetEnabled(bool enabled);&#10;        bool ProcessNavigationInput(Vector2 direction, out Vector2 filteredDirection);&#10;    }&#10;&#10;    /// &lt;summary&gt;&#10;    ///     Handles input filtering and cooldowns (Single Responsibility)&#10;    /// &lt;/summary&gt;&#10;    public class InputFilterService : IInputFilterService&#10;    {&#10;        private const float InputCooldownTime = 0.2f; // Prevent input spam&#10;        private const float InputDeadzone = 0.5f; // Input threshold&#10;&#10;        private LevelSelectionConfig _config;&#10;        private bool _isEnabled = true;&#10;        private Vector2 _lastInputDirection;&#10;        private float _lastInputTime;&#10;&#10;        public void Initialize(LevelSelectionConfig config)&#10;        {&#10;            _config = config;&#10;        }&#10;&#10;        public void SetEnabled(bool enabled)&#10;        {&#10;            _isEnabled = enabled;&#10;        }&#10;&#10;        public bool ProcessNavigationInput(Vector2 direction, out Vector2 filteredDirection)&#10;        {&#10;            filteredDirection = Vector2.zero;&#10;&#10;            if (!_isEnabled) return false;&#10;&#10;            // Apply deadzone filtering&#10;            if (direction.magnitude &lt; InputDeadzone) return false;&#10;&#10;            // Apply input cooldown to prevent spam&#10;            if (Time.time - _lastInputTime &lt; InputCooldownTime) return false;&#10;&#10;            // Normalize direction for consistent behavior&#10;            direction = direction.normalized;&#10;&#10;            // Check if this is the same direction as last input (prevent repeats)&#10;            if (Vector2.Dot(direction, _lastInputDirection) &gt; 0.8f &amp;&amp;&#10;                Time.time - _lastInputTime &lt; InputCooldownTime * 2f) return false;&#10;&#10;            _lastInputDirection = direction;&#10;            _lastInputTime = Time.time;&#10;&#10;            filteredDirection = direction;&#10;            return true;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using UnityEngine;&#10;&#10;namespace LevelSelection.Services&#10;{&#10;    /// &lt;summary&gt;&#10;    ///     Service responsible for input processing and filtering&#10;    /// &lt;/summary&gt;&#10;    public interface IInputFilterService&#10;    {&#10;        void Initialize();&#10;        void SetEnabled(bool enabled);&#10;        bool ProcessNavigationInput(Vector2 direction, out Vector2 filteredDirection);&#10;    }&#10;&#10;    /// &lt;summary&gt;&#10;    ///     Handles input filtering and cooldowns (Single Responsibility)&#10;    /// &lt;/summary&gt;&#10;    public class InputFilterService : IInputFilterService&#10;    {&#10;        private const float InputCooldownTime = 0.2f; // Prevent input spam&#10;        private const float InputDeadzone = 0.5f; // Input threshold&#10;&#10;        private bool _isEnabled = true;&#10;        private Vector2 _lastInputDirection;&#10;        private float _lastInputTime;&#10;&#10;        public void Initialize()&#10;        {&#10;        }&#10;&#10;        public void SetEnabled(bool enabled)&#10;        {&#10;            _isEnabled = enabled;&#10;        }&#10;&#10;        public bool ProcessNavigationInput(Vector2 direction, out Vector2 filteredDirection)&#10;        {&#10;            filteredDirection = Vector2.zero;&#10;&#10;            if (!_isEnabled) return false;&#10;&#10;            // Apply deadzone filtering&#10;            if (direction.magnitude &lt; InputDeadzone) return false;&#10;&#10;            // Apply input cooldown to prevent spam&#10;            if (Time.time - _lastInputTime &lt; InputCooldownTime) return false;&#10;&#10;            // Normalize direction for consistent behavior&#10;            direction = direction.normalized;&#10;&#10;            // Check if this is the same direction as last input (prevent repeats)&#10;            if (Vector2.Dot(direction, _lastInputDirection) &gt; 0.8f &amp;&amp;&#10;                Time.time - _lastInputTime &lt; InputCooldownTime * 2f) return false;&#10;&#10;            _lastInputDirection = direction;&#10;            _lastInputTime = Time.time;&#10;&#10;            filteredDirection = direction;&#10;            return true;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/LevelSelection/Services/IItemSelectService.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/LevelSelection/Services/IItemSelectService.cs" />
              <option name="originalContent" value="using System;&#10;using UnityEngine;&#10;&#10;namespace LevelSelection.Services&#10;{&#10;    /// &lt;summary&gt;&#10;    ///     Service responsible for managing item select screen state&#10;    /// &lt;/summary&gt;&#10;    public interface IItemSelectService&#10;    {&#10;        bool IsActive { get; }&#10;        event Action&lt;bool&gt; OnStateChanged;&#10;&#10;        void Initialize(ItemSelectScreen itemSelectScreen);&#10;        void Initialize(ItemSelectScreen itemSelectScreen, ISceneLoadService sceneLoadService);&#10;        void ShowItemSelect(string levelName, string sceneName, Action onComplete = null);&#10;    }&#10;&#10;    /// &lt;summary&gt;&#10;    ///     Manages item select screen state and interactions (Single Responsibility)&#10;    /// &lt;/summary&gt;&#10;    public class ItemSelectService : IItemSelectService&#10;    {&#10;&#10;        private ItemSelectScreen _itemSelectScreen;&#10;        private ISceneLoadService _sceneLoadService;&#10;        public bool IsActive { get; private set; }&#10;        public event Action&lt;bool&gt; OnStateChanged;&#10;&#10;        public void Initialize(ItemSelectScreen itemSelectScreen)&#10;        {&#10;            Initialize(itemSelectScreen, null);&#10;        }&#10;&#10;        public void Initialize(ItemSelectScreen itemSelectScreen, ISceneLoadService sceneLoadService)&#10;        {&#10;            _itemSelectScreen = itemSelectScreen;&#10;            _sceneLoadService = sceneLoadService;&#10;        }&#10;&#10;        public void ShowItemSelect(string levelName, string sceneName, Action onComplete = null)&#10;        {&#10;            // If no item select screen is available, load directly&#10;            if (_itemSelectScreen == null)&#10;            {&#10;                Debug.Log($&quot;[ItemSelectService] No ItemSelectScreen available, loading level directly: {sceneName}&quot;);&#10;                _sceneLoadService?.LoadLevel(sceneName);&#10;                onComplete?.Invoke();&#10;                return;&#10;            }&#10;&#10;            SetActive(true);&#10;            _itemSelectScreen.ShowItemSelect(levelName, sceneName, () =&gt;&#10;            {&#10;                SetActive(false);&#10;                onComplete?.Invoke();&#10;            });&#10;        }&#10;&#10;        private void SetActive(bool isActive)&#10;        {&#10;            if (IsActive == isActive) return;&#10;&#10;            IsActive = isActive;&#10;            OnStateChanged?.Invoke(isActive);&#10;            Debug.Log($&quot;[ItemSelectService] State changed to: {isActive}&quot;);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using System;&#10;using UnityEngine;&#10;&#10;namespace LevelSelection.Services&#10;{&#10;    /// &lt;summary&gt;&#10;    ///     Service responsible for managing item select screen state&#10;    /// &lt;/summary&gt;&#10;    public interface IItemSelectService&#10;    {&#10;        bool IsActive { get; }&#10;        event Action&lt;bool&gt; OnStateChanged;&#10;&#10;        void Initialize(ItemSelectScreen itemSelectScreen, ISceneLoadService sceneLoadService);&#10;        void ShowItemSelect(string levelName, string sceneName, Action onComplete = null);&#10;    }&#10;&#10;    /// &lt;summary&gt;&#10;    ///     Manages item select screen state and interactions (Single Responsibility)&#10;    /// &lt;/summary&gt;&#10;    public class ItemSelectService : IItemSelectService&#10;    {&#10;&#10;        private ItemSelectScreen _itemSelectScreen;&#10;        private ISceneLoadService _sceneLoadService;&#10;        public bool IsActive { get; private set; }&#10;        public event Action&lt;bool&gt; OnStateChanged;&#10;&#10;        public void Initialize(ItemSelectScreen itemSelectScreen, ISceneLoadService sceneLoadService)&#10;        {&#10;            _itemSelectScreen = itemSelectScreen;&#10;            _sceneLoadService = sceneLoadService;&#10;        }&#10;&#10;        public void ShowItemSelect(string levelName, string sceneName, Action onComplete = null)&#10;        {&#10;            // If no item select screen is available, load directly&#10;            if (_itemSelectScreen == null)&#10;            {&#10;                Debug.Log($&quot;[ItemSelectService] No ItemSelectScreen available, loading level directly: {sceneName}&quot;);&#10;                _sceneLoadService?.LoadLevel(sceneName);&#10;                onComplete?.Invoke();&#10;                return;&#10;            }&#10;&#10;            SetActive(true);&#10;            _itemSelectScreen.ShowItemSelect(levelName, sceneName, () =&gt;&#10;            {&#10;                SetActive(false);&#10;                onComplete?.Invoke();&#10;            });&#10;        }&#10;&#10;        private void SetActive(bool isActive)&#10;        {&#10;            if (IsActive == isActive) return;&#10;&#10;            IsActive = isActive;&#10;            OnStateChanged?.Invoke(isActive);&#10;            Debug.Log($&quot;[ItemSelectService] State changed to: {isActive}&quot;);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/LevelSelection/Services/ILevelDisplayService.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/LevelSelection/Services/ILevelDisplayService.cs" />
              <option name="originalContent" value="using System;&#10;using System.Collections.Generic;&#10;using System.Threading.Tasks;&#10;&#10;namespace LevelSelection.Services&#10;{&#10;&#10;    /// &lt;summary&gt;&#10;    ///     Service responsible for managing level display and visual updates&#10;    /// &lt;/summary&gt;&#10;    public interface ILevelDisplayService : IDisposable&#10;    {&#10;        Task InitializeAsync(List&lt;LevelData&gt; levelData);&#10;        void SetLevelPoints(List&lt;LevelPoint&gt; levelPoints);&#10;        void SetConfig(LevelSelectionConfig config);&#10;        void RefreshVisuals();&#10;        void Activate();&#10;        void Deactivate();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using System;&#10;using System.Collections.Generic;&#10;using System.Threading.Tasks;&#10;&#10;namespace LevelSelection.Services&#10;{&#10;&#10;    /// &lt;summary&gt;&#10;    ///     Service responsible for managing level display and visual updates&#10;    /// &lt;/summary&gt;&#10;    public interface ILevelDisplayService : IDisposable&#10;    {&#10;        Task InitializeAsync(List&lt;LevelData&gt; levelData);&#10;        void SetLevelPoints(List&lt;LevelPoint&gt; levelPoints);&#10;        void SetConfig(LevelSelectionConfig config);&#10;        void RefreshVisuals();&#10;        void Activate();&#10;        void Deactivate();&#10;        List&lt;LevelPoint&gt; GetLevelPoints();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/LevelSelection/Services/ILevelSelectionServices.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/LevelSelection/Services/ILevelSelectionServices.cs" />
              <option name="originalContent" value="using System.Collections.Generic;&#10;using System.Threading.Tasks;&#10;using UnityEngine;&#10;&#10;namespace LevelSelection&#10;{&#10;    /// &lt;summary&gt;&#10;    ///     Service responsible for discovering level components in the scene&#10;    ///     Decoupled from specific GameObject hierarchy&#10;    /// &lt;/summary&gt;&#10;    public interface ILevelDiscoveryService&#10;    {&#10;        Task&lt;List&lt;LevelData&gt;&gt; DiscoverLevelsAsync();&#10;        List&lt;LevelPoint&gt; GetSortedLevelPoints();&#10;    }&#10;&#10;    /// &lt;summary&gt;&#10;    ///     Service responsible for handling level navigation&#10;    ///     Independent of input system implementation&#10;    /// &lt;/summary&gt;&#10;    public interface ILevelNavigationService&#10;    {&#10;        int CurrentIndex { get; }&#10;        LevelData CurrentLevel { get; }&#10;        Task InitializeAsync(List&lt;LevelData&gt; levelData);&#10;        void Activate();&#10;        void Deactivate();&#10;        void NavigateInDirection(Vector2 direction);&#10;        void SelectCurrentLevel();&#10;        void SetGridWidth(int gridWidth);&#10;        void SetCurrentIndex(int index);&#10;    }&#10;&#10;    /// &lt;summary&gt;&#10;    ///     Service responsible for visual display and feedback&#10;    ///     Can work with any visual components in the scene&#10;    /// &lt;/summary&gt;&#10;    public interface ILevelDisplayService&#10;    {&#10;        Task InitializeAsync(List&lt;LevelData&gt; levelData);&#10;        void Activate();&#10;        void Deactivate();&#10;        void UpdateSelection(int newIndex);&#10;        void SetConfig(LevelSelectionConfig config);&#10;        void SetLevelPoints(List&lt;LevelPoint&gt; sortedLevelPoints);&#10;        void RefreshVisuals();&#10;        void Dispose();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="// This file was empty and unused - removing all content&#10;// All level selection services are now properly implemented in their individual files:&#10;// - ISelectorService.cs&#10;// - IInputFilterService.cs  &#10;// - IAudioFeedbackService.cs&#10;// - IItemSelectService.cs&#10;// - ISceneLoadService.cs" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/LevelSelection/Services/ISelectorService.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/LevelSelection/Services/ISelectorService.cs" />
              <option name="originalContent" value="using System.Collections.Generic;&#10;using UnityEngine;&#10;&#10;namespace LevelSelection.Services&#10;{&#10;    /// &lt;summary&gt;&#10;    ///     Service responsible for managing selector visual state and movement&#10;    /// &lt;/summary&gt;&#10;    public interface ISelectorService&#10;    {&#10;        bool IsMoving { get; }&#10;        void Initialize(GameObject selectorObject);&#10;        void MoveToPosition(Vector3 targetPosition);&#10;        void SetVisible(bool visible);&#10;        void Update();&#10;        void MoveToLevel(int levelIndex);&#10;        void SetLevelPositions(Vector2[] levelPositions);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using System.Collections.Generic;&#10;using UnityEngine;&#10;&#10;namespace LevelSelection.Services&#10;{&#10;    /// &lt;summary&gt;&#10;    ///     Service responsible for managing selector visual state and movement&#10;    /// &lt;/summary&gt;&#10;    public interface ISelectorService&#10;    {&#10;        bool IsMoving { get; }&#10;        void Initialize(GameObject selectorObject);&#10;        void MoveToPosition(Vector3 targetPosition);&#10;        void SetVisible(bool visible);&#10;        void Update();&#10;        void MoveToCurrentLevel(ILevelNavigationService navigationService);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/LevelSelection/Services/LevelDisplayService.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/LevelSelection/Services/LevelDisplayService.cs" />
              <option name="originalContent" value="using System.Collections.Generic;&#10;using System.Threading.Tasks;&#10;using Core.Events;&#10;using UnityEngine;&#10;&#10;namespace LevelSelection.Services&#10;{&#10;    /// &lt;summary&gt;&#10;    ///     Display service that manages level state without visuals&#10;    ///     Since levels are invisible points, this focuses on data management&#10;    /// &lt;/summary&gt;&#10;    public class LevelDisplayService : ILevelDisplayService&#10;    {&#10;        private readonly IEventBus _eventBus;&#10;        private LevelSelectionConfig _config;&#10;        private int _currentSelection;&#10;        private bool _isActive;&#10;        private List&lt;LevelData&gt; _levelData;&#10;        private List&lt;LevelPoint&gt; _levelPoints;&#10;&#10;        public LevelDisplayService(IEventBus eventBus)&#10;        {&#10;            _eventBus = eventBus;&#10;            SubscribeToEvents();&#10;        }&#10;&#10;        public async Task InitializeAsync(List&lt;LevelData&gt; levelData)&#10;        {&#10;            _levelData = levelData;&#10;            Debug.Log($&quot;[LevelDisplayService] Initialized with {_levelData.Count} level data entries&quot;);&#10;            await Task.CompletedTask;&#10;        }&#10;&#10;        public void SetLevelPoints(List&lt;LevelPoint&gt; sortedLevelPoints)&#10;        {&#10;            _levelPoints = sortedLevelPoints;&#10;            Debug.Log($&quot;[LevelDisplayService] Received {_levelPoints?.Count ?? 0} sorted level points&quot;);&#10;            UpdateLevelStates();&#10;        }&#10;&#10;        public void SetConfig(LevelSelectionConfig config)&#10;        {&#10;            _config = config;&#10;            // Config stored but no visual updates needed for invisible points&#10;        }&#10;&#10;        public void Activate()&#10;        {&#10;            _isActive = true;&#10;            UpdateLevelStates();&#10;        }&#10;&#10;        public void Deactivate()&#10;        {&#10;            _isActive = false;&#10;        }&#10;&#10;        public void RefreshVisuals()&#10;        {&#10;            // Renamed to RefreshStates since no visuals&#10;            UpdateLevelStates();&#10;        }&#10;&#10;        public void Dispose()&#10;        {&#10;            _eventBus?.Unsubscribe&lt;LevelNavigationEvent&gt;(OnLevelNavigation);&#10;        }&#10;&#10;        public void UpdateSelection(int newIndex)&#10;        {&#10;            if (!_isActive || newIndex == _currentSelection) return;&#10;&#10;            _currentSelection = newIndex;&#10;            UpdateLevelStates();&#10;        }&#10;&#10;        private void UpdateLevelStates()&#10;        {&#10;            // Update level point states without visual changes&#10;            if (_levelPoints == null || _levelData == null) return;&#10;&#10;            for (int i = 0; i &lt; _levelPoints.Count &amp;&amp; i &lt; _levelData.Count; i++)&#10;            {&#10;                if (_levelPoints[i] != null)&#10;                {&#10;                    _levelPoints[i].SetUnlocked(_levelData[i].isUnlocked);&#10;                    _levelPoints[i].SetSelected(i == _currentSelection);&#10;                }&#10;            }&#10;        }&#10;&#10;        private void SubscribeToEvents()&#10;        {&#10;            _eventBus?.Subscribe&lt;LevelNavigationEvent&gt;(OnLevelNavigation);&#10;        }&#10;&#10;        private void OnLevelNavigation(LevelNavigationEvent navigationEvent)&#10;        {&#10;            UpdateSelection(navigationEvent.NewIndex);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using System.Collections.Generic;&#10;using System.Threading.Tasks;&#10;using Core.Events;&#10;using UnityEngine;&#10;&#10;namespace LevelSelection.Services&#10;{&#10;    /// &lt;summary&gt;&#10;    ///     Display service that manages level state without visuals&#10;    ///     Since levels are invisible points, this focuses on data management&#10;    /// &lt;/summary&gt;&#10;    public class LevelDisplayService : ILevelDisplayService&#10;    {&#10;        private readonly IEventBus _eventBus;&#10;        private LevelSelectionConfig _config;&#10;        private int _currentSelection;&#10;        private bool _isActive;&#10;        private List&lt;LevelData&gt; _levelData;&#10;        private List&lt;LevelPoint&gt; _levelPoints;&#10;&#10;        public LevelDisplayService(IEventBus eventBus)&#10;        {&#10;            _eventBus = eventBus;&#10;            SubscribeToEvents();&#10;        }&#10;&#10;        public async Task InitializeAsync(List&lt;LevelData&gt; levelData)&#10;        {&#10;            _levelData = levelData;&#10;            Debug.Log($&quot;[LevelDisplayService] Initialized with {_levelData.Count} level data entries&quot;);&#10;            await Task.CompletedTask;&#10;        }&#10;&#10;        public void SetLevelPoints(List&lt;LevelPoint&gt; sortedLevelPoints)&#10;        {&#10;            _levelPoints = sortedLevelPoints;&#10;            Debug.Log($&quot;[LevelDisplayService] Received {_levelPoints?.Count ?? 0} sorted level points&quot;);&#10;            UpdateLevelStates();&#10;        }&#10;&#10;        public void SetConfig(LevelSelectionConfig config)&#10;        {&#10;            _config = config;&#10;            // Config stored but no visual updates needed for invisible points&#10;        }&#10;&#10;        public void Activate()&#10;        {&#10;            _isActive = true;&#10;            UpdateLevelStates();&#10;        }&#10;&#10;        public void Deactivate()&#10;        {&#10;            _isActive = false;&#10;        }&#10;&#10;        public void RefreshVisuals()&#10;        {&#10;            // Renamed to RefreshStates since no visuals&#10;            UpdateLevelStates();&#10;        }&#10;&#10;        public void Dispose()&#10;        {&#10;            _eventBus?.Unsubscribe&lt;LevelNavigationEvent&gt;(OnLevelNavigation);&#10;        }&#10;&#10;        public void UpdateSelection(int newIndex)&#10;        {&#10;            if (!_isActive || newIndex == _currentSelection) return;&#10;&#10;            _currentSelection = newIndex;&#10;            UpdateLevelStates();&#10;        }&#10;&#10;        public List&lt;LevelPoint&gt; GetLevelPoints()&#10;        {&#10;            return _levelPoints;&#10;        }&#10;&#10;        private void UpdateLevelStates()&#10;        {&#10;            // Update level point states without visual changes&#10;            if (_levelPoints == null || _levelData == null) return;&#10;&#10;            for (int i = 0; i &lt; _levelPoints.Count &amp;&amp; i &lt; _levelData.Count; i++)&#10;            {&#10;                if (_levelPoints[i] != null)&#10;                {&#10;                    _levelPoints[i].SetUnlocked(_levelData[i].isUnlocked);&#10;                    _levelPoints[i].SetSelected(i == _currentSelection);&#10;                }&#10;            }&#10;        }&#10;&#10;        private void SubscribeToEvents()&#10;        {&#10;            _eventBus?.Subscribe&lt;LevelNavigationEvent&gt;(OnLevelNavigation);&#10;        }&#10;&#10;        private void OnLevelNavigation(LevelNavigationEvent navigationEvent)&#10;        {&#10;            UpdateSelection(navigationEvent.NewIndex);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/LevelSelection/Services/SelectorService.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/LevelSelection/Services/SelectorService.cs" />
              <option name="originalContent" value="using System.Collections.Generic;&#10;using UnityEngine;&#10;&#10;namespace LevelSelection.Services&#10;{&#10;    /// &lt;summary&gt;&#10;    ///     Handles selector visual state and movement (Single Responsibility)&#10;    /// &lt;/summary&gt;&#10;    public class SelectorService : ISelectorService&#10;    {&#10;        private const float DefaultMoveSpeed = 5f;&#10;        private const float DefaultSnapThreshold = 0.1f;&#10;        &#10;        private Vector3[] _levelPositions;&#10;        private GameObject _selectorObject;&#10;        private Vector3 _targetPosition;&#10;&#10;        public bool IsMoving { get; private set; }&#10;&#10;        public void Initialize(GameObject selectorObject)&#10;        {&#10;            _selectorObject = selectorObject;&#10;        }&#10;&#10;        public void SetLevelPositions(Vector3[] levelPositions)&#10;        {&#10;            _levelPositions = levelPositions;&#10;        }&#10;&#10;        public void MoveToPosition(Vector3 targetPosition)&#10;        {&#10;            if (_selectorObject == null) return;&#10;&#10;            float distance = Vector3.Distance(_selectorObject.transform.position, targetPosition);&#10;            if (distance &gt; 0.01f)&#10;            {&#10;                _targetPosition = targetPosition;&#10;                IsMoving = true;&#10;            }&#10;        }&#10;&#10;        public void MoveToLevel(int levelIndex)&#10;        {&#10;            if (_levelPositions == null || levelIndex &lt; 0 || levelIndex &gt;= _levelPositions.Length) return;&#10;&#10;            Vector3 targetPosition = _levelPositions[levelIndex];&#10;            MoveToPosition(targetPosition);&#10;        }&#10;&#10;        public void SetVisible(bool visible)&#10;        {&#10;            if (_selectorObject != null)&#10;            {&#10;                _selectorObject.SetActive(visible);&#10;            }&#10;        }&#10;&#10;        public void Update()&#10;        {&#10;            if (!IsMoving || _selectorObject == null) return;&#10;&#10;            _selectorObject.transform.position = Vector3.MoveTowards(&#10;                _selectorObject.transform.position,&#10;                _targetPosition,&#10;                DefaultMoveSpeed * Time.deltaTime&#10;            );&#10;&#10;            if (Vector3.Distance(_selectorObject.transform.position, _targetPosition) &lt; DefaultSnapThreshold)&#10;            {&#10;                _selectorObject.transform.position = _targetPosition;&#10;                IsMoving = false;&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using System.Collections.Generic;&#10;using UnityEngine;&#10;&#10;namespace LevelSelection.Services&#10;{&#10;    /// &lt;summary&gt;&#10;    ///     Handles selector visual state and movement (Single Responsibility)&#10;    /// &lt;/summary&gt;&#10;    public class SelectorService : ISelectorService&#10;    {&#10;        private const float DefaultMoveSpeed = 5f;&#10;        private const float DefaultSnapThreshold = 0.1f;&#10;        &#10;        private GameObject _selectorObject;&#10;        private Vector3 _targetPosition;&#10;&#10;        public bool IsMoving { get; private set; }&#10;&#10;        public void Initialize(GameObject selectorObject)&#10;        {&#10;            _selectorObject = selectorObject;&#10;        }&#10;&#10;        public void MoveToPosition(Vector3 targetPosition)&#10;        {&#10;            if (_selectorObject == null) return;&#10;&#10;            float distance = Vector3.Distance(_selectorObject.transform.position, targetPosition);&#10;            if (distance &gt; 0.01f)&#10;            {&#10;                _targetPosition = targetPosition;&#10;                IsMoving = true;&#10;            }&#10;        }&#10;&#10;        public void MoveToCurrentLevel(ILevelNavigationService navigationService)&#10;        {&#10;            if (navigationService?.CurrentLevel != null)&#10;            {&#10;                MoveToPosition(navigationService.CurrentLevel.mapPosition);&#10;            }&#10;        }&#10;&#10;        public void SetVisible(bool visible)&#10;        {&#10;            if (_selectorObject != null)&#10;            {&#10;                _selectorObject.SetActive(visible);&#10;            }&#10;        }&#10;&#10;        public void Update()&#10;        {&#10;            if (!IsMoving || _selectorObject == null) return;&#10;&#10;            _selectorObject.transform.position = Vector3.MoveTowards(&#10;                _selectorObject.transform.position,&#10;                _targetPosition,&#10;                DefaultMoveSpeed * Time.deltaTime&#10;            );&#10;&#10;            if (Vector3.Distance(_selectorObject.transform.position, _targetPosition) &lt; DefaultSnapThreshold)&#10;            {&#10;                _selectorObject.transform.position = _targetPosition;&#10;                IsMoving = false;&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/LevelSelection/Services/_REMOVED_ILevelSelectionServices.txt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/LevelSelection/Services/_REMOVED_ILevelSelectionServices.txt" />
              <option name="updatedContent" value="// This file has been removed as it was empty and unused&#10;// All level selection services are now properly implemented in their individual files" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Player/Components/LedgeAssistController.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Player/Components/LedgeAssistController.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;&#10;namespace Player.Components&#10;{&#10;    /// &lt;summary&gt;&#10;    /// Provides ledge assist functionality for one-way platforms.&#10;    /// Helps players land on platforms when they jump near the edge.&#10;    /// &lt;/summary&gt;&#10;    public class LedgeAssistController : MonoBehaviour&#10;    {&#10;        [Header(&quot;Ledge Assist Settings&quot;)]&#10;        [SerializeField] private float assistRange = 0.5f;&#10;        [SerializeField] private float assistStrength = 2f;&#10;        [SerializeField] private float assistDuration = 0.2f;&#10;        [SerializeField] private LayerMask platformLayers = -1;&#10;        [SerializeField] private bool debugMode = false;&#10;        &#10;        [Header(&quot;Detection&quot;)]&#10;        [SerializeField] private Vector2 detectionBoxSize = new Vector2(1.2f, 0.5f);&#10;        [SerializeField] private Vector2 detectionOffset = new Vector2(0f, 0.3f);&#10;        &#10;        private Rigidbody2D _rigidbody;&#10;        private bool _isAssisting;&#10;        private float _assistTimer;&#10;        private Vector3 _targetPlatformPosition;&#10;        private bool _wasGrounded;&#10;        &#10;        // Events for integration with other systems&#10;        public System.Action OnLedgeAssistTriggered;&#10;        public System.Action OnLedgeAssistCompleted;&#10;        &#10;        private void Awake()&#10;        {&#10;            _rigidbody = GetComponent&lt;Rigidbody2D&gt;();&#10;            if (_rigidbody == null)&#10;            {&#10;                Debug.LogError(&quot;[LedgeAssistController] Rigidbody2D component required!&quot;);&#10;            }&#10;        }&#10;        &#10;        private void Update()&#10;        {&#10;            HandleLedgeAssist();&#10;        }&#10;        &#10;        private void HandleLedgeAssist()&#10;        {&#10;            if (_isAssisting)&#10;            {&#10;                UpdateAssist();&#10;                return;&#10;            }&#10;            &#10;            // Check if we should trigger ledge assist&#10;            if (ShouldTriggerLedgeAssist())&#10;            {&#10;                TriggerLedgeAssist();&#10;            }&#10;        }&#10;        &#10;        private bool ShouldTriggerLedgeAssist()&#10;        {&#10;            // Only assist when player is moving upward (jumping)&#10;            if (_rigidbody.velocity.y &lt;= 0.1f) return false;&#10;            &#10;            // Don't assist if already grounded&#10;            if (IsGrounded()) return false;&#10;            &#10;            // Check if there's a platform edge nearby&#10;            return DetectNearbyPlatformEdge(out _targetPlatformPosition);&#10;        }&#10;        &#10;        private bool DetectNearbyPlatformEdge(out Vector3 platformPosition)&#10;        {&#10;            platformPosition = Vector3.zero;&#10;            &#10;            // Cast a box above the player to detect platforms&#10;            Vector2 castPosition = (Vector2)transform.position + detectionOffset;&#10;            RaycastHit2D[] hits = Physics2D.BoxCastAll(&#10;                castPosition,&#10;                detectionBoxSize,&#10;                0f,&#10;                Vector2.up,&#10;                0.1f,&#10;                platformLayers&#10;            );&#10;            &#10;            foreach (var hit in hits)&#10;            {&#10;                // Check if this is a one-way platform&#10;                PlatformEffector2D platformEffector = hit.collider.GetComponent&lt;PlatformEffector2D&gt;();&#10;                if (platformEffector != null &amp;&amp; platformEffector.useOneWay)&#10;                {&#10;                    // Check if player is approaching the platform from the side&#10;                    Vector2 platformCenter = hit.collider.bounds.center;&#10;                    Vector2 playerPosition = transform.position;&#10;                    &#10;                    // Find the closest edge point on the platform&#10;                    Vector2 closestPoint = hit.collider.ClosestPoint(playerPosition);&#10;                    &#10;                    // Check if we're within assist range horizontally&#10;                    float horizontalDistance = Mathf.Abs(playerPosition.x - closestPoint.x);&#10;                    float verticalDistance = closestPoint.y - playerPosition.y;&#10;                    &#10;                    if (horizontalDistance &lt;= assistRange &amp;&amp; verticalDistance &gt; 0 &amp;&amp; verticalDistance &lt;= assistRange * 2)&#10;                    {&#10;                        platformPosition = new Vector3(closestPoint.x, hit.collider.bounds.max.y + 0.1f, transform.position.z);&#10;                        return true;&#10;                    }&#10;                }&#10;            }&#10;            &#10;            return false;&#10;        }&#10;        &#10;        private void TriggerLedgeAssist()&#10;        {&#10;            _isAssisting = true;&#10;            _assistTimer = assistDuration;&#10;            &#10;            // Apply gentle pull toward the platform&#10;            Vector2 direction = (_targetPlatformPosition - transform.position).normalized;&#10;            direction.y = Mathf.Max(0.2f, direction.y); // Ensure some upward momentum&#10;            &#10;            OnLedgeAssistTriggered?.Invoke();&#10;            &#10;            if (debugMode)&#10;            {&#10;                Debug.Log($&quot;[LedgeAssistController] Ledge assist triggered toward {_targetPlatformPosition}&quot;);&#10;            }&#10;        }&#10;        &#10;        private void UpdateAssist()&#10;        {&#10;            _assistTimer -= Time.deltaTime;&#10;            &#10;            if (_assistTimer &lt;= 0 || IsGrounded())&#10;            {&#10;                _isAssisting = false;&#10;                OnLedgeAssistCompleted?.Invoke();&#10;                &#10;                if (debugMode)&#10;                {&#10;                    Debug.Log(&quot;[LedgeAssistController] Ledge assist completed&quot;);&#10;                }&#10;                return;&#10;            }&#10;            &#10;            // Apply gentle force toward the platform&#10;            Vector2 direction = (_targetPlatformPosition - transform.position).normalized;&#10;            Vector2 assistForce = direction * assistStrength * (_assistTimer / assistDuration);&#10;            &#10;            // Only apply horizontal assist if we're still moving upward&#10;            if (_rigidbody.velocity.y &gt; 0)&#10;            {&#10;                assistForce.y *= 0.3f; // Reduce vertical component&#10;                _rigidbody.AddForce(assistForce, ForceMode2D.Force);&#10;            }&#10;        }&#10;        &#10;        private bool IsGrounded()&#10;        {&#10;            // Simple ground check - you can replace this with your existing ground detection&#10;            Vector2 boxCenter = (Vector2)transform.position + Vector2.down * 0.1f;&#10;            return Physics2D.OverlapBox(boxCenter, new Vector2(0.8f, 0.1f), 0f, platformLayers) != null;&#10;        }&#10;        &#10;        // Public methods for external control&#10;        public void SetAssistEnabled(bool enabled)&#10;        {&#10;            this.enabled = enabled;&#10;        }&#10;        &#10;        public bool IsCurrentlyAssisting =&gt; _isAssisting;&#10;        &#10;        private void OnDrawGizmosSelected()&#10;        {&#10;            if (!debugMode) return;&#10;            &#10;            // Draw detection box&#10;            Gizmos.color = Color.yellow;&#10;            Vector3 boxCenter = transform.position + (Vector3)detectionOffset;&#10;            Gizmos.DrawWireCube(boxCenter, detectionBoxSize);&#10;            &#10;            // Draw assist range&#10;            Gizmos.color = Color.green;&#10;            Gizmos.DrawWireSphere(transform.position, assistRange);&#10;            &#10;            // Draw target platform position when assisting&#10;            if (_isAssisting)&#10;            {&#10;                Gizmos.color = Color.red;&#10;                Gizmos.DrawWireSphere(_targetPlatformPosition, 0.2f);&#10;                Gizmos.DrawLine(transform.position, _targetPlatformPosition);&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Player/Components/PlayerHealthController.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Player/Components/PlayerHealthController.cs" />
              <option name="originalContent" value="using Core;&#10;using Core.Events;&#10;using Health.Core;&#10;using Health.Interfaces;&#10;using Health.Views;&#10;using Player.Interfaces;&#10;using UnityEngine;&#10;using VContainer;&#10;&#10;namespace Player.Components&#10;{&#10;    public class PlayerHealthController : HealthComponent, IBypassableDamageable&#10;    {&#10;        [SerializeField] private BarsHealthView healthView;&#10;        private IEventBus _eventBus;&#10;        private GameFlowManager _gameFlowManager;&#10;        private IHealthView _healthView;&#10;        private IInvincibility _invincibility;&#10;        private IPlayerLivesService _livesService;&#10;        private IShield _shield;&#10;&#10;        #region VContainer Injection&#10;&#10;        [Inject]&#10;        public void Construct(IEventBus eventBus, IPlayerLivesService livesService, GameFlowManager gameFlowManager)&#10;        {&#10;            _eventBus = eventBus;&#10;            _livesService = livesService;&#10;            _gameFlowManager = gameFlowManager;&#10;        }&#10;&#10;        #endregion&#10;&#10;        #region Unity Lifecycle&#10;&#10;        private new void Awake()&#10;        {&#10;            base.Awake();&#10;            _healthView = healthView;&#10;            _shield = GetComponent&lt;IShield&gt;();&#10;            _invincibility = GetComponent&lt;IInvincibility&gt;();&#10;        }&#10;&#10;        protected void Start()&#10;        {&#10;            _healthView.UpdateDisplay(CurrentHp, MaxHp);&#10;            OnHealthChanged += HandleHealthChanged;&#10;            OnDeath += HandleHealthEmpty;&#10;        }&#10;&#10;        protected void OnDestroy()&#10;        {&#10;            OnHealthChanged -= HandleHealthChanged;&#10;            OnDeath -= HandleHealthEmpty;&#10;        }&#10;&#10;        #endregion&#10;&#10;        #region Event Handlers&#10;&#10;        private void HandleHealthChanged(int hp, int maxHp)&#10;        {&#10;            _healthView.UpdateDisplay(hp, maxHp);&#10;            _eventBus?.Publish(new PlayerHealthChangedEvent&#10;            {&#10;                CurrentHp = hp,&#10;                MaxHp = maxHp,&#10;                Damage = maxHp - hp,&#10;                Timestamp = Time.time&#10;            });&#10;        }&#10;&#10;        private void HandleHealthEmpty()&#10;        {&#10;            if (_livesService == null)&#10;            {&#10;                Debug.LogError(&quot;[PlayerHealthController] _livesService is null. Ensure it is properly injected.&quot;);&#10;                return;&#10;            }&#10;&#10;            if (!_gameFlowManager)&#10;            {&#10;                Debug.LogError(&quot;[PlayerHealthController] _gameFlowManager is null. Ensure it is properly injected.&quot;);&#10;                return;&#10;            }&#10;&#10;            if (_livesService.TryUseLife())&#10;            {&#10;                Debug.Log(&#10;                    $&quot;[PlayerHealthController] Used a life, waiting for scene reload. Lives remaining: {_livesService.CurrentLives}&quot;);&#10;&#10;                return;&#10;            }&#10;&#10;            Debug.Log(&quot;[PlayerHealthController] No lives left, calling HandlePlayerDeath.&quot;);&#10;            _gameFlowManager.HandlePlayerDeath(transform.position);&#10;        }&#10;&#10;        #endregion&#10;&#10;        #region Damage Handling&#10;&#10;        public override void Damage(int amount, GameObject source = null)&#10;        {&#10;            if (_invincibility is { IsInvincible: true })&#10;                return;&#10;&#10;            if (_shield is { IsActive: true })&#10;            {&#10;                Debug.Log(&quot;[PlayerHealthController] Shield active, breaking shield.&quot;);&#10;                _shield.BreakShield(amount);&#10;                return;&#10;            }&#10;&#10;            base.Damage(amount, source);&#10;        }&#10;&#10;        /// &lt;summary&gt;&#10;        ///     Damage that bypasses transformation shield (used by continuous damage, etc.)&#10;        /// &lt;/summary&gt;&#10;        public void DamageBypass(int amount)&#10;        {&#10;            base.Damage(amount, gameObject);&#10;        }&#10;&#10;        #endregion&#10;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using Core;&#13;&#10;using Health.Core;&#13;&#10;using Health.Interfaces;&#13;&#10;using Health.Views;&#13;&#10;using Player.Interfaces;&#13;&#10;using UnityEngine;&#13;&#10;using VContainer;&#13;&#10;&#13;&#10;namespace Player.Components&#13;&#10;{&#13;&#10;    public class PlayerHealthController : HealthComponent, IBypassableDamageable&#13;&#10;    {&#13;&#10;        [SerializeField] private BarsHealthView healthView;&#13;&#10;        private GameFlowManager _gameFlowManager;&#13;&#10;        private IHealthView _healthView;&#13;&#10;        private IInvincibility _invincibility;&#13;&#10;        private IPlayerLivesService _livesService;&#13;&#10;        private IShield _shield;&#13;&#10;&#13;&#10;        #region VContainer Injection&#13;&#10;&#13;&#10;        [Inject]&#13;&#10;        public void Construct(IPlayerLivesService livesService, GameFlowManager gameFlowManager)&#13;&#10;        {&#13;&#10;            _livesService = livesService;&#13;&#10;            _gameFlowManager = gameFlowManager;&#13;&#10;        }&#13;&#10;&#13;&#10;        #endregion&#13;&#10;&#13;&#10;        #region Unity Lifecycle&#13;&#10;&#13;&#10;        private new void Awake()&#13;&#10;        {&#13;&#10;            base.Awake();&#13;&#10;            _healthView = healthView;&#13;&#10;            _shield = GetComponent&lt;IShield&gt;();&#13;&#10;            _invincibility = GetComponent&lt;IInvincibility&gt;();&#13;&#10;        }&#13;&#10;&#13;&#10;        protected void Start()&#13;&#10;        {&#13;&#10;            _healthView.UpdateDisplay(CurrentHp, MaxHp);&#13;&#10;            OnHealthChanged += HandleHealthChanged;&#13;&#10;            OnDeath += HandleHealthEmpty;&#13;&#10;        }&#13;&#10;&#13;&#10;        protected void OnDestroy()&#13;&#10;        {&#13;&#10;            OnHealthChanged -= HandleHealthChanged;&#13;&#10;            OnDeath -= HandleHealthEmpty;&#13;&#10;        }&#13;&#10;&#13;&#10;        #endregion&#13;&#10;&#13;&#10;        #region Event Handlers&#13;&#10;&#13;&#10;        private void HandleHealthChanged(int hp, int maxHp)&#13;&#10;        {&#13;&#10;            _healthView.UpdateDisplay(hp, maxHp);&#13;&#10;            // Health changes are now handled purely as UI updates&#13;&#10;            // No need to publish events for every health change&#13;&#10;        }&#13;&#10;&#13;&#10;        private void HandleHealthEmpty()&#13;&#10;        {&#13;&#10;            if (_livesService == null)&#13;&#10;            {&#13;&#10;                Debug.LogError(&quot;[PlayerHealthController] _livesService is null. Ensure it is properly injected.&quot;);&#13;&#10;                return;&#13;&#10;            }&#13;&#10;&#13;&#10;            if (!_gameFlowManager)&#13;&#10;            {&#13;&#10;                Debug.LogError(&quot;[PlayerHealthController] _gameFlowManager is null. Ensure it is properly injected.&quot;);&#13;&#10;                return;&#13;&#10;            }&#13;&#10;&#13;&#10;            if (_livesService.TryUseLife())&#13;&#10;            {&#13;&#10;                return;&#13;&#10;            }&#13;&#10;&#13;&#10;            _gameFlowManager.HandlePlayerDeath(transform.position);&#13;&#10;        }&#13;&#10;&#13;&#10;        #endregion&#13;&#10;&#13;&#10;        #region Damage Handling&#13;&#10;&#13;&#10;        public override void Damage(int amount, GameObject source = null)&#13;&#10;        {&#13;&#10;            if (_invincibility is { IsInvincible: true })&#13;&#10;                return;&#13;&#10;&#13;&#10;            if (_shield is { IsActive: true })&#13;&#10;            {&#13;&#10;                Debug.Log(&quot;[PlayerHealthController] Shield active, breaking shield.&quot;);&#13;&#10;                _shield.BreakShield(amount);&#13;&#10;                return;&#13;&#10;            }&#13;&#10;&#13;&#10;            base.Damage(amount, source);&#13;&#10;        }&#13;&#10;&#13;&#10;        /// &lt;summary&gt;&#13;&#10;        ///     Damage that bypasses transformation shield (used by continuous damage, etc.)&#13;&#10;        /// &lt;/summary&gt;&#13;&#10;        public void DamageBypass(int amount)&#13;&#10;        {&#13;&#10;            base.Damage(amount, gameObject);&#13;&#10;        }&#13;&#10;&#13;&#10;        #endregion&#13;&#10;&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Player/Components/PlayerInvincibleDamageDealer.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Player/Components/PlayerInvincibleDamageDealer.cs" />
              <option name="updatedContent" value="using Health.Interfaces;&#10;using UnityEngine;&#10;&#10;namespace Player.Components&#10;{&#10;    /// &lt;summary&gt;&#10;    /// When enabled, instantly kills any damageable object the player collides with.&#10;    /// Should be enabled only when the player is invincible.&#10;    /// &lt;/summary&gt;&#10;    [DisallowMultipleComponent]&#10;    public class PlayerInvincibleDamageDealer : MonoBehaviour, IDamageDealer&#10;    {&#10;        [SerializeField] private int damageAmount = 9999; // &quot;Kill&quot; value&#10;        [SerializeField] private LayerMask targetLayers = ~0; // All by default&#10;&#10;        public int GetDamageAmount() =&gt; damageAmount;&#10;&#10;        private void OnCollisionEnter2D(Collision2D collision)&#10;        {&#10;            if (((1 &lt;&lt; collision.gameObject.layer) &amp; targetLayers) == 0)&#10;                return;&#10;            var damageable = collision.gameObject.GetComponent&lt;IDamageable&gt;();&#10;            if (damageable != null)&#10;            {&#10;                damageable.Damage(damageAmount, gameObject);&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Pooling/PooledObject.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Pooling/PooledObject.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;&#10;namespace Pooling&#10;{&#10;    public class PooledObject : MonoBehaviour&#10;    {&#10;        public GameObject prefab;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>