<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Collectables/Score/ScoreCollectionTracker.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Collectables/Score/ScoreCollectionTracker.cs" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Collectables/Score/ScoreService.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Collectables/Score/ScoreService.cs" />
              <option name="originalContent" value="using Core.Data;&#10;using Player.Interfaces;&#10;&#10;namespace Collectables.Score&#10;{&#10;    public class ScoreService : IScoreService&#10;    {&#10;        private IGameDataService _gameDataService;&#10;        private IPlayerLivesService _livesService;&#10;        private const int OneUpThreshold = 30;&#10;        public int CurrentScore =&gt; _gameDataService?.CurrentData?.score ?? 0;&#10;        public void AddScore(int amount)&#10;        {&#10;            _gameDataService?.UpdateScore(CurrentScore + amount);&#10;        }&#10;        public void ResetScore()&#10;        {&#10;            _gameDataService?.UpdateScore(0);&#10;        }&#10;        public void AddFruitCollected()&#10;        public void AddFruitCollected()&#10;            _gameDataService?.AddFruitCollected();&#10;            int fruitCount = FruitCollectedCount;&#10;            if (fruitCount &gt; 0 &amp;&amp; fruitCount % OneUpThreshold == 0)&#10;            {&#10;                _livesService?.AddLife();&#10;            }&#10;                _livesService?.AddLife();&#10;        [Inject]&#10;        public void Construct(IGameDataService gameDataService, IPlayerLivesService livesService)&#10;        {&#10;            _gameDataService = gameDataService;&#10;            _livesService = livesService;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using Core.Data;&#10;using Player.Interfaces;&#10;using UnityEngine;&#10;using VContainer;&#10;&#10;namespace Collectables.Score&#10;{&#10;    public class ScoreService : IScoreService&#10;    {&#10;        private IGameDataService _gameDataService;&#10;        private IPlayerLivesService _livesService;&#10;        private const int OneUpThreshold = 30;&#10;        public int CurrentScore =&gt; _gameDataService?.CurrentData?.score ?? 0;&#10;        public void AddScore(int amount)&#10;        {&#10;            _gameDataService?.UpdateScore(CurrentScore + amount);&#10;        }&#10;        public void ResetScore()&#10;        {&#10;            _gameDataService?.UpdateScore(0);&#10;        }&#10;        public void AddFruitCollected(Vector3 collectPosition)&#10;        {&#10;            _gameDataService?.AddFruitCollected();&#10;            int fruitCount = FruitCollectedCount;&#10;            if (fruitCount &gt; 0 &amp;&amp; fruitCount % OneUpThreshold == 0)&#10;            {&#10;                _livesService?.AddLife(collectPosition);&#10;                Debug.Log(&quot;One-up awarded! Player gained an extra life.&quot;);&#10;            }&#10;        }&#10;        public int FruitCollectedCount =&gt; _gameDataService?.CurrentData?.fruitCollected ?? 0;&#10;        [Inject]&#10;        public void Construct(IGameDataService gameDataService, IPlayerLivesService livesService)&#10;        {&#10;            _gameDataService = gameDataService;&#10;            _livesService = livesService;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Core/Data/GameData.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Core/Data/GameData.cs" />
              <option name="originalContent" value="using System;&#10;using UnityEngine;&#10;&#10;namespace Core.Data&#10;{&#10;    [Serializable]&#10;    public class GameData&#10;    {&#10;        [Header(&quot;Player Data&quot;)] public int lives = 3;&#10;        [Header(&quot;Player Data&quot;)] public const int MaxLives = 3;&#10;&#10;        public int score;&#10;&#10;        [Header(&quot;Level Progress&quot;)] public string currentLevel = &quot;Level_01&quot;;&#10;&#10;        public float bestTime = float.MaxValue;&#10;&#10;        [Header(&quot;Power-ups&quot;)] public bool hasFireball;&#10;&#10;        public bool hasAxe;&#10;&#10;        [Header(&quot;Settings&quot;)] public float musicVolume = 1.0f;&#10;&#10;        public float sfxVolume = 1.0f;&#10;&#10;        [Header(&quot;Collectables&quot;)]&#10;        public int fruitCollected = 0;&#10;&#10;        // Constructor for easy initialization&#10;        public GameData()&#10;        {&#10;            // Default values are set by field initializers&#10;        }&#10;&#10;        // Copy constructor&#10;        public GameData(GameData other)&#10;        {&#10;            lives = other.lives;&#10;            score = other.score;&#10;            currentLevel = other.currentLevel;&#10;            bestTime = other.bestTime;&#10;            hasFireball = other.hasFireball;&#10;            hasAxe = other.hasAxe;&#10;            musicVolume = other.musicVolume;&#10;            sfxVolume = other.sfxVolume;&#10;            fruitCollected = other.fruitCollected;&#10;        }&#10;&#10;        // Reset to default values&#10;        public void Reset()&#10;        {&#10;            lives = 3;&#10;            score = 0;&#10;            currentLevel = &quot;Level_01&quot;;&#10;            bestTime = float.MaxValue;&#10;            hasFireball = false;&#10;            hasAxe = false;&#10;            musicVolume = 1.0f;&#10;            sfxVolume = 1.0f;&#10;            fruitCollected = 0;&#10;        }&#10;" />
              <option name="updatedContent" value="using System;&#10;using UnityEngine;&#10;&#10;namespace Core.Data&#10;{&#10;    [Serializable]&#10;    public class GameData&#10;    {&#10;        [Header(&quot;Player Data&quot;)] public int lives = 3;&#10;        [Header(&quot;Player Data&quot;)] public const int MaxLives = 3;&#10;&#10;        public int score;&#10;&#10;        [Header(&quot;Level Progress&quot;)] public string currentLevel = &quot;Level_01&quot;;&#10;&#10;        public float bestTime = float.MaxValue;&#10;&#10;        [Header(&quot;Power-ups&quot;)] public bool hasFireball;&#10;&#10;        public bool hasAxe;&#10;&#10;        [Header(&quot;Settings&quot;)] public float musicVolume = 1.0f;&#10;&#10;        public float sfxVolume = 1.0f;&#10;&#10;        [Header(&quot;Collectables&quot;)]&#10;        public int fruitCollected = 0;&#10;&#10;        // Constructor for easy initialization&#10;        public GameData()&#10;        {&#10;            // Default values are set by field initializers&#10;        }&#10;&#10;        // Copy constructor&#10;        public GameData(GameData other)&#10;        {&#10;            lives = other.lives;&#10;            score = other.score;&#10;            currentLevel = other.currentLevel;&#10;            bestTime = other.bestTime;&#10;            hasFireball = other.hasFireball;&#10;            hasAxe = other.hasAxe;&#10;            musicVolume = other.musicVolume;&#10;            sfxVolume = other.sfxVolume;&#10;            fruitCollected = other.fruitCollected;&#10;        }&#10;&#10;        // Reset to default values&#10;        public void Reset()&#10;        {&#10;            lives = MaxLives;&#10;            score = 0;&#10;            currentLevel = &quot;Level_01&quot;;&#10;            bestTime = float.MaxValue;&#10;            hasFireball = false;&#10;            hasAxe = false;&#10;            musicVolume = 1.0f;&#10;            sfxVolume = 1.0f;&#10;            fruitCollected = 0;&#10;        }&#10;&#10;        private static GameData CreateDefaultData() =&gt;&#10;            new()&#10;            {&#10;                lives = MaxLives,&#10;                score = 0,&#10;                currentLevel = &quot;Level_01&quot;,&#10;                bestTime = float.MaxValue,&#10;                hasFireball = false,&#10;                hasAxe = false,&#10;                musicVolume = 1.0f,&#10;                sfxVolume = 1.0f,&#10;                fruitCollected = 0&#10;            };&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Core/Events/GameEvents.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Core/Events/GameEvents.cs" />
              <option name="originalContent" value="using UnityEngine;&#10;&#10;namespace Core.Events&#10;{&#10;    public enum GameState&#10;    {&#10;        MainMenu,&#10;        Loading,&#10;        Playing,&#10;        Paused,&#10;        GameOver,&#10;        Victory,&#10;        Restarting&#10;    }&#10;&#10;    public struct GameStateChangedEvent&#10;    {&#10;        public GameState PreviousState;&#10;        public GameState NewState;&#10;        public float Timestamp;&#10;    }&#10;&#10;    public struct PlayerHealthChangedEvent&#10;    {&#10;        public int CurrentHp;&#10;        public int MaxHp;&#10;        public int Damage;&#10;        public float Timestamp;&#10;    }&#10;&#10;    public struct PlayerLivesChangedEvent&#10;    {&#10;        public int CurrentLives;&#10;        public int MaxLives;&#10;        public float Timestamp;&#10;    }&#10;&#10;    public struct ScoreChangedEvent&#10;    {&#10;        public Vector3 Position;&#10;        public int ScoreAmount; // Delta amount&#10;        public int TotalScore; // Overall score&#10;    }&#10;&#10;    // Base event structure for consistency&#10;    public interface IGameEvent&#10;    {&#10;        float Timestamp { get; }&#10;    }&#10;&#10;    public struct PlayerDeathEvent : IGameEvent&#10;    {&#10;        public float Timestamp { get; set; }&#10;        public Vector3 DeathPosition;&#10;    }&#10;&#10;    public struct LevelStartedEvent : IGameEvent&#10;    {&#10;        public float Timestamp { get; set; }&#10;        public string LevelName;&#10;    }&#10;&#10;    public struct LevelCompletedEvent : IGameEvent&#10;    {&#10;        public float Timestamp { get; set; }&#10;        public string LevelName;&#10;        public float CompletionTime;&#10;    }&#10;&#10;&#10;    public struct GameOverEvent : IGameEvent&#10;    {&#10;        public float Timestamp { get; set; }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using UnityEngine;&#10;&#10;namespace Core.Events&#10;{&#10;    public enum GameState&#10;    {&#10;        MainMenu,&#10;        Loading,&#10;        Playing,&#10;        Paused,&#10;        GameOver,&#10;        Victory,&#10;        Restarting&#10;    }&#10;&#10;    public struct GameStateChangedEvent&#10;    {&#10;        public GameState PreviousState;&#10;        public GameState NewState;&#10;        public float Timestamp;&#10;    }&#10;&#10;    public struct PlayerHealthChangedEvent&#10;    {&#10;        public int CurrentHp;&#10;        public int MaxHp;&#10;        public int Damage;&#10;        public float Timestamp;&#10;    }&#10;&#10;    public struct PlayerLivesChangedEvent&#10;    {&#10;        public int PreviousLives;&#10;        public int CurrentLives;&#10;        public int MaxLives;&#10;        public float Timestamp;&#10;    }&#10;&#10;    public struct ScoreChangedEvent&#10;    {&#10;        public Vector3 Position;&#10;        public int ScoreAmount; // Delta amount&#10;        public int TotalScore; // Overall score&#10;    }&#10;&#10;    // Base event structure for consistency&#10;    public interface IGameEvent&#10;    {&#10;        float Timestamp { get; }&#10;    }&#10;&#10;    public struct PlayerDeathEvent : IGameEvent&#10;    {&#10;        public float Timestamp { get; set; }&#10;        public Vector3 DeathPosition;&#10;    }&#10;&#10;    public struct LevelStartedEvent : IGameEvent&#10;    {&#10;        public float Timestamp { get; set; }&#10;        public string LevelName;&#10;    }&#10;&#10;    public struct LevelCompletedEvent : IGameEvent&#10;    {&#10;        public float Timestamp { get; set; }&#10;        public string LevelName;&#10;        public float CompletionTime;&#10;    }&#10;&#10;&#10;    public struct GameOverEvent : IGameEvent&#10;    {&#10;        public float Timestamp { get; set; }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Core/GameFlowManager.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Core/GameFlowManager.cs" />
              <option name="originalContent" value="using System;&#10;using System.Threading.Tasks;&#10;using Core.Events;&#10;using Player.Components;&#10;using UnityEngine;&#10;using UnityEngine.SceneManagement;&#10;using VContainer;&#10;&#10;namespace Core&#10;{&#10;    /// &lt;summary&gt;&#10;    ///     All aspects of game flow including state transitions, level management, and game progression.&#10;    /// &lt;/summary&gt;&#10;    public class GameFlowManager : MonoBehaviour&#10;    {&#10;&#10;        #region VContainer Injection&#10;&#10;        [Inject]&#10;        public void Construct(IEventBus eventBus)&#10;        {&#10;            _eventBus = eventBus;&#10;            SubscribeToEvents();&#10;        }&#10;&#10;        #endregion&#10;&#10;        #region Fields&#10;&#10;        [Header(&quot;Game Settings&quot;)] [SerializeField]&#10;        private bool autoStartGame = true;&#10;&#10;        [SerializeField] private float restartDelay = 2f;&#10;&#10;        private string _currentLevelName = &quot;Unknown&quot;;&#10;        private float _levelStartTime;&#10;        private IEventBus _eventBus;&#10;&#10;        #endregion&#10;&#10;        #region Properties&#10;&#10;        public GameState CurrentState { get; private set; } = GameState.MainMenu;&#10;&#10;        public bool IsPlaying =&gt; CurrentState == GameState.Playing;&#10;&#10;        #endregion&#10;&#10;        #region Unity Lifecycle&#10;&#10;        private void Start()&#10;        {&#10;            _currentLevelName = GetCurrentLevelName();&#10;&#10;            if (autoStartGame)&#10;            {&#10;                StartGame();&#10;            }&#10;        }&#10;&#10;        private void OnDestroy()&#10;        {&#10;            UnsubscribeFromEvents();&#10;        }&#10;&#10;        #endregion&#10;&#10;        #region Public API - Game State Control&#10;&#10;        public void StartGame()&#10;        {&#10;            ChangeState(GameState.Playing);&#10;            _levelStartTime = Time.time;&#10;&#10;            PublishLevelStartedEvent();&#10;        }&#10;&#10;        public void PauseGame()&#10;        {&#10;            if (CurrentState == GameState.Playing)&#10;                ChangeState(GameState.Paused);&#10;        }&#10;&#10;        public void ResumeGame()&#10;        {&#10;            if (CurrentState == GameState.Paused)&#10;                ChangeState(GameState.Playing);&#10;        }&#10;&#10;        public void RestartLevel()&#10;        {&#10;            SceneManager.LoadScene(SceneManager.GetActiveScene().name);&#10;        }&#10;&#10;        #endregion&#10;&#10;        #region Public API - Game Flow Control&#10;&#10;        public void HandlePlayerDeath(Vector3 deathPosition)&#10;        {&#10;            _eventBus?.Publish(new PlayerDeathEvent&#10;            {&#10;                DeathPosition = deathPosition,&#10;                Timestamp = Time.time&#10;            });&#10;        }&#10;&#10;&#10;&#10;        public void CompleteLevel(float completionTime)&#10;        {&#10;            _eventBus?.Publish(new LevelCompletedEvent&#10;            {&#10;                LevelName = _currentLevelName,&#10;                CompletionTime = completionTime,&#10;                Timestamp = Time.time&#10;            });&#10;        }&#10;&#10;        #endregion&#10;&#10;        #region Event Handlers&#10;&#10;        private void SubscribeToEvents()&#10;        {&#10;            _eventBus?.Subscribe&lt;GameOverEvent&gt;(OnGameOver);&#10;            _eventBus?.Subscribe&lt;LevelCompletedEvent&gt;(OnLevelCompleted);&#10;            _eventBus?.Subscribe&lt;PlayerLivesChangedEvent&gt;(OnPlayerLivesChanged);&#10;        }&#10;&#10;        private void UnsubscribeFromEvents()&#10;        {&#10;            _eventBus?.Unsubscribe&lt;GameOverEvent&gt;(OnGameOver);&#10;            _eventBus?.Unsubscribe&lt;LevelCompletedEvent&gt;(OnLevelCompleted);&#10;            _eventBus?.Unsubscribe&lt;PlayerLivesChangedEvent&gt;(OnPlayerLivesChanged);&#10;        }&#10;&#10;        private void OnGameOver(GameOverEvent gameOverEvent)&#10;        {&#10;            ChangeState(GameState.GameOver);&#10;            Invoke(nameof(RestartLevel), restartDelay);&#10;        }&#10;&#10;&#10;        private void OnLevelCompleted(LevelCompletedEvent levelEvent)&#10;        {&#10;            ChangeState(GameState.Victory);&#10;        }&#10;&#10;        private void OnPlayerLivesChanged(PlayerLivesChangedEvent livesEvent)&#10;        {&#10;            bool lostLife = livesEvent.PreviousLives &gt; livesEvent.CurrentLives;&#10;            bool isGameOver = livesEvent.CurrentLives == 0;&#10;&#10;            if (isGameOver)&#10;            {&#10;                ChangeState(GameState.GameOver);&#10;                Debug.Log($&quot;[GameFlowManager] Game Over: Player is out of lives&quot;);&#10;                _eventBus?.Publish(new GameOverEvent { Timestamp = Time.time });&#10;            }&#10;            if (lostLife)&#10;            {&#10;                Debug.Log($&quot;[GameFlowManager] Player lost a life. Remaining lives: {livesEvent.CurrentLives}&quot;);&#10;                _eventBus?.Publish(new PlayerDeathEvent&#10;                {&#10;                    DeathPosition = PlayerLocator.PlayerTransform.position,&#10;                    Timestamp = Time.time&#10;                });&#10;            }&#10;            if (isGameOver || lostLife)&#10;            {&#10;                Time.timeScale = 0;&#10;                RestartLevelAfterDelayAsync(restartDelay);&#10;            }&#10;        }&#10;        private static async void RestartLevelAfterDelayAsync(float delay)&#10;        {&#10;            try&#10;            {&#10;                await Task.Delay((int)(delay * 1000));&#10;                SceneManager.LoadScene(SceneManager.GetActiveScene().name);&#10;            }&#10;            catch (Exception e)&#10;            {&#10;                Debug.LogError($&quot;[GameFlowManager] Failed to restart level after delay: {e}&quot;);&#10;            }&#10;        }&#10;        #endregion&#10;&#10;        #region Private Methods&#10;&#10;        private void ChangeState(GameState newState)&#10;        {&#10;            if (CurrentState == newState) return;&#10;&#10;            GameState oldState = CurrentState;&#10;            CurrentState = newState;&#10;&#10;            // Publish state change event&#10;            _eventBus?.Publish(new GameStateChangedEvent&#10;            {&#10;                PreviousState = oldState,&#10;                NewState = newState,&#10;                Timestamp = Time.time&#10;            });&#10;        }&#10;&#10;        private string GetCurrentLevelName() =&gt; SceneManager.GetActiveScene().name;&#10;&#10;        private void PublishLevelStartedEvent()&#10;        {&#10;            _eventBus?.Publish(new LevelStartedEvent&#10;            {&#10;                LevelName = _currentLevelName,&#10;                Timestamp = Time.time&#10;            });&#10;        }&#10;&#10;        #endregion&#10;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using System;&#10;using System.Threading.Tasks;&#10;using Core.Events;&#10;using Player.Components;&#10;using UnityEngine;&#10;using UnityEngine.SceneManagement;&#10;using VContainer;&#10;&#10;namespace Core&#10;{&#10;    /// &lt;summary&gt;&#10;    ///     All aspects of game flow including state transitions, level management, and game progression.&#10;    /// &lt;/summary&gt;&#10;    public class GameFlowManager : MonoBehaviour&#10;    {&#10;&#10;        #region VContainer Injection&#10;&#10;        [Inject]&#10;        public void Construct(IEventBus eventBus)&#10;        {&#10;            _eventBus = eventBus;&#10;            SubscribeToEvents();&#10;        }&#10;&#10;        #endregion&#10;&#10;        #region Fields&#10;&#10;        [Header(&quot;Game Settings&quot;)] [SerializeField]&#10;        private bool autoStartGame = true;&#10;&#10;        [SerializeField] private float restartDelay = 2f;&#10;&#10;        private string _currentLevelName = &quot;Unknown&quot;;&#10;        private float _levelStartTime;&#10;        private IEventBus _eventBus;&#10;&#10;        #endregion&#10;&#10;        #region Properties&#10;&#10;        public GameState CurrentState { get; private set; } = GameState.MainMenu;&#10;&#10;        public bool IsPlaying =&gt; CurrentState == GameState.Playing;&#10;&#10;        #endregion&#10;&#10;        #region Unity Lifecycle&#10;&#10;        private void Start()&#10;        {&#10;            _currentLevelName = GetCurrentLevelName();&#10;&#10;            if (autoStartGame)&#10;            {&#10;                StartGame();&#10;            }&#10;        }&#10;&#10;        private void OnDestroy()&#10;        {&#10;            UnsubscribeFromEvents();&#10;        }&#10;&#10;        #endregion&#10;&#10;        #region Public API - Game State Control&#10;&#10;        public void StartGame()&#10;        {&#10;            ChangeState(GameState.Playing);&#10;            _levelStartTime = Time.time;&#10;&#10;            PublishLevelStartedEvent();&#10;        }&#10;&#10;        public void PauseGame()&#10;        {&#10;            if (CurrentState == GameState.Playing)&#10;                ChangeState(GameState.Paused);&#10;        }&#10;&#10;        public void ResumeGame()&#10;        {&#10;            if (CurrentState == GameState.Paused)&#10;                ChangeState(GameState.Playing);&#10;        }&#10;&#10;        public void RestartLevel()&#10;        {&#10;            SceneManager.LoadScene(SceneManager.GetActiveScene().name);&#10;        }&#10;&#10;        #endregion&#10;&#10;        #region Public API - Game Flow Control&#10;&#10;        public void HandlePlayerDeath(Vector3 deathPosition)&#10;        {&#10;            _eventBus?.Publish(new PlayerDeathEvent&#10;            {&#10;                DeathPosition = deathPosition,&#10;                Timestamp = Time.time&#10;            });&#10;        }&#10;&#10;&#10;&#10;        public void CompleteLevel(float completionTime)&#10;        {&#10;            _eventBus?.Publish(new LevelCompletedEvent&#10;            {&#10;                LevelName = _currentLevelName,&#10;                CompletionTime = completionTime,&#10;                Timestamp = Time.time&#10;            });&#10;        }&#10;&#10;        #endregion&#10;&#10;        #region Event Handlers&#10;&#10;        private void SubscribeToEvents()&#10;        {&#10;            _eventBus?.Subscribe&lt;GameOverEvent&gt;(OnGameOver);&#10;            _eventBus?.Subscribe&lt;LevelCompletedEvent&gt;(OnLevelCompleted);&#10;            _eventBus?.Subscribe&lt;PlayerLivesChangedEvent&gt;(OnPlayerLivesChanged);&#10;        }&#10;&#10;        private void UnsubscribeFromEvents()&#10;        {&#10;            _eventBus?.Unsubscribe&lt;GameOverEvent&gt;(OnGameOver);&#10;            _eventBus?.Unsubscribe&lt;LevelCompletedEvent&gt;(OnLevelCompleted);&#10;            _eventBus?.Unsubscribe&lt;PlayerLivesChangedEvent&gt;(OnPlayerLivesChanged);&#10;        }&#10;&#10;        private void OnGameOver(GameOverEvent gameOverEvent)&#10;        {&#10;            ChangeState(GameState.GameOver);&#10;            RestartLevelAfterDelayAsync(restartDelay);&#10;        }&#10;&#10;&#10;        private void OnLevelCompleted(LevelCompletedEvent levelEvent)&#10;        {&#10;            ChangeState(GameState.Victory);&#10;        }&#10;&#10;        private void OnPlayerLivesChanged(PlayerLivesChangedEvent livesEvent)&#10;        {&#10;            bool lostLife = livesEvent.PreviousLives &gt; livesEvent.CurrentLives;&#10;            bool isGameOver = livesEvent.CurrentLives == 0;&#10;&#10;            if (isGameOver)&#10;            {&#10;                ChangeState(GameState.GameOver);&#10;                Debug.Log($&quot;[GameFlowManager] Game Over: Player is out of lives&quot;);&#10;                _eventBus?.Publish(new GameOverEvent { Timestamp = Time.time });&#10;            }&#10;            if (lostLife)&#10;            {&#10;                Debug.Log($&quot;[GameFlowManager] Player lost a life. Remaining lives: {livesEvent.CurrentLives}&quot;);&#10;                _eventBus?.Publish(new PlayerDeathEvent&#10;                {&#10;                    DeathPosition = PlayerLocator.PlayerTransform.position,&#10;                    Timestamp = Time.time&#10;                });&#10;            }&#10;            if (isGameOver || lostLife)&#10;            {&#10;                Time.timeScale = 0;&#10;                RestartLevelAfterDelayAsync(restartDelay);&#10;            }&#10;        }&#10;        private static async void RestartLevelAfterDelayAsync(float delay)&#10;        {&#10;            try&#10;            {&#10;                await Task.Delay((int)(delay * 1000));&#10;                SceneManager.LoadScene(SceneManager.GetActiveScene().name);&#10;            }&#10;            catch (Exception e)&#10;            {&#10;                Debug.LogError($&quot;[GameFlowManager] Failed to restart level after delay: {e}&quot;);&#10;            }&#10;        }&#10;        #endregion&#10;&#10;        #region Private Methods&#10;&#10;        private void ChangeState(GameState newState)&#10;        {&#10;            if (CurrentState == newState) return;&#10;&#10;            GameState oldState = CurrentState;&#10;            CurrentState = newState;&#10;&#10;            // Publish state change event&#10;            _eventBus?.Publish(new GameStateChangedEvent&#10;            {&#10;                PreviousState = oldState,&#10;                NewState = newState,&#10;                Timestamp = Time.time&#10;            });&#10;        }&#10;&#10;        private string GetCurrentLevelName() =&gt; SceneManager.GetActiveScene().name;&#10;&#10;        private void PublishLevelStartedEvent()&#10;        {&#10;            _eventBus?.Publish(new LevelStartedEvent&#10;            {&#10;                LevelName = _currentLevelName,&#10;                Timestamp = Time.time&#10;            });&#10;        }&#10;&#10;        #endregion&#10;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemies/Behaviors/FrogProximityJump.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemies/Behaviors/FrogProximityJump.cs" />
              <option name="originalContent" value="using Enemies.Interfaces;&#10;using Player.Components;&#10;using UnityEngine;&#10;&#10;namespace Enemies.Behaviors&#10;{&#10;    // Emits an event when the player is within a certain distance&#10;    [RequireComponent(typeof(Rigidbody2D))]&#10;    public class FrogProximityTrigger : MonoBehaviour, ITrigger&#10;    {&#10;        [SerializeField] private LayerMask groundLayer;&#10;        [SerializeField] private float triggerDistance = 3f;&#10;        [SerializeField] private float jumpCooldown = 2f;&#10;        [SerializeField] private int checkEveryNFrames = 1;&#10;&#10;        private int _frameCounter;&#10;        private bool _grounded;&#10;        private float _lastTriggerTime;&#10;        private Transform _player;&#10;&#10;        private void Start()&#10;        {&#10;            _player = PlayerLocator.PlayerTransform;&#10;        }&#10;&#10;        private void OnCollisionEnter2D(Collision2D collision)&#10;        {&#10;            if ((1 &lt;&lt; collision.gameObject.layer &amp; groundLayer) != 0)&#10;                _grounded = true;&#10;        }&#10;&#10;        private void OnCollisionExit2D(Collision2D collision)&#10;        {&#10;            if ((1 &lt;&lt; collision.gameObject.layer &amp; groundLayer) != 0)&#10;                _grounded = false;&#10;        }&#10;&#10;        public bool IsTriggered { get; private set; }&#10;&#10;        public void CheckTrigger()&#10;        {&#10;            if (++_frameCounter % checkEveryNFrames != 0 || !_player) return;&#10;&#10;            Vector2 toPlayer = _player.position - transform.position;&#10;            float sqrDist = toPlayer.sqrMagnitude;&#10;            float sqrTrigger = triggerDistance * triggerDistance;&#10;&#10;            if (sqrDist &lt; sqrTrigger &amp;&amp; Time.time - _lastTriggerTime &gt; jumpCooldown &amp;&amp; _grounded)&#10;            {&#10;                IsTriggered = true;&#10;                _lastTriggerTime = Time.time;&#10;            }&#10;            else&#10;            {&#10;                IsTriggered = false;&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using Enemies.Interfaces;&#10;using Player.Components;&#10;using UnityEngine;&#10;&#10;namespace Enemies.Behaviors&#10;{&#10;    // Emits an event when the player is within a certain distance&#10;    [RequireComponent(typeof(Rigidbody2D))]&#10;    public class FrogProximityTrigger : MonoBehaviour, ITrigger&#10;    {&#10;        [SerializeField] private LayerMask groundLayer;&#10;        [SerializeField] private float triggerDistance = 3f;&#10;        [SerializeField] private float jumpCooldown = 2f;&#10;        [SerializeField] private int checkEveryNFrames = 1;&#10;&#10;        private int _frameCounter;&#10;        private bool _grounded;&#10;        private float _lastTriggerTime;&#10;        private Transform _player;&#10;&#10;        private void Start()&#10;        {&#10;            _player = PlayerLocator.PlayerTransform;&#10;        }&#10;&#10;        private void OnCollisionEnter2D(Collision2D collision)&#10;        {&#10;            if ((1 &lt;&lt; collision.gameObject.layer &amp; groundLayer) != 0)&#10;                _grounded = true;&#10;        }&#10;&#10;        private void OnCollisionExit2D(Collision2D collision)&#10;        {&#10;            if ((1 &lt;&lt; collision.gameObject.layer &amp; groundLayer) != 0)&#10;                _grounded = false;&#10;        }&#10;&#10;        public bool IsTriggered { get; private set; }&#10;&#10;        public void CheckTrigger()&#10;        {&#10;            if (++_frameCounter % checkEveryNFrames != 0 || !_player) return;&#10;&#10;            Vector2 toPlayer = _player.position - transform.position;&#10;            float sqrDist = toPlayer.sqrMagnitude;&#10;            float sqrTrigger = triggerDistance * triggerDistance;&#10;&#10;            if (sqrDist &lt; sqrTrigger &amp;&amp; Time.time - _lastTriggerTime &gt; jumpCooldown &amp;&amp; _grounded)&#10;            {&#10;                IsTriggered = true;&#10;                _lastTriggerTime = Time.time;&#10;            }&#10;            else&#10;            {&#10;                IsTriggered = false;&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemies/Behaviors/JumpMover.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemies/Behaviors/JumpMover.cs" />
              <option name="originalContent" value="using Enemies.Interfaces;&#10;using UnityEngine;&#10;&#10;namespace Enemies.Behaviors&#10;{&#10;    // Command to make the enemy jump forward&#10;    [RequireComponent(typeof(Rigidbody2D))]&#10;    public class JumpCommand : MonoBehaviour, IMovementCommand&#10;    {&#10;        [SerializeField] private LayerMask groundLayer;&#10;        [SerializeField] private float jumpForceX = 2f;&#10;        [SerializeField] private float jumpForceY = 5f;&#10;&#10;        private bool _grounded;&#10;        private Rigidbody2D _rb;&#10;&#10;        private void Awake()&#10;        {&#10;            _rb = GetComponent&lt;Rigidbody2D&gt;();&#10;        }&#10;&#10;        private void OnCollisionEnter2D(Collision2D collision)&#10;        {&#10;            if ((1 &lt;&lt; collision.gameObject.layer &amp; groundLayer) != 0)&#10;                _grounded = true;&#10;        }&#10;&#10;        private void OnCollisionExit2D(Collision2D collision)&#10;        {&#10;            if ((1 &lt;&lt; collision.gameObject.layer &amp; groundLayer) != 0)&#10;                _grounded = false;&#10;        }&#10;&#10;        public void Execute()&#10;        {&#10;            if (_grounded)&#10;            {&#10;                Vector2 jumpDir = new(transform.localScale.x * jumpForceX, jumpForceY);&#10;                _rb.linearVelocity = jumpDir;&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using Enemies.Interfaces;&#10;using UnityEngine;&#10;&#10;namespace Enemies.Behaviors&#10;{&#10;    // Command to make the enemy jump forward&#10;    [RequireComponent(typeof(Rigidbody2D))]&#10;    public class JumpCommand : MonoBehaviour, IMovementCommand&#10;    {&#10;        [SerializeField] private LayerMask groundLayer;&#10;        [SerializeField] private float jumpForceX = 2f;&#10;        [SerializeField] private float jumpForceY = 5f;&#10;&#10;        private bool _grounded;&#10;        private Rigidbody2D _rb;&#10;&#10;        private void Awake()&#10;        {&#10;            _rb = GetComponent&lt;Rigidbody2D&gt;();&#10;        }&#10;&#10;        private void OnCollisionEnter2D(Collision2D collision)&#10;        {&#10;            if ((1 &lt;&lt; collision.gameObject.layer &amp; groundLayer) != 0)&#10;                _grounded = true;&#10;        }&#10;&#10;        private void OnCollisionExit2D(Collision2D collision)&#10;        {&#10;            if ((1 &lt;&lt; collision.gameObject.layer &amp; groundLayer) != 0)&#10;                _grounded = false;&#10;        }&#10;&#10;        public void Execute()&#10;        {&#10;            if (_grounded)&#10;            {&#10;                Vector2 jumpDir = new(transform.localScale.x * jumpForceX, jumpForceY);&#10;                _rb.linearVelocity = jumpDir;&#10;            }&#10;        }&#10;&#10;        public void ResetState()&#10;        {&#10;            _grounded = false;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemies/Behaviors/ProjectileShooter.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemies/Behaviors/ProjectileShooter.cs" />
              <option name="originalContent" value="using Enemies.Interfaces;&#10;using UnityEngine;&#10;using Weapons.Models;&#10;&#10;namespace Enemies.Behaviors&#10;{&#10;    // Command to shoot a projectile at intervals&#10;    public class ProjectileShootCommand : MonoBehaviour, IAttackCommand&#10;    {&#10;        [SerializeField] private FireballWeapon fireballWeapon;&#10;        [SerializeField] private float fireInterval = 2f;&#10;&#10;        private float _lastFireTime;&#10;&#10;        private void Start()&#10;        {&#10;            fireballWeapon.Equip();&#10;        }&#10;&#10;        public void Execute()&#10;        {&#10;            if (!fireballWeapon)&#10;                return;&#10;&#10;            if (Time.time - _lastFireTime &lt; fireInterval)&#10;                return;&#10;&#10;            fireballWeapon.Shoot();&#10;            _lastFireTime = Time.time;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using Enemies.Interfaces;&#10;using UnityEngine;&#10;using Weapons.Models;&#10;&#10;namespace Enemies.Behaviors&#10;{&#10;    // Command to shoot a projectile at intervals&#10;    public class ProjectileShootCommand : MonoBehaviour, IAttackCommand&#10;    {&#10;        [SerializeField] private FireballWeapon fireballWeapon;&#10;        [SerializeField] private float fireInterval = 2f;&#10;&#10;        private float _lastFireTime;&#10;&#10;        private void Start()&#10;        {&#10;            fireballWeapon.Equip();&#10;        }&#10;&#10;        public void Execute()&#10;        {&#10;            if (!fireballWeapon)&#10;                return;&#10;&#10;            if (Time.time - _lastFireTime &lt; fireInterval)&#10;                return;&#10;&#10;            fireballWeapon.Shoot();&#10;            _lastFireTime = Time.time;&#10;        }&#10;&#10;        public void ResetCooldown()&#10;        {&#10;            _lastFireTime = 0f;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemies/Behaviors/VerticalMover.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemies/Behaviors/VerticalMover.cs" />
              <option name="originalContent" value="using Enemies.Interfaces;&#10;using UnityEngine;&#10;&#10;namespace Enemies.Behaviors&#10;{&#10;    // Command to move the enemy up and down&#10;    public class VerticalMoveCommand : MonoBehaviour, IMovementCommand&#10;    {&#10;        [SerializeField] private float amplitude = 2f;&#10;        [SerializeField] private float frequency = 0.8f;&#10;&#10;        private Rigidbody2D _rb;&#10;        private float _startY;&#10;&#10;        private void Awake()&#10;        {&#10;            _rb = GetComponent&lt;Rigidbody2D&gt;();&#10;            _startY = transform.position.y;&#10;        }&#10;&#10;        public void Execute()&#10;        {&#10;            float t = Mathf.PingPong(Time.time * frequency, 1f);&#10;            float triangle = 2f * Mathf.Abs(t - 0.5f);&#10;            float y = _startY + (triangle - 0.5f) * 2f * amplitude;&#10;            _rb.linearVelocityY = (y - _rb.position.y) / Time.fixedDeltaTime;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using Enemies.Interfaces;&#10;using UnityEngine;&#10;&#10;namespace Enemies.Behaviors&#10;{&#10;    // Command to move the enemy up and down&#10;    public class VerticalMoveCommand : MonoBehaviour, IMovementCommand&#10;    {&#10;        [SerializeField] private float amplitude = 2f;&#10;        [SerializeField] private float frequency = 0.8f;&#10;&#10;        private Rigidbody2D _rb;&#10;        private float _startY;&#10;&#10;        private void Awake()&#10;        {&#10;            _rb = GetComponent&lt;Rigidbody2D&gt;();&#10;            _startY = transform.position.y;&#10;        }&#10;&#10;        public void Execute()&#10;        {&#10;            float t = Mathf.PingPong(Time.time * frequency, 1f);&#10;            float triangle = 2f * Mathf.Abs(t - 0.5f);&#10;            float y = _startY + (triangle - 0.5f) * 2f * amplitude;&#10;            _rb.linearVelocityY = (y - _rb.position.y) / Time.fixedDeltaTime;&#10;        }&#10;&#10;        public void ResetPosition()&#10;        {&#10;            _rb.position = new Vector2(_rb.position.x, _startY);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemies/Behaviors/WaveMover.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemies/Behaviors/WaveMover.cs" />
              <option name="originalContent" value="using Enemies.Interfaces;&#10;using UnityEngine;&#10;&#10;namespace Enemies.Behaviors&#10;{&#10;    // Command to move the enemy in a wave pattern&#10;    public class WaveMoveCommand : MonoBehaviour, IMovementCommand&#10;    {&#10;        [SerializeField] private float speed = 2f;&#10;        [SerializeField] private float amplitude = 1f;&#10;        [SerializeField] private float frequency = 1.11f;&#10;&#10;        private Rigidbody2D _rb;&#10;        private float _startY;&#10;&#10;        private void Awake()&#10;        {&#10;            _rb = GetComponent&lt;Rigidbody2D&gt;();&#10;            _startY = transform.position.y;&#10;        }&#10;&#10;        public void Execute()&#10;        {&#10;            float t = Mathf.PingPong(Time.time * frequency, 1f);&#10;            float triangle = 2f * Mathf.Abs(t - 0.5f);&#10;            float y = _startY + (triangle - 0.5f) * 2f * amplitude;&#10;            _rb.linearVelocity = new Vector2(-speed, (y - _rb.position.y) / Time.fixedDeltaTime);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using Enemies.Interfaces;&#10;using UnityEngine;&#10;&#10;namespace Enemies.Behaviors&#10;{&#10;    // Command to move the enemy in a wave pattern&#10;    public class WaveMoveCommand : MonoBehaviour, IMovementCommand&#10;    {&#10;        [SerializeField] private float speed = 2f;&#10;        [SerializeField] private float amplitude = 1f;&#10;        [SerializeField] private float frequency = 1.11f;&#10;&#10;        private Rigidbody2D _rb;&#10;        private float _startY;&#10;&#10;        private void Awake()&#10;        {&#10;            _rb = GetComponent&lt;Rigidbody2D&gt;();&#10;            _startY = transform.position.y;&#10;        }&#10;&#10;        public void Execute()&#10;        {&#10;            float t = Mathf.PingPong(Time.time * frequency, 1f);&#10;            float triangle = 2f * Mathf.Abs(t - 0.5f);&#10;            float y = _startY + (triangle - 0.5f) * 2f * amplitude;&#10;            _rb.linearVelocity = new Vector2(-speed, (y - _rb.position.y) / Time.fixedDeltaTime);&#10;        }&#10;&#10;        public void ResetPosition()&#10;        {&#10;            _rb.position = new Vector2(_rb.position.x, _startY);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemies/Core/BehaviorOrchestrator.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemies/Core/BehaviorOrchestrator.cs" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemies/Core/EnemyBehaviorController.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemies/Core/EnemyBehaviorController.cs" />
              <option name="originalContent" value="using UnityEngine;&#10;using Enemies.Interfaces;&#10;&#10;namespace Enemies.Core&#10;{&#10;    // Wires up modular behaviors. Attach this to any enemy prefab.&#10;    public class EnemyBehaviorController : MonoBehaviour&#10;    {&#10;        private IMovementBehavior[] _movementBehaviors;&#10;        private IAttackBehavior[] _attackBehaviors;&#10;        private ITriggerBehavior[] _triggerBehaviors;&#10;&#10;        private void Awake()&#10;        {&#10;            _movementBehaviors = GetComponents&lt;IMovementBehavior&gt;();&#10;            _attackBehaviors = GetComponents&lt;IAttackBehavior&gt;();&#10;            _triggerBehaviors = GetComponents&lt;ITriggerBehavior&gt;();&#10;        }&#10;&#10;        private void Update()&#10;        {&#10;            foreach (ITriggerBehavior trigger in _triggerBehaviors) trigger.CheckTrigger();&#10;            foreach (IMovementBehavior move in _movementBehaviors) move.Move();&#10;            foreach (IAttackBehavior attack in _attackBehaviors) attack.Attack();&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using UnityEngine;&#10;using Enemies.Interfaces;&#10;&#10;namespace Enemies.Core&#10;{&#10;    // Coordinates modular behaviors. Attach this to any enemy prefab.&#10;    public class EnemyBehaviorController : MonoBehaviour&#10;    {&#10;        private IMovementBehavior[] _movementBehaviors;&#10;        private IAttackBehavior[] _attackBehaviors;&#10;        private ITriggerBehavior[] _triggerBehaviors;&#10;&#10;        private void Awake()&#10;        {&#10;            _movementBehaviors = GetComponents&lt;IMovementBehavior&gt;();&#10;            _attackBehaviors = GetComponents&lt;IAttackBehavior&gt;();&#10;            _triggerBehaviors = GetComponents&lt;ITriggerBehavior&gt;();&#10;        }&#10;&#10;        private void Update()&#10;        {&#10;            foreach (ITriggerBehavior trigger in _triggerBehaviors) trigger.CheckTrigger();&#10;        }&#10;&#10;        private void FixedUpdate()&#10;        {&#10;            foreach (IMovementBehavior move in _movementBehaviors) move.Move();&#10;        }&#10;&#10;        private void LateUpdate()&#10;        {&#10;            foreach (IAttackBehavior attack in _attackBehaviors) attack.Attack();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemies/Core/EnemyController.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemies/Core/EnemyController.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;using Enemies.Interfaces;&#10;&#10;namespace Enemies.Core&#10;{&#10;    // Wires up modular behaviors. Attach this to any enemy prefab.&#10;    public class EnemyController : MonoBehaviour&#10;    {&#10;        private IMovementBehavior[] _movementBehaviors;&#10;        private IAttackBehavior[] _attackBehaviors;&#10;        private ITriggerBehavior[] _triggerBehaviors;&#10;&#10;        private void Awake()&#10;        {&#10;            _movementBehaviors = GetComponents&lt;IMovementBehavior&gt;();&#10;            _attackBehaviors = GetComponents&lt;IAttackBehavior&gt;();&#10;            _triggerBehaviors = GetComponents&lt;ITriggerBehavior&gt;();&#10;        }&#10;&#10;        private void Update()&#10;        {&#10;            foreach (var trigger in _triggerBehaviors) trigger.CheckTrigger();&#10;            foreach (var move in _movementBehaviors) move.Move();&#10;            foreach (var attack in _attackBehaviors) attack.Attack();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemies/Core/TriggerManager.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemies/Core/TriggerManager.cs" />
              <option name="originalContent" value="using Enemies.Interfaces;&#10;using UnityEngine;&#10;using System.Linq;&#10;&#10;namespace Enemies.Core&#10;{&#10;    // Manages periodic checks for all triggers in the scene&#10;    public class TriggerManager : MonoBehaviour&#10;    {&#10;        private TriggerGroup[] _triggerGroups;&#10;&#10;        private void Awake()&#10;        {&#10;            _triggerGroups = FindObjectsOfType&lt;MonoBehaviour&gt;().OfType&lt;TriggerGroup&gt;().ToArray();&#10;        }&#10;&#10;        private void Update()&#10;        {&#10;            foreach (var group in _triggerGroups)&#10;            {&#10;                group.Update();&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using Enemies.Interfaces;&#10;using UnityEngine;&#10;using System.Linq;&#10;&#10;namespace Enemies.Core&#10;{&#10;    // Manages periodic checks for all triggers in the scene&#10;    public class TriggerManager : MonoBehaviour&#10;    {&#10;        private TriggerGroup[] _triggerGroups;&#10;&#10;        private void Awake()&#10;        {&#10;            _triggerGroups = FindObjectsOfType&lt;MonoBehaviour&gt;().OfType&lt;TriggerGroup&gt;().ToArray();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemies/Interfaces/IAttackBehavior.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemies/Interfaces/IAttackBehavior.cs" />
              <option name="originalContent" value="namespace Enemies.Interfaces&#10;{&#10;    public interface IAttackBehavior&#10;    {&#10;        void Attack();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="namespace Enemies.Interfaces&#10;{&#10;    public interface IAttackBehavior&#10;    {&#10;        void Attack();&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemies/Interfaces/IMovementBehavior.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemies/Interfaces/IMovementBehavior.cs" />
              <option name="originalContent" value="namespace Enemies.Interfaces&#10;{&#10;    public interface IMovementBehavior&#10;    {&#10;        void Move();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="namespace Enemies.Interfaces&#10;{&#10;    public interface IMovementBehavior&#10;    {&#10;        void Move();&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemies/Interfaces/ITriggerBehavior.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemies/Interfaces/ITriggerBehavior.cs" />
              <option name="originalContent" value="namespace Enemies.Interfaces&#10;{&#10;    public interface ITrigger&#10;    {&#10;        bool IsTriggered { get; }&#10;    }&#10;&#10;    public interface ITriggerBehavior&#10;    {&#10;        void CheckTrigger();&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="namespace Enemies.Interfaces&#10;{&#10;    public interface ITrigger&#10;    {&#10;        bool IsTriggered { get; }&#10;        void CheckTrigger();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemy/Behaviors/EnemyBehaviors.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemy/Behaviors/EnemyBehaviors.cs" />
              <option name="updatedContent" value="namespace Enemy.Behaviors&#10;{&#10;    // Optional movement behavior&#10;    public interface IMovable&#10;    {&#10;        void Move();&#10;    }&#10;&#10;    // Optional player proximity reaction&#10;    public interface IPlayerProximityReactable&#10;    {&#10;        void OnPlayerNearby();&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemy/BirdEnemy.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemy/BirdEnemy.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;using Enemy.Behaviors;&#10;&#10;namespace Enemy&#10;{&#10;    // Bird: Moves left, goes up and down&#10;    public class BirdEnemy : EnemyBase, IMovable&#10;    {&#10;        [SerializeField] private float moveSpeed = 2f;&#10;        [SerializeField] private float verticalAmplitude = 1f;&#10;        [SerializeField] private float verticalFrequency = 1f;&#10;        private Vector3 _startPos;&#10;        private float _time;&#10;&#10;        protected override void Awake()&#10;        {&#10;            base.Awake();&#10;            _startPos = transform.position;&#10;        }&#10;&#10;        public void Move()&#10;        {&#10;            _time += Time.deltaTime;&#10;            float yOffset = Mathf.Sin(_time * verticalFrequency) * verticalAmplitude;&#10;            transform.position = _startPos + new Vector3(-moveSpeed * _time, yOffset, 0);&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemy/EnemyBase.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemy/EnemyBase.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;&#10;namespace Enemy&#10;{&#10;    public abstract class EnemyBase : MonoBehaviour&#10;    {&#10;        protected Rigidbody2D rb;&#10;        protected Collider2D col;&#10;        protected virtual void Awake()&#10;        {&#10;            rb = GetComponent&lt;Rigidbody2D&gt;();&#10;            col = GetComponent&lt;Collider2D&gt;();&#10;        }&#10;&#10;        public virtual void Move() { }&#10;        public virtual void Attack() { }&#10;        public virtual void OnPlayerNearby() { }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemy/EnemyBuilder.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemy/EnemyBuilder.cs" />
              <option name="originalContent" value="using Enemy.Behaviors;&#10;using Weapons.Models;&#10;using UnityEngine;&#10;&#10;namespace Enemy&#10;{&#10;    public class EnemyBuilder&#10;    {&#10;        private readonly EnemyBase _enemy;&#10;&#10;        public EnemyBuilder(EnemyBase enemy)&#10;        {&#10;            _enemy = enemy;&#10;        }&#10;&#10;        public EnemyBuilder WithFireSnakeBehavior()&#10;        {&#10;            // Example: assign FireballWeapon if available&#10;            var fireSnake = _enemy as FireSnakeEnemy;&#10;            if (fireSnake)&#10;            {&#10;                FireballWeapon weapon = fireSnake.GetComponentInChildren&lt;FireballWeapon&gt;();&#10;                if (weapon)&#10;                {&#10;                    weapon.Equip();&#10;                    // Additional setup if needed&#10;                }&#10;            }&#10;            return this;&#10;        }&#10;&#10;        public EnemyBuilder WithSpiderBehavior()&#10;        {&#10;            // Assign movement or proximity logic as needed&#10;            return this;&#10;        }&#10;&#10;        public EnemyBuilder WithBirdBehavior()&#10;        {&#10;            // Assign movement logic as needed&#10;            return this;&#10;        }&#10;&#10;        public EnemyBuilder WithSnakeBehavior()&#10;        {&#10;            // Assign jump logic as needed&#10;            var snake = _enemy as SnakeEnemy;&#10;            if (snake)&#10;            {&#10;                // Example: assign a jump movement component or set jump parameters&#10;                // (Assume SnakeEnemy implements IMovable and has a Jump method)&#10;            }&#10;            return this;&#10;        }&#10;&#10;        public EnemyBuilder WithFrogBehavior()&#10;        {&#10;            // Assign jump and proximity logic as needed&#10;            var frog = _enemy as FrogEnemy;&#10;            if (frog)&#10;            {&#10;                // Example: assign a jump movement component or set jump parameters&#10;                // (Assume FrogEnemy implements IMovable and IPlayerProximityReactable)&#10;            }&#10;            return this;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using Enemy.Behaviors;&#10;using Weapons.Models;&#10;using UnityEngine;&#10;&#10;namespace Enemy&#10;{&#10;    public class EnemyBuilder&#10;    {&#10;        private readonly EnemyBase _enemy;&#10;&#10;        public EnemyBuilder(EnemyBase enemy)&#10;        {&#10;            _enemy = enemy;&#10;        }&#10;&#10;        public EnemyBuilder WithFireSnakeBehavior()&#10;        {&#10;            // Example: assign FireballWeapon if available&#10;            var fireSnake = _enemy as FireSnakeEnemy;&#10;            if (fireSnake)&#10;            {&#10;                FireballWeapon weapon = fireSnake.GetComponentInChildren&lt;FireballWeapon&gt;();&#10;                if (weapon)&#10;                {&#10;                    weapon.Equip();&#10;                    // Additional setup if needed&#10;                }&#10;            }&#10;            return this;&#10;        }&#10;&#10;        public EnemyBuilder WithSpiderBehavior()&#10;        {&#10;            // Spider: Can move up/down or stay static in air&#10;            var spider = _enemy as SpiderEnemy;&#10;            if (spider)&#10;            {&#10;                // No extra setup needed; movement handled in SpiderEnemy&#10;            }&#10;            return this;&#10;        }&#10;&#10;        public EnemyBuilder WithBirdBehavior()&#10;        {&#10;            // Bird: Moves left, goes up and down&#10;            var bird = _enemy as BirdEnemy;&#10;            if (bird)&#10;            {&#10;                // No extra setup needed; movement handled in BirdEnemy&#10;            }&#10;            return this;&#10;        }&#10;&#10;        public EnemyBuilder WithSnakeBehavior()&#10;        {&#10;            // Snake: Jumps forward&#10;            var snake = _enemy as SnakeEnemy;&#10;            if (snake)&#10;            {&#10;                // No extra setup needed; jump logic handled in SnakeEnemy&#10;            }&#10;            return this;&#10;        }&#10;&#10;        public EnemyBuilder WithFrogBehavior()&#10;        {&#10;            // Frog: Jumps higher/farther, jumps when player is near&#10;            var frog = _enemy as FrogEnemy;&#10;            if (frog)&#10;            {&#10;                // No extra setup needed; jump and proximity handled in FrogEnemy&#10;            }&#10;            return this;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemy/EnemyDirector.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemy/EnemyDirector.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;&#10;namespace Enemy&#10;{&#10;    public static class EnemyDirector&#10;    {&#10;        // Entry point for configuring an enemy in the scene&#10;        public static void ConstructEnemy(EnemyType type, EnemyBase enemy)&#10;        {&#10;            // The director delegates the construction to the factory&#10;            EnemyFactory.ConfigureEnemy(type, enemy);&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemy/EnemyFactory.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemy/EnemyFactory.cs" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="using System;&#10;using UnityEngine;&#10;&#10;namespace Enemy&#10;{&#10;    public enum EnemyType&#10;    {&#10;        FireSnake,&#10;        Spider,&#10;        Bird,&#10;        Snake,&#10;        Frog&#10;    }&#10;&#10;    public static class EnemyFactory&#10;    {&#10;        // Configures an existing enemy instance using the builder pattern&#10;        public static void ConfigureEnemy(EnemyType type, EnemyBase enemy)&#10;        {&#10;            if (enemy == null) throw new ArgumentNullException(nameof(enemy));&#10;            var builder = new EnemyBuilder(enemy);&#10;            switch (type)&#10;            {&#10;                case EnemyType.FireSnake:&#10;                    builder.WithFireSnakeBehavior();&#10;                    break;&#10;                case EnemyType.Spider:&#10;                    builder.WithSpiderBehavior();&#10;                    break;&#10;                case EnemyType.Bird:&#10;                    builder.WithBirdBehavior();&#10;                    break;&#10;                case EnemyType.Snake:&#10;                    builder.WithSnakeBehavior();&#10;                    break;&#10;                case EnemyType.Frog:&#10;                    builder.WithFrogBehavior();&#10;                    break;&#10;                default:&#10;                    break;&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemy/FireSnakeEnemy.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemy/FireSnakeEnemy.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;using Weapons.Models;&#10;&#10;namespace Enemy&#10;{&#10;    public class FireSnakeEnemy : EnemyBase&#10;    {&#10;        [SerializeField] private FireballWeapon fireballWeapon;&#10;        [SerializeField] private float attackCooldown = 2f;&#10;        private float _nextAttackTime;&#10;&#10;        protected override void Awake()&#10;        {&#10;            base.Awake();&#10;            if (fireballWeapon != null)&#10;                fireballWeapon.Equip();&#10;        }&#10;&#10;        public override void Attack()&#10;        {&#10;            if (fireballWeapon == null)&#10;                return;&#10;            if (Time.time &lt; _nextAttackTime)&#10;                return;&#10;            fireballWeapon.Shoot();&#10;            _nextAttackTime = Time.time + attackCooldown;&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemy/FrogEnemy.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemy/FrogEnemy.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;using Enemy.Behaviors;&#10;&#10;namespace Enemy&#10;{&#10;    // Frog: Jumps higher and farther, jumps when player is near&#10;    public class FrogEnemy : EnemyBase, IMovable, IPlayerProximityReactable&#10;    {&#10;        [SerializeField] private float jumpForce = 12f;&#10;        [SerializeField] private float jumpDistance = 6f;&#10;        [SerializeField] private float jumpCooldown = 2f;&#10;        private float _nextJumpTime;&#10;        private Rigidbody2D _rb;&#10;        private bool _playerNearby;&#10;&#10;        protected override void Awake()&#10;        {&#10;            base.Awake();&#10;            _rb = GetComponent&lt;Rigidbody2D&gt;();&#10;        }&#10;&#10;        public void Move()&#10;        {&#10;            if (_playerNearby &amp;&amp; Time.time &gt;= _nextJumpTime)&#10;            {&#10;                Vector2 jumpVector = new Vector2(jumpDistance, jumpForce);&#10;                _rb.AddForce(jumpVector, ForceMode2D.Impulse);&#10;                _nextJumpTime = Time.time + jumpCooldown;&#10;                _playerNearby = false; // Only jump once per proximity event&#10;            }&#10;        }&#10;&#10;        public void OnPlayerNearby()&#10;        {&#10;            _playerNearby = true;&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemy/MVC/EnemyBase.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemy/MVC/EnemyBase.cs" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemy/MVC/FireSnake.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemy/MVC/FireSnake.cs" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemy/SnakeEnemy.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemy/SnakeEnemy.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;using Enemy.Behaviors;&#10;&#10;namespace Enemy&#10;{&#10;    // Snake: Jumps forward&#10;    public class SnakeEnemy : EnemyBase, IMovable&#10;    {&#10;        [SerializeField] private float jumpForce = 7f;&#10;        [SerializeField] private float jumpInterval = 2f;&#10;        private float _nextJumpTime;&#10;        private Rigidbody2D _rb;&#10;&#10;        protected override void Awake()&#10;        {&#10;            base.Awake();&#10;            _rb = GetComponent&lt;Rigidbody2D&gt;();&#10;        }&#10;&#10;        public void Move()&#10;        {&#10;            if (Time.time &gt;= _nextJumpTime)&#10;            {&#10;                _rb.AddForce(Vector2.right * jumpForce, ForceMode2D.Impulse);&#10;                _nextJumpTime = Time.time + jumpInterval;&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemy/SpiderEnemy.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemy/SpiderEnemy.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;using Enemy.Behaviors;&#10;&#10;namespace Enemy&#10;{&#10;    // Spider: Can move up/down or stay static in air&#10;    public class SpiderEnemy : EnemyBase, IMovable&#10;    {&#10;        [SerializeField] private bool canMove = true;&#10;        [SerializeField] private float moveSpeed = 2f;&#10;        [SerializeField] private float moveDistance = 3f;&#10;        private Vector3 _startPos;&#10;        private bool _movingUp = true;&#10;&#10;        protected override void Awake()&#10;        {&#10;            base.Awake();&#10;            _startPos = transform.position;&#10;        }&#10;&#10;        public void Move()&#10;        {&#10;            if (!canMove) return;&#10;            float delta = moveSpeed * Time.deltaTime * (_movingUp ? 1 : -1);&#10;            transform.position += new Vector3(0, delta, 0);&#10;            if (Mathf.Abs(transform.position.y - _startPos.y) &gt; moveDistance)&#10;                _movingUp = !_movingUp;&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Health/Damage/Conditions/AlwaysAllowDamage.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Health/Damage/Conditions/AlwaysAllowDamage.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;using Health.Interfaces;&#10;&#10;namespace Health.Damage.Conditions&#10;{&#10;    [DisallowMultipleComponent]&#10;    public class AlwaysAllowDamage : MonoBehaviour, IDamageCondition&#10;    {&#10;        public bool CanBeDamagedBy(GameObject damager) =&gt; true;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Health/Damage/Conditions/AndDamageCondition.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Health/Damage/Conditions/AndDamageCondition.cs" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Health/Damage/Conditions/OrDamageCondition.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Health/Damage/Conditions/OrDamageCondition.cs" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Health/Damage/DamageOnCollision.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Health/Damage/DamageOnCollision.cs" />
              <option name="originalContent" value="using Health.Interfaces;&#10;using UnityEngine;&#10;&#10;namespace Health.Damage&#10;{&#10;    [DisallowMultipleComponent]&#10;    public class DamageOnCollision : MonoBehaviour&#10;    {&#10;        private IDamageDealer _dealer;&#10;        private DamageConditionsComponent _damageConditions;&#10;&#10;        [SerializeField] private LayerMask targetLayers = ~0; // All layers by default&#10;&#10;        private void Awake()&#10;        {&#10;            _dealer = GetComponent&lt;IDamageDealer&gt;();&#10;            _damageConditions = GetComponent&lt;DamageConditionsComponent&gt;();&#10;        }&#10;&#10;        private void OnCollisionEnter2D(Collision2D collision)&#10;        {&#10;            GameObject target = collision.gameObject;&#10;            if (((1 &lt;&lt; target.layer) &amp; targetLayers) == 0)&#10;                return;&#10;            IDamageable damageable = target.GetComponent&lt;IDamageable&gt;();&#10;            if (damageable == null) return;&#10;&#10;            if (_damageConditions &amp;&amp; !_damageConditions.CanBeDamagedBy(target))&#10;                return;&#10;&#10;            int amount = _dealer?.GetDamageAmount() ?? 1;&#10;            damageable.Damage(amount, gameObject);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using Health.Interfaces;&#10;using System.Linq;&#10;using UnityEngine;&#10;&#10;namespace Health.Damage&#10;{&#10;    [DisallowMultipleComponent]&#10;    public class BidirectionalDamageOnCollision : MonoBehaviour&#10;    {&#10;        private IDamageDealer _dealer;&#10;        private DamageConditionsComponent _damageConditions;&#10;        [SerializeField] private LayerMask targetLayers = ~0;&#10;&#10;        private void Awake()&#10;        {&#10;            _dealer = GetComponent&lt;IDamageDealer&gt;();&#10;            _damageConditions = GetComponent&lt;DamageConditionsComponent&gt;();&#10;        }&#10;&#10;        private void OnCollisionEnter2D(Collision2D collision)&#10;        {&#10;            GameObject other = collision.gameObject;&#10;            GameObject self = gameObject;&#10;&#10;            // 1. This object damages the other&#10;            TryDealDamage(self, other, _dealer, _damageConditions, targetLayers);&#10;&#10;            // 2. The other object damages this&#10;            var otherDealer = other.GetComponent&lt;IDamageDealer&gt;();&#10;            var otherConditions = other.GetComponent&lt;DamageConditionsComponent&gt;();&#10;            TryDealDamage(other, self, otherDealer, otherConditions, targetLayers);&#10;        }&#10;&#10;        private static void TryDealDamage(&#10;            GameObject dealerObj,&#10;            GameObject targetObj,&#10;            IDamageDealer dealer,&#10;            DamageConditionsComponent conditions,&#10;            LayerMask targetLayers)&#10;        {&#10;            if (dealer == null) return;&#10;            if (((1 &lt;&lt; targetObj.layer) &amp; targetLayers) == 0) return;&#10;            var damageable = targetObj.GetComponent&lt;IDamageable&gt;();&#10;            if (damageable == null) return;&#10;            if (conditions &amp;&amp; !conditions.CanBeDamagedBy(targetObj)) return;&#10;            int amount = dealer.GetDamageAmount();&#10;            if (amount &gt; 0)&#10;                damageable.Damage(amount, dealerObj);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Health/Damage/DealDamageOnCollision.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Health/Damage/DealDamageOnCollision.cs" />
              <option name="originalContent" value="using Health.Interfaces;&#10;using UnityEngine;&#10;&#10;namespace Health.Damage&#10;{&#10;    [DisallowMultipleComponent]&#10;    public class DealDamageOnCollision : MonoBehaviour&#10;    {&#10;        private IDamageDealer _dealer;&#10;        private DamageConditionsComponent _damageConditions;&#10;        [SerializeField] private LayerMask targetLayers = ~0;&#10;&#10;        private void Awake()&#10;        {&#10;            _dealer = GetComponent&lt;IDamageDealer&gt;();&#10;            _damageConditions = GetComponent&lt;DamageConditionsComponent&gt;();&#10;        }&#10;&#10;        private void OnCollisionEnter2D(Collision2D collision)&#10;        {&#10;            GameObject target = collision.gameObject;&#10;            if (_dealer == null) return;&#10;            if (((1 &lt;&lt; target.layer) &amp; targetLayers) == 0) return;&#10;            IDamageable damageable = target.GetComponent&lt;IDamageable&gt;();&#10;            if (damageable == null) return;&#10;            if (_damageConditions &amp;&amp; !_damageConditions.CanBeDamagedBy(target)) return;&#10;            int amount = _dealer.GetDamageAmount();&#10;            if (amount &gt; 0)&#10;                damageable.Damage(amount, gameObject);&#10;        }&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="using Health.Interfaces;&#10;using UnityEngine;&#10;&#10;namespace Health.Damage&#10;{&#10;    [DisallowMultipleComponent]&#10;    public class DealDamageOnCollision : MonoBehaviour&#10;    {&#10;        private IDamageDealer _dealer;&#10;        private DamageConditionsComponent _damageConditions;&#10;        [SerializeField] private LayerMask targetLayers = ~0;&#10;&#10;        private void Awake()&#10;        {&#10;            _dealer = GetComponent&lt;IDamageDealer&gt;();&#10;            _damageConditions = GetComponent&lt;DamageConditionsComponent&gt;();&#10;        }&#10;&#10;        private void OnCollisionEnter2D(Collision2D collision)&#10;        {&#10;            GameObject target = collision.gameObject;&#10;            if (_dealer == null) return;&#10;            if (((1 &lt;&lt; target.layer) &amp; targetLayers) == 0) return;&#10;            IDamageable damageable = target.GetComponent&lt;IDamageable&gt;();&#10;            if (damageable == null) return;&#10;            if (_damageConditions &amp;&amp; !_damageConditions.CanBeDamagedBy(target)) return;&#10;            int amount = _dealer.GetDamageAmount();&#10;            if (amount &gt; 0)&#10;                damageable.Damage(amount, gameObject);&#10;        }&#10;    }&#10;}&#10;&#10;// This script is now deprecated in favor of TakeDamageOnCollision for most use cases.&#10;// Please use TakeDamageOnCollision on all damageable objects instead." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Health/Damage/HazardComponent.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Health/Damage/HazardComponent.cs" />
              <option name="originalContent" value="using System.Linq;&#10;using Health.Interfaces;&#10;using UnityEngine;&#10;&#10;namespace Health.Damage&#10;{&#10;    [DisallowMultipleComponent]&#10;    public class HazardComponent : MonoBehaviour&#10;    {&#10;        [Tooltip(&quot;Assign components implementing IDamageCondition here.&quot;)] [SerializeField]&#10;        private MonoBehaviour[] damageConditions;&#10;&#10;        private IDamageCondition[] _conditions;&#10;        private void Awake()&#10;        {&#10;            _conditions = damageConditions.Cast&lt;IDamageCondition&gt;().ToArray();&#10;        }&#10;        public bool CanBeDamagedBy(GameObject damager)&#10;        {&#10;            foreach (IDamageCondition cond in _conditions)&#10;            {&#10;                if (cond != null &amp;&amp; !cond.CanBeDamagedBy(damager))&#10;                    return false;&#10;            }&#10;&#10;            return true;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using System.Linq;&#10;using Health.Interfaces;&#10;using UnityEngine;&#10;&#10;namespace Health.Damage&#10;{&#10;    [DisallowMultipleComponent]&#10;    public class HazardComponent : MonoBehaviour&#10;    {&#10;        [Tooltip(&quot;Assign components implementing IDamageCondition here.&quot;)] [SerializeField]&#10;        private MonoBehaviour[] damageConditions;&#10;&#10;        private IDamageCondition[] _conditions;&#10;        private void Awake()&#10;        {&#10;            _conditions = damageConditions.Cast&lt;IDamageCondition&gt;().ToArray();&#10;        }&#10;        public bool CanBeDamagedBy(GameObject damager)&#10;        {&#10;            return _conditions.All(cond =&gt; cond == null || cond.CanBeDamagedBy(damager));&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Health/Damage/ShieldBreaksHazardOnCollision.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Health/Damage/ShieldBreaksHazardOnCollision.cs" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Health/Editor/ConditionNodeTreeDrawers.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Health/Editor/ConditionNodeTreeDrawers.cs" />
              <option name="originalContent" value="using Health.Damage;&#10;using UnityEditor;&#10;using UnityEngine;&#10;&#10;[CustomPropertyDrawer(typeof(ConditionLeaf))]&#10;public class ConditionLeafPropertyDrawer : ConditionNodePropertyDrawer {}&#10;&#10;[CustomPropertyDrawer(typeof(AndCondition))]&#10;public class AndConditionPropertyDrawer : ConditionNodePropertyDrawer {&#10;    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {&#10;        EditorGUI.BeginProperty(position, label, property);&#10;        var childrenProp = property.FindPropertyRelative(&quot;children&quot;);&#10;        float y = position.y;&#10;        float width = position.width;&#10;        float lineHeight = EditorGUIUtility.singleLineHeight + 2;&#10;        // Draw header&#10;        Rect headerRect = new Rect(position.x, y, width, lineHeight);&#10;        EditorGUI.LabelField(headerRect, &quot;AND Group&quot;, EditorStyles.boldLabel);&#10;        y += lineHeight;&#10;        // Draw each child node using the full custom node UI&#10;        if (childrenProp != null &amp;&amp; childrenProp.isArray) {&#10;            for (int i = 0; i &lt; childrenProp.arraySize; i++) {&#10;                var childProp = childrenProp.GetArrayElementAtIndex(i);&#10;                float childHeight = GetNodeHeight(childProp);&#10;                Rect childRect = new Rect(position.x + 16, y, width - 16, childHeight);&#10;                DrawNode(childRect, childProp, 1); // indent = 1 for children&#10;                y += childHeight + 2;&#10;            }&#10;            // Add button&#10;            Rect addRect = new Rect(position.x + 16, y, width - 16, lineHeight);&#10;            if (GUI.Button(addRect, &quot;+ Add Child Node&quot;)) {&#10;                childrenProp.InsertArrayElementAtIndex(childrenProp.arraySize);&#10;                var newChild = childrenProp.GetArrayElementAtIndex(childrenProp.arraySize - 1);&#10;                newChild.managedReferenceValue = new ConditionLeaf();&#10;                property.serializedObject.ApplyModifiedProperties();&#10;                property.serializedObject.Update();&#10;                EditorUtility.SetDirty(property.serializedObject.targetObject);&#10;                GUI.FocusControl(null);&#10;            }&#10;            y += lineHeight;&#10;        }&#10;        EditorGUI.EndProperty();&#10;    }&#10;    public override float GetPropertyHeight(SerializedProperty property, GUIContent label) {&#10;        float height = EditorGUIUtility.singleLineHeight + 2; // header&#10;        var childrenProp = property.FindPropertyRelative(&quot;children&quot;);&#10;        if (childrenProp != null &amp;&amp; childrenProp.isArray) {&#10;            for (int i = 0; i &lt; childrenProp.arraySize; i++) {&#10;                var childProp = childrenProp.GetArrayElementAtIndex(i);&#10;                height += GetNodeHeight(childProp) + 2;&#10;            }&#10;            height += EditorGUIUtility.singleLineHeight + 2; // add button&#10;        }&#10;        return height;&#10;    }&#10;}&#10;&#10;[CustomPropertyDrawer(typeof(OrCondition))]&#10;public class OrConditionPropertyDrawer : ConditionNodePropertyDrawer {&#10;    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {&#10;        EditorGUI.BeginProperty(position, label, property);&#10;        var childrenProp = property.FindPropertyRelative(&quot;children&quot;);&#10;        float y = position.y;&#10;        float width = position.width;&#10;        float lineHeight = EditorGUIUtility.singleLineHeight + 2;&#10;        // Draw header&#10;        Rect headerRect = new Rect(position.x, y, width, lineHeight);&#10;        EditorGUI.LabelField(headerRect, &quot;OR Group&quot;, EditorStyles.boldLabel);&#10;        y += lineHeight;&#10;        // Draw each child node using the full custom node UI&#10;        if (childrenProp != null &amp;&amp; childrenProp.isArray) {&#10;            for (int i = 0; i &lt; childrenProp.arraySize; i++) {&#10;                var childProp = childrenProp.GetArrayElementAtIndex(i);&#10;                float childHeight = GetNodeHeight(childProp);&#10;                Rect childRect = new Rect(position.x + 16, y, width - 16, childHeight);&#10;                DrawNode(childRect, childProp, 1); // indent = 1 for children&#10;                y += childHeight + 2;&#10;            }&#10;            // Add button&#10;            Rect addRect = new Rect(position.x + 16, y, width - 16, lineHeight);&#10;            if (GUI.Button(addRect, &quot;+ Add Child Node&quot;)) {&#10;                childrenProp.InsertArrayElementAtIndex(childrenProp.arraySize);&#10;                var newChild = childrenProp.GetArrayElementAtIndex(childrenProp.arraySize - 1);&#10;                newChild.managedReferenceValue = new ConditionLeaf();&#10;                property.serializedObject.ApplyModifiedProperties();&#10;                property.serializedObject.Update();&#10;                EditorUtility.SetDirty(property.serializedObject.targetObject);&#10;                GUI.FocusControl(null);&#10;            }&#10;            y += lineHeight;&#10;        }&#10;        EditorGUI.EndProperty();&#10;    }&#10;    public override float GetPropertyHeight(SerializedProperty property, GUIContent label) {&#10;        float height = EditorGUIUtility.singleLineHeight + 2; // header&#10;        var childrenProp = property.FindPropertyRelative(&quot;children&quot;);&#10;        if (childrenProp != null &amp;&amp; childrenProp.isArray) {&#10;            for (int i = 0; i &lt; childrenProp.arraySize; i++) {&#10;                var childProp = childrenProp.GetArrayElementAtIndex(i);&#10;                height += GetNodeHeight(childProp) + 2;&#10;            }&#10;            height += EditorGUIUtility.singleLineHeight + 2; // add button&#10;        }&#10;        return height;&#10;    }&#10;}&#10;&#10;[CustomPropertyDrawer(typeof(NotCondition))]&#10;public class NotConditionPropertyDrawer : ConditionNodePropertyDrawer {}&#10;" />
              <option name="updatedContent" value="// All custom property drawers for node types are now handled by ConditionNodePropertyDrawer.&#10;// This file is no longer needed and can be deleted, or you can leave it empty." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Health/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Health/README.md" />
              <option name="updatedContent" value="// Health/README.md&#10;&#10;# Health System Setup Guide&#10;&#10;## Folder Structure&#10;- `Core/` – Health logic&#10;- `Interfaces/` – All interfaces&#10;- `Shield/` – Shield logic&#10;- `Invincibility/` – Invincibility logic&#10;- `Damage/` – Damage logic and conditions&#10;&#10;## How to Compose Entities in Unity Editor&#10;&#10;### Player (Basic)&#10;- Add `HealthComponent` (Core)&#10;&#10;### Player with Shield&#10;- Add `HealthComponent` (Core)&#10;- Add `ShieldComponent` (Shield)&#10;&#10;### Player with Invincibility&#10;- Add `HealthComponent` (Core)&#10;- Add `InvincibilityComponent` (Invincibility)&#10;- Connect to your `IPowerUp` system to toggle invincibility&#10;&#10;### Enemy&#10;- Add `HealthComponent` (Core)&#10;&#10;### Hazard (Standard)&#10;- Add `HazardComponent` (Damage)&#10;- Add `DamageDealerComponent` (Damage)&#10;- Add a damage condition (e.g., `AlwaysAllowDamage`, `OnlyInvincibleCanDamage`, `OnlyShieldedCanDamage`) as needed&#10;- Assign the condition(s) to the `HazardComponent`'s `damageConditions` array in the Inspector&#10;&#10;### Custom Damage Conditions&#10;- Create a new MonoBehaviour implementing `IDamageCondition`&#10;- Add it to the hazard GameObject&#10;- Assign it in the `HazardComponent`&#10;&#10;## Extending&#10;- To add new damage conditions, create a new script implementing `IDamageCondition` and add it in the Editor. No need to modify existing code.&#10;&#10;## Events&#10;- Use UnityEvents or C# events on components for custom reactions (e.g., OnDeath, OnShieldBroken)&#10;&#10;## Cleanup&#10;- Remove old scripts like `ShieldActiveDisappearHazard`, `OnlyInvincibilityDamageController`, etc. after migration.&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Player/Components/PlayerAnimationController.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Player/Components/PlayerAnimationController.cs" />
              <option name="originalContent" value="using System.Collections;&#10;using System.Collections.Generic;&#10;using Core.Events;&#10;using GabrielBigardi.SpriteAnimator;&#10;using ModularCharacterController.Core;&#10;using ModularCharacterController.Core.Components;&#10;using UnityEngine;&#10;using VContainer;&#10;&#10;namespace Player.Components&#10;{&#10;    /// &lt;summary&gt;&#10;    ///     Handles basic player animation operations&#10;    /// &lt;/summary&gt;&#10;    public class PlayerAnimationController : MonoBehaviour&#10;    {&#10;        private MccGroundCheck _groundCheck;&#10;        private InputHandler _inputHandler;&#10;        private SpriteAnimator _spriteAnimator;&#10;        private SpriteRenderer _spriteRenderer;&#10;        public SpriteAnimationObject OriginalAnimationObject { get; private set; }&#10;&#10;        private IEventBus _eventBus;&#10;&#10;        private bool _isDead = false;&#10;&#10;        public Sprite CurrentSprite&#10;        {&#10;            get =&gt; _spriteRenderer.sprite;&#10;            set =&gt; _spriteRenderer.sprite = value;&#10;        }&#10;&#10;        private void Awake()&#10;        {&#10;            _inputHandler = GetComponent&lt;InputHandler&gt;();&#10;            _spriteAnimator = GetComponent&lt;SpriteAnimator&gt;();&#10;            _spriteRenderer = GetComponent&lt;SpriteRenderer&gt;();&#10;            _groundCheck = GetComponent&lt;MccGroundCheck&gt;();&#10;            OriginalAnimationObject = _spriteAnimator?.SpriteAnimationObject;&#10;        }&#10;&#10;        private void Update()&#10;        {&#10;            if (_isDead) return;&#10;            if (!_inputHandler || !_groundCheck || Mathf.Approximately(Time.timeScale, 0)) return;&#10;&#10;            InputContext input = _inputHandler.CurrentInput;&#10;            // NOTE: I ADDED THIS&#10;            if (input.WalkInput != 0)&#10;            {&#10;                transform.localScale = new Vector3(input.WalkInput, 1, 1);&#10;            }&#10;&#10;            // Don't interrupt the Attacking animation if it's still playing&#10;            if (_spriteAnimator.CurrentAnimation.Name == &quot;Attacking&quot; &amp;&amp; !_spriteAnimator.AnimationCompleted)&#10;            {&#10;                return;&#10;            }&#10;&#10;            // Handle attack&#10;            if (input.AttackPressed)&#10;            {&#10;                _spriteAnimator.Play(&quot;Attacking&quot;);&#10;&#10;                _spriteAnimator.SetOnComplete(() =&gt;&#10;                {&#10;                    if (_groundCheck.IsGrounded)&#10;                    {&#10;                        _spriteAnimator.Play(&quot;Idle&quot;);&#10;                    }&#10;                });&#10;&#10;                return;&#10;            }&#10;&#10;            // Jump animation&#10;            if (!_groundCheck.IsGrounded)&#10;            {&#10;                _spriteAnimator.PlayIfNotPlaying(&quot;Jump&quot;);&#10;&#10;                _spriteAnimator.SetOnComplete(() =&gt;&#10;                {&#10;                    if (_groundCheck.IsGrounded)&#10;                    {&#10;                        _spriteAnimator.Play(&quot;Idle&quot;);&#10;                    }&#10;                });&#10;&#10;                return;&#10;            }&#10;&#10;            // Walk animation&#10;            if (input.WalkInput != 0)&#10;            {&#10;                _spriteAnimator.PlayIfNotPlaying(&quot;Walk&quot;);&#10;                return;&#10;            }&#10;&#10;            // Default to idle&#10;            _spriteAnimator.PlayIfNotPlaying(&quot;Idle&quot;);&#10;        }&#10;&#10;&#10;        /// &lt;summary&gt;&#10;        ///     Change to a new animation object&#10;        /// &lt;/summary&gt;&#10;        public void ChangeAnimationObject(SpriteAnimationObject animationObject)&#10;        {&#10;            _spriteAnimator?.ChangeAnimationObject(animationObject);&#10;        }&#10;&#10;        /// &lt;summary&gt;&#10;        ///     Play a specific animation&#10;        /// &lt;/summary&gt;&#10;        public void PlayAnimation(string animationName)&#10;        {&#10;            _spriteAnimator?.Play(animationName);&#10;        }&#10;&#10;&#10;        /// &lt;summary&gt;&#10;        ///     Pause animation playback&#10;        /// &lt;/summary&gt;&#10;        public void PauseAnimation()&#10;        {&#10;            _spriteAnimator?.Pause();&#10;        }&#10;&#10;&#10;        &#10;        [Inject]&#10;        public void Construct(IEventBus eventBus)&#10;        {&#10;            _eventBus = eventBus;&#10;            _eventBus.Subscribe&lt;PlayerDeathEvent&gt;(OnPlayerDeath);&#10;        }&#10;&#10;        private void OnDisable()&#10;        {&#10;            _eventBus?.Unsubscribe&lt;PlayerDeathEvent&gt;(OnPlayerDeath);&#10;        }&#10;&#10;        private IEnumerator PlayDeathSequence()&#10;        {&#10;            _spriteAnimator.Play(&quot;Death&quot;);&#10;&#10;            float moveUpUnits = 42f / 16f;&#10;            Vector3 startPos = transform.position;&#10;            Vector3 upPos = startPos + new Vector3(0, moveUpUnits, 0);&#10;            float duration = 0.4f;&#10;            float elapsed = 0f;&#10;            while (elapsed &lt; duration)&#10;            {&#10;                transform.position = Vector3.Lerp(startPos, upPos, elapsed / duration);&#10;                elapsed += Time.unscaledDeltaTime;&#10;                yield return null;&#10;            }&#10;            transform.position = upPos;&#10;&#10;            float bottomY = -40f;&#10;            Vector3 downPos = new Vector3(upPos.x, bottomY, upPos.z);&#10;            duration = 0.6f;&#10;            elapsed = 0f;&#10;            while (elapsed &lt; duration)&#10;            {&#10;                transform.position = Vector3.Lerp(upPos, downPos, elapsed / duration);&#10;                elapsed += Time.unscaledDeltaTime;&#10;                yield return null;&#10;            }&#10;            transform.position = downPos;&#10;        }&#10;&#10;        private void OnPlayerDeath(PlayerDeathEvent evt)&#10;        {&#10;            _isDead = true;&#10;            StartCoroutine(PlayDeathSequence());&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using System.Collections;&#10;using System.Collections.Generic;&#10;using Core.Events;&#10;using GabrielBigardi.SpriteAnimator;&#10;using ModularCharacterController.Core;&#10;using ModularCharacterController.Core.Components;&#10;using UnityEngine;&#10;using VContainer;&#10;&#10;namespace Player.Components&#10;{&#10;    /// &lt;summary&gt;&#10;    ///     Handles basic player animation operations&#10;    /// &lt;/summary&gt;&#10;    public class PlayerAnimationController : MonoBehaviour&#10;    {&#10;        private MccGroundCheck _groundCheck;&#10;        private InputHandler _inputHandler;&#10;        private SpriteAnimator _spriteAnimator;&#10;        private SpriteRenderer _spriteRenderer;&#10;        public SpriteAnimationObject OriginalAnimationObject { get; private set; }&#10;&#10;        private IEventBus _eventBus;&#10;&#10;        private bool _isDead = false;&#10;&#10;        public Sprite CurrentSprite&#10;        {&#10;            get =&gt; _spriteRenderer.sprite;&#10;            set =&gt; _spriteRenderer.sprite = value;&#10;        }&#10;&#10;        private void Awake()&#10;        {&#10;            _inputHandler = GetComponent&lt;InputHandler&gt;();&#10;            _spriteAnimator = GetComponent&lt;SpriteAnimator&gt;();&#10;            _spriteRenderer = GetComponent&lt;SpriteRenderer&gt;();&#10;            _groundCheck = GetComponent&lt;MccGroundCheck&gt;();&#10;            OriginalAnimationObject = _spriteAnimator?.SpriteAnimationObject;&#10;        }&#10;&#10;        private void Update()&#10;        {&#10;            if (_isDead) return;&#10;            if (!_inputHandler || !_groundCheck || Mathf.Approximately(Time.timeScale, 0)) return;&#10;&#10;            InputContext input = _inputHandler.CurrentInput;&#10;            // NOTE: I ADDED THIS&#10;            if (input.WalkInput != 0)&#10;            {&#10;                transform.localScale = new Vector3(input.WalkInput, 1, 1);&#10;            }&#10;&#10;            // Don't interrupt the Attacking animation if it's still playing&#10;            if (_spriteAnimator.CurrentAnimation.Name == &quot;Attacking&quot; &amp;&amp; !_spriteAnimator.AnimationCompleted)&#10;            {&#10;                return;&#10;            }&#10;&#10;            // Handle attack&#10;            if (input.AttackPressed)&#10;            {&#10;                _spriteAnimator.Play(&quot;Attacking&quot;);&#10;&#10;                _spriteAnimator.SetOnComplete(() =&gt;&#10;                {&#10;                    if (_groundCheck.IsGrounded)&#10;                    {&#10;                        _spriteAnimator.Play(&quot;Idle&quot;);&#10;                    }&#10;                });&#10;&#10;                return;&#10;            }&#10;&#10;            // Jump animation&#10;            if (!_groundCheck.IsGrounded)&#10;            {&#10;                _spriteAnimator.PlayIfNotPlaying(&quot;Jump&quot;);&#10;&#10;                _spriteAnimator.SetOnComplete(() =&gt;&#10;                {&#10;                    if (_groundCheck.IsGrounded)&#10;                    {&#10;                        _spriteAnimator.Play(&quot;Idle&quot;);&#10;                    }&#10;                });&#10;&#10;                return;&#10;            }&#10;&#10;            // Walk animation&#10;            if (input.WalkInput != 0)&#10;            {&#10;                _spriteAnimator.PlayIfNotPlaying(&quot;Walk&quot;);&#10;                return;&#10;            }&#10;&#10;            // Default to idle&#10;            _spriteAnimator.PlayIfNotPlaying(&quot;Idle&quot;);&#10;        }&#10;&#10;&#10;        /// &lt;summary&gt;&#10;        ///     Change to a new animation object&#10;        /// &lt;/summary&gt;&#10;        public void ChangeAnimationObject(SpriteAnimationObject animationObject)&#10;        {&#10;            _spriteAnimator?.ChangeAnimationObject(animationObject);&#10;        }&#10;&#10;        /// &lt;summary&gt;&#10;        ///     Play a specific animation&#10;        /// &lt;/summary&gt;&#10;        public void PlayAnimation(string animationName)&#10;        {&#10;            _spriteAnimator?.Play(animationName);&#10;        }&#10;&#10;&#10;        /// &lt;summary&gt;&#10;        ///     Pause animation playback&#10;        /// &lt;/summary&gt;&#10;        public void PauseAnimation()&#10;        {&#10;            _spriteAnimator?.Pause();&#10;        }&#10;&#10;&#10;        &#10;        [Inject]&#10;        public void Construct(IEventBus eventBus)&#10;        {&#10;            _eventBus = eventBus;&#10;            _eventBus.Subscribe&lt;PlayerDeathEvent&gt;(OnPlayerDeath);&#10;        }&#10;&#10;        private void OnDisable()&#10;        {&#10;            _eventBus?.Unsubscribe&lt;PlayerDeathEvent&gt;(OnPlayerDeath);&#10;        }&#10;&#10;        private IEnumerator PlayDeathSequence()&#10;        {&#10;            _spriteAnimator.Play(&quot;Death&quot;);&#10;&#10;            // Move player up by a relative amount (e.g., 2 units)&#10;            float moveUpUnits = 2f;&#10;            Vector3 startPos = transform.position;&#10;            Vector3 upPos = startPos + Vector3.up * moveUpUnits;&#10;            float duration = 0.4f;&#10;            float elapsed = 0f;&#10;            while (elapsed &lt; duration)&#10;            {&#10;                transform.position = Vector3.Lerp(startPos, upPos, elapsed / duration);&#10;                elapsed += Time.unscaledDeltaTime;&#10;                yield return null;&#10;            }&#10;            transform.position = upPos;&#10;&#10;            // Move player down by a relative amount (e.g., 10 units)&#10;            float moveDownUnits = 10f;&#10;            Vector3 downPos = upPos + Vector3.down * moveDownUnits;&#10;            duration = 0.6f;&#10;            elapsed = 0f;&#10;            while (elapsed &lt; duration)&#10;            {&#10;                transform.position = Vector3.Lerp(upPos, downPos, elapsed / duration);&#10;                elapsed += Time.unscaledDeltaTime;&#10;                yield return null;&#10;            }&#10;            transform.position = downPos;&#10;        }&#10;&#10;        private void OnPlayerDeath(PlayerDeathEvent evt)&#10;        {&#10;            _isDead = true;&#10;            StartCoroutine(PlayDeathSequence());&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Player/Components/PlayerInvincibleDamageDealer.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Player/Components/PlayerInvincibleDamageDealer.cs" />
              <option name="updatedContent" value="using Health.Interfaces;&#10;using UnityEngine;&#10;&#10;namespace Player.Components&#10;{&#10;    /// &lt;summary&gt;&#10;    /// When enabled, instantly kills any damageable object the player collides with.&#10;    /// Should be enabled only when the player is invincible.&#10;    /// &lt;/summary&gt;&#10;    [DisallowMultipleComponent]&#10;    public class PlayerInvincibleDamageDealer : MonoBehaviour, IDamageDealer&#10;    {&#10;        [SerializeField] private int damageAmount = 9999; // &quot;Kill&quot; value&#10;        [SerializeField] private LayerMask targetLayers = ~0; // All by default&#10;&#10;        public int GetDamageAmount() =&gt; damageAmount;&#10;&#10;        private void OnCollisionEnter2D(Collision2D collision)&#10;        {&#10;            if (((1 &lt;&lt; collision.gameObject.layer) &amp; targetLayers) == 0)&#10;                return;&#10;            var damageable = collision.gameObject.GetComponent&lt;IDamageable&gt;();&#10;            if (damageable != null)&#10;            {&#10;                damageable.Damage(damageAmount, gameObject);&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Player/Services/PlayerLivesService.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Player/Services/PlayerLivesService.cs" />
              <option name="originalContent" value="using System;&#10;using Core.Data;&#10;using Core.Events;&#10;using Player.Interfaces;&#10;using UnityEngine;&#10;&#10;namespace Player.Services&#10;{&#10;    public class PlayerLivesService : IPlayerLivesService&#10;    {&#10;        private readonly IEventBus _eventBus;&#10;        private readonly IGameDataService _gameDataService;&#10;&#10;        public PlayerLivesService(IGameDataService gameDataService, IEventBus eventBus)&#10;        {&#10;            _gameDataService = gameDataService;&#10;            _eventBus = eventBus;&#10;            MaxLives = GameData.MaxLives;&#10;&#10;            Debug.Log(&quot;[PlayerLivesService] Initialized with max lives: &quot; + MaxLives);&#10;            &#10;            if (_gameDataService == null)&#10;            {&#10;                Debug.LogError(&quot;[PlayerLivesService] _gameDataService is null.&quot;);&#10;            }&#10;&#10;            if (_eventBus == null)&#10;            {&#10;                Debug.LogError(&quot;[PlayerLivesService] _eventBus is null.&quot;);&#10;            }&#10;        }&#10;&#10;        public int CurrentLives =&gt; _gameDataService.CurrentData.lives;&#10;        public int MaxLives { get; }&#10;&#10;        public bool HasLivesRemaining =&gt; CurrentLives &gt; 0;&#10;&#10;        public event Action&lt;int&gt; OnLivesChanged;&#10;        public event Action&lt;Vector3&gt; OnOneUpAwarded;&#10;        public bool TryUseLife()&#10;        {&#10;            if (CurrentLives &lt;= 0) return false;&#10;&#10;            int newLives = CurrentLives - 1;&#10;            _gameDataService.UpdateLives(newLives);&#10;&#10;            OnLivesChanged?.Invoke(newLives);&#10;&#10;            _eventBus?.Publish(new PlayerLivesChangedEvent&#10;            {&#10;                PreviousLives = CurrentLives,&#10;                CurrentLives = newLives,&#10;                MaxLives = MaxLives,&#10;                Timestamp = Time.time&#10;            });&#10;&#10;            return newLives &gt; 0;&#10;        }&#10;&#10;        public void ResetLives()&#10;        {&#10;            _gameDataService.UpdateLives(MaxLives);&#10;            OnLivesChanged?.Invoke(MaxLives);&#10;        }&#10;&#10;        public void AddLife(Vector3 collectPosition)&#10;        {&#10;            int newLives = CurrentLives + 1;&#10;            _gameDataService.UpdateLives(newLives);&#10;            OnLivesChanged?.Invoke(newLives);&#10;            OnOneUpAwarded?.Invoke(collectPosition);&#10;            _eventBus?.Publish(new PlayerLivesChangedEvent&#10;            {&#10;                PreviousLives = CurrentLives,&#10;                CurrentLives = newLives,&#10;                MaxLives = MaxLives,&#10;                Timestamp = Time.time&#10;            });&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using System;&#10;using Core.Data;&#10;using Core.Events;&#10;using Player.Interfaces;&#10;using UnityEngine;&#10;&#10;namespace Player.Services&#10;{&#10;    public class PlayerLivesService : IPlayerLivesService&#10;    {&#10;        private readonly IEventBus _eventBus;&#10;        private readonly IGameDataService _gameDataService;&#10;&#10;        public PlayerLivesService(IGameDataService gameDataService, IEventBus eventBus)&#10;        {&#10;            _gameDataService = gameDataService;&#10;            _eventBus = eventBus;&#10;            MaxLives = GameData.MaxLives;&#10;&#10;            Debug.Log(&quot;[PlayerLivesService] Initialized with max lives: &quot; + MaxLives);&#10;            &#10;            if (_gameDataService == null)&#10;            {&#10;                Debug.LogError(&quot;[PlayerLivesService] _gameDataService is null.&quot;);&#10;            }&#10;&#10;            if (_eventBus == null)&#10;            {&#10;                Debug.LogError(&quot;[PlayerLivesService] _eventBus is null.&quot;);&#10;            }&#10;        }&#10;&#10;        public int CurrentLives =&gt; _gameDataService.CurrentData.lives;&#10;        public int MaxLives { get; }&#10;&#10;        public bool HasLivesRemaining =&gt; CurrentLives &gt; 0;&#10;&#10;        public event Action&lt;int&gt; OnLivesChanged;&#10;        public event Action&lt;Vector3&gt; OnOneUpAwarded;&#10;        public bool TryUseLife()&#10;        {&#10;            if (CurrentLives &lt;= 0) return false;&#10;&#10;            int previousLives = CurrentLives;&#10;            int newLives = previousLives - 1;&#10;&#10;            // Update lives before publishing the event&#10;            _gameDataService.UpdateLives(newLives);&#10;&#10;            OnLivesChanged?.Invoke(newLives);&#10;&#10;            _eventBus?.Publish(new PlayerLivesChangedEvent&#10;            {&#10;                PreviousLives = previousLives,&#10;                CurrentLives = newLives,&#10;                MaxLives = MaxLives,&#10;                Timestamp = Time.time&#10;            });&#10;&#10;            return newLives &gt; 0;&#10;        }&#10;&#10;        public void ResetLives()&#10;        {&#10;            _gameDataService.UpdateLives(MaxLives);&#10;            OnLivesChanged?.Invoke(MaxLives);&#10;        }&#10;&#10;        public void AddLife(Vector3 collectPosition)&#10;        {&#10;            int previousLives = CurrentLives;&#10;            int newLives = previousLives + 1;&#10;&#10;            // Update lives before publishing the event&#10;            _gameDataService.UpdateLives(newLives);&#10;&#10;            OnLivesChanged?.Invoke(newLives);&#10;            OnOneUpAwarded?.Invoke(collectPosition);&#10;            _eventBus?.Publish(new PlayerLivesChangedEvent&#10;            {&#10;                PreviousLives = previousLives,&#10;                CurrentLives = newLives,&#10;                MaxLives = MaxLives,&#10;                Timestamp = Time.time&#10;            });&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Pooling/PooledObject.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Pooling/PooledObject.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;&#10;namespace Pooling&#10;{&#10;    public class PooledObject : MonoBehaviour&#10;    {&#10;        public GameObject prefab;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>