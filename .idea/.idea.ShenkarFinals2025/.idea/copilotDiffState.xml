<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemies/Behaviors/EnemyDeath.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemies/Behaviors/EnemyDeath.cs" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="using UnityEngine;&#10;&#10;namespace Enemies.Behaviors&#10;{&#10;    // Disables the enemy GameObject forever when Die() is called&#10;    public class EnemyDeath : MonoBehaviour&#10;    {&#10;        private Health.Interfaces.IHealthEvents _healthEvents;&#10;&#10;        private void Awake()&#10;        {&#10;            _healthEvents = GetComponent&lt;Health.Interfaces.IHealthEvents&gt;();&#10;            if (_healthEvents != null)&#10;                _healthEvents.OnDeath += Die;&#10;        }&#10;&#10;        private void OnDestroy()&#10;        {&#10;            if (_healthEvents != null)&#10;                _healthEvents.OnDeath -= Die;&#10;        }&#10;&#10;        public void Die()&#10;        {&#10;            gameObject.SetActive(false);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemies/Behaviors/FrogProximityJump.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemies/Behaviors/FrogProximityJump.cs" />
              <option name="originalContent" value="using UnityEngine;&#10;using Enemies.Interfaces;&#10;using Player.Components;&#10;&#10;namespace Enemies.Behaviors&#10;{&#10;    // Makes the enemy jump when the player is within a certain distance&#10;    [RequireComponent(typeof(Rigidbody2D))]&#10;    public class FrogProximityJump : MonoBehaviour, ITriggerBehavior&#10;    {&#10;        [SerializeField] private float triggerDistance = 3f;&#10;        [SerializeField] private float jumpForceX = 4f;&#10;        [SerializeField] private float jumpForceY = 8f;&#10;        [SerializeField] private float jumpCooldown = 2f;&#10;        [SerializeField] private int checkEveryNFrames = 1; &#10;        private Rigidbody2D _rb;&#10;        private float _lastJumpTime;&#10;        private Transform _player;&#10;        private int _frameCounter;&#10;        private bool _grounded;&#10;&#10;        private void Awake()&#10;        {&#10;            _rb = GetComponent&lt;Rigidbody2D&gt;();&#10;            _player = PlayerLocator.PlayerTransform;&#10;        }&#10;&#10;        private void OnCollisionEnter2D(Collision2D collision)&#10;        {&#10;            _grounded = true;&#10;        }&#10;&#10;        private void OnCollisionExit2D(Collision2D collision)&#10;        {&#10;            _grounded = false;&#10;        }&#10;&#10;        public void CheckTrigger()&#10;        {&#10;            _frameCounter++;&#10;            if (_frameCounter % checkEveryNFrames != 0) return;&#10;            if (!_player) return;&#10;            float sqrDist = (transform.position - _player.position).sqrMagnitude;&#10;            float sqrTrigger = triggerDistance * triggerDistance;&#10;            if (sqrDist &lt; sqrTrigger &amp;&amp; Time.time - _lastJumpTime &gt; jumpCooldown &amp;&amp; _grounded)&#10;            {&#10;                // Jump in the direction the object is facing&#10;                Vector2 jumpDir = new Vector2(transform.right.x * jumpForceX, jumpForceY);&#10;                _rb.linearVelocity = jumpDir;&#10;                _lastJumpTime = Time.time;&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using UnityEngine;&#10;using Enemies.Interfaces;&#10;using Player.Components;&#10;&#10;namespace Enemies.Behaviors&#10;{&#10;    // Makes the enemy jump when the player is within a certain distance&#10;    [RequireComponent(typeof(Rigidbody2D))]&#10;    public class FrogProximityJump : MonoBehaviour, ITriggerBehavior&#10;    {&#10;        [SerializeField] private float triggerDistance = 3f;&#10;        [SerializeField] private float jumpForceX = 4f;&#10;        [SerializeField] private float jumpForceY = 8f;&#10;        [SerializeField] private float jumpCooldown = 2f;&#10;        [SerializeField] private int checkEveryNFrames = 1; &#10;        private Rigidbody2D _rb;&#10;        private float _lastJumpTime;&#10;        private Transform _player;&#10;        private int _frameCounter;&#10;        private bool _grounded;&#10;&#10;        private void Awake()&#10;        {&#10;            _rb = GetComponent&lt;Rigidbody2D&gt;();&#10;            _player = PlayerLocator.PlayerTransform;&#10;        }&#10;&#10;        private void OnCollisionEnter2D(Collision2D collision)&#10;        {&#10;            _grounded = true;&#10;        }&#10;&#10;        private void OnCollisionExit2D(Collision2D collision)&#10;        {&#10;            _grounded = false;&#10;        }&#10;&#10;        public void CheckTrigger()&#10;        {&#10;            _frameCounter++;&#10;            if (_frameCounter % checkEveryNFrames != 0) return;&#10;            if (!_player) return;&#10;            float sqrDist = (transform.position - _player.position).sqrMagnitude;&#10;            float sqrTrigger = triggerDistance * triggerDistance;&#10;            if (sqrDist &lt; sqrTrigger &amp;&amp; Time.time - _lastJumpTime &gt; jumpCooldown &amp;&amp; _grounded)&#10;            {&#10;                // Jump in the direction the object is facing (local scale)&#10;                Vector2 jumpDir = new Vector2(transform.localScale.x * jumpForceX, jumpForceY);&#10;                _rb.linearVelocity = jumpDir;&#10;                _lastJumpTime = Time.time;&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemies/Behaviors/JumpMover.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemies/Behaviors/JumpMover.cs" />
              <option name="originalContent" value="using UnityEngine;&#10;using Enemies.Interfaces;&#10;&#10;namespace Enemies.Behaviors&#10;{&#10;    // Makes the enemy jump forward at intervals (configurable for snakes, frogs, etc.)&#10;    [RequireComponent(typeof(Rigidbody2D))]&#10;    public class JumpMover : MonoBehaviour, IMovementBehavior&#10;    {&#10;        [SerializeField] private float jumpForceX = 2f;&#10;        [SerializeField] private float jumpForceY = 5f;&#10;        [SerializeField] private float jumpInterval = 2f;&#10;        private Rigidbody2D _rb;&#10;        private float _nextJumpTime;&#10;&#10;        private void Awake()&#10;        {&#10;            _rb = GetComponent&lt;Rigidbody2D&gt;();&#10;            _nextJumpTime = Time.time + jumpInterval;&#10;        }&#10;&#10;        public void Move()&#10;        {&#10;            if (Time.time &gt;= _nextJumpTime &amp;&amp; IsGrounded())&#10;            {&#10;                _rb.linearVelocity = new Vector2(jumpForceX, jumpForceY);&#10;                _nextJumpTime = Time.time + jumpInterval;&#10;            }&#10;        }&#10;&#10;        private bool IsGrounded()&#10;        {&#10;            return Physics2D.Raycast(transform.position, Vector2.down, 0.1f);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using UnityEngine;&#10;using Enemies.Interfaces;&#10;&#10;namespace Enemies.Behaviors&#10;{&#10;    // Makes the enemy jump forward at intervals (configurable for snakes, frogs, etc.)&#10;    [RequireComponent(typeof(Rigidbody2D))]&#10;    public class JumpMover : MonoBehaviour, IMovementBehavior&#10;    {&#10;        [SerializeField] private float jumpForceX = 2f;&#10;        [SerializeField] private float jumpForceY = 5f;&#10;        [SerializeField] private float jumpInterval = 2f;&#10;        private Rigidbody2D _rb;&#10;        private float _nextJumpTime;&#10;        private bool _grounded;&#10;&#10;        private void Awake()&#10;        {&#10;            _rb = GetComponent&lt;Rigidbody2D&gt;();&#10;            _nextJumpTime = Time.time + jumpInterval;&#10;        }&#10;&#10;        private void OnCollisionEnter2D(Collision2D collision)&#10;        {&#10;            // Consider any collision as grounded (customize layer/tag if needed)&#10;            _grounded = true;&#10;        }&#10;&#10;        private void OnCollisionExit2D(Collision2D collision)&#10;        {&#10;            _grounded = false;&#10;        }&#10;&#10;        public void Move()&#10;        {&#10;            if (Time.time &gt;= _nextJumpTime &amp;&amp; _grounded)&#10;            {&#10;                // Jump in the direction the object is facing&#10;                Vector2 jumpDir = new Vector2(transform.right.x * jumpForceX, jumpForceY);&#10;                _rb.linearVelocity = jumpDir;&#10;                _nextJumpTime = Time.time + jumpInterval;&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemies/Behaviors/ProjectileShooter.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemies/Behaviors/ProjectileShooter.cs" />
              <option name="originalContent" value="using UnityEngine;&#10;using Enemies.Interfaces;&#10;using Weapons.Models;&#10;&#10;namespace Enemies.Behaviors&#10;{&#10;    // Shoots a projectile at intervals from a specified fire point&#10;    public class ProjectileShooter : MonoBehaviour, IAttackBehavior&#10;    {&#10;        [SerializeField] private FireballWeapon fireballWeapon;&#10;        [SerializeField] private float fireInterval = 2f;&#10;&#10;&#10;        public void Attack()&#10;        {&#10;            if (!fireballWeapon)&#10;                return;&#10;            fireballWeapon.Shoot();&#10;&#10;        }&#10;&#10;  &#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using System;&#10;using UnityEngine;&#10;using Enemies.Interfaces;&#10;using Weapons.Models;&#10;&#10;namespace Enemies.Behaviors&#10;{&#10;    // Shoots a projectile at intervals from a specified fire point&#10;    public class ProjectileShooter : MonoBehaviour, IAttackBehavior&#10;    {&#10;        [SerializeField] private FireballWeapon fireballWeapon;&#10;        [SerializeField] private float fireInterval = 2f;&#10;&#10;        private float _lastFireTime;&#10;&#10;&#10;        public void Attack()&#10;        {&#10;            if (!fireballWeapon)&#10;                return;&#10;            if (Time.time - _lastFireTime &lt; fireInterval)&#10;                return;&#10;            fireballWeapon.Shoot();&#10;            _lastFireTime = Time.time;&#10;        }&#10;&#10;  &#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemies/Behaviors/RespawningEnemyDeath.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemies/Behaviors/RespawningEnemyDeath.cs" />
              <option name="originalContent" value="using UnityEngine;&#10;using Health.Interfaces;&#10;using System.Threading.Tasks;&#10;&#10;namespace Enemies.Behaviors&#10;{&#10;    // Disables the enemy GameObject, then respawns it at the same position after a delay&#10;    public class RespawningEnemyDeath : MonoBehaviour&#10;    {&#10;        [SerializeField] private float respawnDelay = 3f;&#10;        private Vector3 _respawnPosition;&#10;        private Quaternion _respawnRotation;&#10;        private IHealthEvents _healthEvents;&#10;&#10;        private void Awake()&#10;        {&#10;            _respawnPosition = transform.position;&#10;            _respawnRotation = transform.rotation;&#10;            _healthEvents = GetComponent&lt;IHealthEvents&gt;();&#10;            if (_healthEvents != null)&#10;                _healthEvents.OnDeath += Die;&#10;        }&#10;&#10;        private void OnDestroy()&#10;        {&#10;            if (_healthEvents != null)&#10;                _healthEvents.OnDeath -= Die;&#10;        }&#10;&#10;        private void Die()&#10;        {&#10;            _ = RespawnTask();&#10;        }&#10;&#10;        private async Task RespawnTask()&#10;        {&#10;            gameObject.SetActive(false);&#10;            await Task.Delay((int)(respawnDelay * 1000f));&#10;            transform.position = _respawnPosition;&#10;            transform.rotation = _respawnRotation;&#10;            gameObject.SetActive(true);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using UnityEngine;&#10;using Health.Interfaces;&#10;using System.Threading.Tasks;&#10;&#10;namespace Enemies.Behaviors&#10;{&#10;    // Disables the enemy GameObject, then respawns it at the same position after a delay&#10;    public class RespawningEnemyDeath : MonoBehaviour&#10;    {&#10;        [SerializeField] private float respawnDelay = 3f;&#10;        private Vector3 _respawnPosition;&#10;        private Quaternion _respawnRotation;&#10;        private Vector3 _initialPosition;&#10;        private Quaternion _initialRotation;&#10;        private Vector3 _initialScale;&#10;        private IHealthEvents _healthEvents;&#10;        private IHealth _health;&#10;&#10;        private void Awake()&#10;        {&#10;            _respawnPosition = transform.position;&#10;            _respawnRotation = transform.rotation;&#10;            _initialPosition = transform.position;&#10;            _initialRotation = transform.rotation;&#10;            _initialScale = transform.localScale;&#10;            _healthEvents = GetComponent&lt;IHealthEvents&gt;();&#10;            _health = GetComponent&lt;IHealth&gt;();&#10;            if (_healthEvents != null)&#10;                _healthEvents.OnDeath += Die;&#10;        }&#10;&#10;        private void OnDestroy()&#10;        {&#10;            if (_healthEvents != null)&#10;                _healthEvents.OnDeath -= Die;&#10;        }&#10;&#10;        private void Die()&#10;        {&#10;            _ = RespawnTask();&#10;        }&#10;&#10;        private async Task RespawnTask()&#10;        {&#10;            gameObject.SetActive(false);&#10;            await Task.Delay((int)(respawnDelay * 1000f));&#10;            // Do NOT reset transform&#10;            // Reset health if possible&#10;            if (_health != null)&#10;            {&#10;                // If health is zero, restore to max&#10;                if (_health.CurrentHp &lt;= 0)&#10;                {&#10;                    var maxHp = _health.MaxHp;&#10;                    _health.Heal(maxHp);&#10;                }&#10;            }&#10;            // Optionally reset other components (velocity, AI, etc.)&#10;            gameObject.SetActive(true);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemies/Behaviors/VerticalMover.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemies/Behaviors/VerticalMover.cs" />
              <option name="originalContent" value="using UnityEngine;&#10;using Enemies.Interfaces;&#10;&#10;namespace Enemies.Behaviors&#10;{&#10;    // Moves the enemy up and down at a constant speed&#10;    public class VerticalMover : MonoBehaviour, IMovementBehavior&#10;    {&#10;        [SerializeField] private float amplitude = 2f;&#10;        [SerializeField] private float frequency = 1.11f;&#10;&#10;        private Rigidbody2D _rb;&#10;        private float _startY;&#10;&#10;        private void Awake()&#10;        {&#10;            _rb = GetComponent&lt;Rigidbody2D&gt;();&#10;            _startY = transform.position.y;&#10;        }&#10;&#10;        public void Move()&#10;        {&#10;            float t = Mathf.PingPong(Time.time * frequency, 1f);&#10;            float triangle = 2f * Mathf.Abs(t - 0.5f);&#10;            float y = _startY + (triangle - 0.5f) * 2f * amplitude;&#10;            _rb.linearVelocityY = (y - _rb.position.y) / Time.fixedDeltaTime;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using UnityEngine;&#10;using Enemies.Interfaces;&#10;&#10;namespace Enemies.Behaviors&#10;{&#10;    // Moves the enemy up and down at a constant speed&#10;    public class VerticalMover : MonoBehaviour, IMovementBehavior&#10;    {&#10;        [SerializeField] private float amplitude = 2f;&#10;        [SerializeField] private float frequency = 0.8f; // Lowered for NES-like pacing&#10;&#10;        private Rigidbody2D _rb;&#10;        private float _startY;&#10;&#10;        private void Awake()&#10;        {&#10;            _rb = GetComponent&lt;Rigidbody2D&gt;();&#10;            _startY = transform.position.y;&#10;        }&#10;&#10;        public void Move()&#10;        {&#10;            float t = Mathf.PingPong(Time.time * frequency, 1f);&#10;            float triangle = 2f * Mathf.Abs(t - 0.5f);&#10;            float y = _startY + (triangle - 0.5f) * 2f * amplitude;&#10;            _rb.linearVelocityY = (y - _rb.position.y) / Time.fixedDeltaTime;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemies/Behaviors/WaveMover.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemies/Behaviors/WaveMover.cs" />
              <option name="originalContent" value="using UnityEngine;&#10;using Enemies.Interfaces;&#10;&#10;namespace Enemies.Behaviors&#10;{&#10;    // Moves the enemy left while oscillating up and down (wave/flap motion)&#10;    public class WaveMover : MonoBehaviour, IMovementBehavior&#10;    {&#10;        [SerializeField] private float speed = 2f;&#10;        [SerializeField] private float amplitude = 1f;&#10;        [SerializeField] private float frequency = 1.11f;&#10;        private float _startY;&#10;        private Rigidbody2D _rb;&#10;&#10;        private void Awake()&#10;        {&#10;            _rb = GetComponent&lt;Rigidbody2D&gt;();&#10;            _startY = transform.position.y;&#10;        }&#10;&#10;        public void Move()&#10;        {&#10;            float y = _startY + Mathf.Sin(Time.time * frequency) * amplitude;&#10;            _rb.linearVelocity = new Vector2(-speed, (y - _rb.position.y) / Time.fixedDeltaTime);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using UnityEngine;&#10;using Enemies.Interfaces;&#10;&#10;namespace Enemies.Behaviors&#10;{&#10;    // Moves the enemy left while oscillating up and down (wave/flap motion)&#10;    public class WaveMover : MonoBehaviour, IMovementBehavior&#10;    {&#10;        [SerializeField] private float speed = 2f;&#10;        [SerializeField] private float amplitude = 1f;&#10;        [SerializeField] private float frequency = 1.11f;&#10;        private float _startY;&#10;        private Rigidbody2D _rb;&#10;&#10;        private void Awake()&#10;        {&#10;            _rb = GetComponent&lt;Rigidbody2D&gt;();&#10;            _startY = transform.position.y;&#10;        }&#10;&#10;        public void Move()&#10;        {&#10;            // Use a triangle wave for NES-style crow movement (constant speed up/down)&#10;            float t = Mathf.PingPong(Time.time * frequency, 1f);&#10;            float triangle = 2f * Mathf.Abs(t - 0.5f);&#10;            float y = _startY + (triangle - 0.5f) * 2f * amplitude;&#10;            _rb.linearVelocity = new Vector2(-speed, (y - _rb.position.y) / Time.fixedDeltaTime);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemies/Core/EnemyAttackController.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemies/Core/EnemyAttackController.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;using Enemies.Interfaces;&#10;&#10;namespace Enemies.Core&#10;{&#10;    // Handles all attack behaviors for an enemy&#10;    public class EnemyAttackController : MonoBehaviour&#10;    {&#10;        private IAttackBehavior[] _attackBehaviors;&#10;&#10;        private void Awake()&#10;        {&#10;            _attackBehaviors = GetComponents&lt;IAttackBehavior&gt;();&#10;        }&#10;&#10;        private void LateUpdate()&#10;        {&#10;            foreach (var attack in _attackBehaviors)&#10;                attack.Attack();&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemies/Core/EnemyBehaviorController.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemies/Core/EnemyBehaviorController.cs" />
              <option name="originalContent" value="using UnityEngine;&#10;using Enemies.Interfaces;&#10;&#10;namespace Enemies.Core&#10;{&#10;    // Wires up modular behaviors. Attach this to any enemy prefab.&#10;    public class EnemyBehaviorController : MonoBehaviour&#10;    {&#10;        private IMovementBehavior[] _movementBehaviors;&#10;        private IAttackBehavior[] _attackBehaviors;&#10;        private ITriggerBehavior[] _triggerBehaviors;&#10;&#10;        private void Awake()&#10;        {&#10;            _movementBehaviors = GetComponents&lt;IMovementBehavior&gt;();&#10;            _attackBehaviors = GetComponents&lt;IAttackBehavior&gt;();&#10;            _triggerBehaviors = GetComponents&lt;ITriggerBehavior&gt;();&#10;        }&#10;&#10;        private void Update()&#10;        {&#10;            foreach (ITriggerBehavior trigger in _triggerBehaviors) trigger.CheckTrigger();&#10;            foreach (IMovementBehavior move in _movementBehaviors) move.Move();&#10;            foreach (IAttackBehavior attack in _attackBehaviors) attack.Attack();&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using UnityEngine;&#10;using Enemies.Interfaces;&#10;&#10;namespace Enemies.Core&#10;{&#10;    // Coordinates modular behaviors. Attach this to any enemy prefab.&#10;    public class EnemyBehaviorController : MonoBehaviour&#10;    {&#10;        private IMovementBehavior[] _movementBehaviors;&#10;        private IAttackBehavior[] _attackBehaviors;&#10;        private ITriggerBehavior[] _triggerBehaviors;&#10;&#10;        private void Awake()&#10;        {&#10;            _movementBehaviors = GetComponents&lt;IMovementBehavior&gt;();&#10;            _attackBehaviors = GetComponents&lt;IAttackBehavior&gt;();&#10;            _triggerBehaviors = GetComponents&lt;ITriggerBehavior&gt;();&#10;        }&#10;&#10;        private void Update()&#10;        {&#10;            foreach (ITriggerBehavior trigger in _triggerBehaviors) trigger.CheckTrigger();&#10;        }&#10;&#10;        private void FixedUpdate()&#10;        {&#10;            foreach (IMovementBehavior move in _movementBehaviors) move.Move();&#10;        }&#10;&#10;        private void LateUpdate()&#10;        {&#10;            foreach (IAttackBehavior attack in _attackBehaviors) attack.Attack();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemies/Core/EnemyController.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemies/Core/EnemyController.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;using Enemies.Interfaces;&#10;&#10;namespace Enemies.Core&#10;{&#10;    // Wires up modular behaviors. Attach this to any enemy prefab.&#10;    public class EnemyController : MonoBehaviour&#10;    {&#10;        private IMovementBehavior[] _movementBehaviors;&#10;        private IAttackBehavior[] _attackBehaviors;&#10;        private ITriggerBehavior[] _triggerBehaviors;&#10;&#10;        private void Awake()&#10;        {&#10;            _movementBehaviors = GetComponents&lt;IMovementBehavior&gt;();&#10;            _attackBehaviors = GetComponents&lt;IAttackBehavior&gt;();&#10;            _triggerBehaviors = GetComponents&lt;ITriggerBehavior&gt;();&#10;        }&#10;&#10;        private void Update()&#10;        {&#10;            foreach (var trigger in _triggerBehaviors) trigger.CheckTrigger();&#10;            foreach (var move in _movementBehaviors) move.Move();&#10;            foreach (var attack in _attackBehaviors) attack.Attack();&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemies/Core/EnemyMovementController.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemies/Core/EnemyMovementController.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;using Enemies.Interfaces;&#10;&#10;namespace Enemies.Core&#10;{&#10;    // Handles all movement behaviors for an enemy&#10;    public class EnemyMovementController : MonoBehaviour&#10;    {&#10;        private IMovementBehavior[] _movementBehaviors;&#10;&#10;        private void Awake()&#10;        {&#10;            _movementBehaviors = GetComponents&lt;IMovementBehavior&gt;();&#10;        }&#10;&#10;        private void FixedUpdate()&#10;        {&#10;            foreach (var move in _movementBehaviors)&#10;                move.Move();&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemies/Core/EnemyTriggerController.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemies/Core/EnemyTriggerController.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;using Enemies.Interfaces;&#10;&#10;namespace Enemies.Core&#10;{&#10;    // Handles all trigger behaviors for an enemy&#10;    public class EnemyTriggerController : MonoBehaviour&#10;    {&#10;        private ITriggerBehavior[] _triggerBehaviors;&#10;&#10;        private void Awake()&#10;        {&#10;            _triggerBehaviors = GetComponents&lt;ITriggerBehavior&gt;();&#10;        }&#10;&#10;        private void Update()&#10;        {&#10;            foreach (var trigger in _triggerBehaviors)&#10;                trigger.CheckTrigger();&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemies/Interfaces/IAttackBehavior.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemies/Interfaces/IAttackBehavior.cs" />
              <option name="updatedContent" value="namespace Enemies.Interfaces&#10;{&#10;    public interface IAttackBehavior&#10;    {&#10;        void Attack();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemies/Interfaces/IMovementBehavior.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemies/Interfaces/IMovementBehavior.cs" />
              <option name="updatedContent" value="namespace Enemies.Interfaces&#10;{&#10;    public interface IMovementBehavior&#10;    {&#10;        void Move();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemies/Interfaces/ITriggerBehavior.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemies/Interfaces/ITriggerBehavior.cs" />
              <option name="updatedContent" value="namespace Enemies.Interfaces&#10;{&#10;    public interface ITriggerBehavior&#10;    {&#10;        void CheckTrigger();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemy/Behaviors/EnemyBehaviors.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemy/Behaviors/EnemyBehaviors.cs" />
              <option name="updatedContent" value="namespace Enemy.Behaviors&#10;{&#10;    // Optional movement behavior&#10;    public interface IMovable&#10;    {&#10;        void Move();&#10;    }&#10;&#10;    // Optional player proximity reaction&#10;    public interface IPlayerProximityReactable&#10;    {&#10;        void OnPlayerNearby();&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemy/BirdEnemy.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemy/BirdEnemy.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;using Enemy.Behaviors;&#10;&#10;namespace Enemy&#10;{&#10;    // Bird: Moves left, goes up and down&#10;    public class BirdEnemy : EnemyBase, IMovable&#10;    {&#10;        [SerializeField] private float moveSpeed = 2f;&#10;        [SerializeField] private float verticalAmplitude = 1f;&#10;        [SerializeField] private float verticalFrequency = 1f;&#10;        private Vector3 _startPos;&#10;        private float _time;&#10;&#10;        protected override void Awake()&#10;        {&#10;            base.Awake();&#10;            _startPos = transform.position;&#10;        }&#10;&#10;        public void Move()&#10;        {&#10;            _time += Time.deltaTime;&#10;            float yOffset = Mathf.Sin(_time * verticalFrequency) * verticalAmplitude;&#10;            transform.position = _startPos + new Vector3(-moveSpeed * _time, yOffset, 0);&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemy/EnemyBase.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemy/EnemyBase.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;&#10;namespace Enemy&#10;{&#10;    public abstract class EnemyBase : MonoBehaviour&#10;    {&#10;        protected Rigidbody2D rb;&#10;        protected Collider2D col;&#10;        protected virtual void Awake()&#10;        {&#10;            rb = GetComponent&lt;Rigidbody2D&gt;();&#10;            col = GetComponent&lt;Collider2D&gt;();&#10;        }&#10;&#10;        public virtual void Move() { }&#10;        public virtual void Attack() { }&#10;        public virtual void OnPlayerNearby() { }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemy/EnemyBuilder.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemy/EnemyBuilder.cs" />
              <option name="originalContent" value="using Enemy.Behaviors;&#10;using Weapons.Models;&#10;using UnityEngine;&#10;&#10;namespace Enemy&#10;{&#10;    public class EnemyBuilder&#10;    {&#10;        private readonly EnemyBase _enemy;&#10;&#10;        public EnemyBuilder(EnemyBase enemy)&#10;        {&#10;            _enemy = enemy;&#10;        }&#10;&#10;        public EnemyBuilder WithFireSnakeBehavior()&#10;        {&#10;            // Example: assign FireballWeapon if available&#10;            var fireSnake = _enemy as FireSnakeEnemy;&#10;            if (fireSnake)&#10;            {&#10;                FireballWeapon weapon = fireSnake.GetComponentInChildren&lt;FireballWeapon&gt;();&#10;                if (weapon)&#10;                {&#10;                    weapon.Equip();&#10;                    // Additional setup if needed&#10;                }&#10;            }&#10;            return this;&#10;        }&#10;&#10;        public EnemyBuilder WithSpiderBehavior()&#10;        {&#10;            // Assign movement or proximity logic as needed&#10;            return this;&#10;        }&#10;&#10;        public EnemyBuilder WithBirdBehavior()&#10;        {&#10;            // Assign movement logic as needed&#10;            return this;&#10;        }&#10;&#10;        public EnemyBuilder WithSnakeBehavior()&#10;        {&#10;            // Assign jump logic as needed&#10;            var snake = _enemy as SnakeEnemy;&#10;            if (snake)&#10;            {&#10;                // Example: assign a jump movement component or set jump parameters&#10;                // (Assume SnakeEnemy implements IMovable and has a Jump method)&#10;            }&#10;            return this;&#10;        }&#10;&#10;        public EnemyBuilder WithFrogBehavior()&#10;        {&#10;            // Assign jump and proximity logic as needed&#10;            var frog = _enemy as FrogEnemy;&#10;            if (frog)&#10;            {&#10;                // Example: assign a jump movement component or set jump parameters&#10;                // (Assume FrogEnemy implements IMovable and IPlayerProximityReactable)&#10;            }&#10;            return this;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using Enemy.Behaviors;&#10;using Weapons.Models;&#10;using UnityEngine;&#10;&#10;namespace Enemy&#10;{&#10;    public class EnemyBuilder&#10;    {&#10;        private readonly EnemyBase _enemy;&#10;&#10;        public EnemyBuilder(EnemyBase enemy)&#10;        {&#10;            _enemy = enemy;&#10;        }&#10;&#10;        public EnemyBuilder WithFireSnakeBehavior()&#10;        {&#10;            // Example: assign FireballWeapon if available&#10;            var fireSnake = _enemy as FireSnakeEnemy;&#10;            if (fireSnake)&#10;            {&#10;                FireballWeapon weapon = fireSnake.GetComponentInChildren&lt;FireballWeapon&gt;();&#10;                if (weapon)&#10;                {&#10;                    weapon.Equip();&#10;                    // Additional setup if needed&#10;                }&#10;            }&#10;            return this;&#10;        }&#10;&#10;        public EnemyBuilder WithSpiderBehavior()&#10;        {&#10;            // Spider: Can move up/down or stay static in air&#10;            var spider = _enemy as SpiderEnemy;&#10;            if (spider)&#10;            {&#10;                // No extra setup needed; movement handled in SpiderEnemy&#10;            }&#10;            return this;&#10;        }&#10;&#10;        public EnemyBuilder WithBirdBehavior()&#10;        {&#10;            // Bird: Moves left, goes up and down&#10;            var bird = _enemy as BirdEnemy;&#10;            if (bird)&#10;            {&#10;                // No extra setup needed; movement handled in BirdEnemy&#10;            }&#10;            return this;&#10;        }&#10;&#10;        public EnemyBuilder WithSnakeBehavior()&#10;        {&#10;            // Snake: Jumps forward&#10;            var snake = _enemy as SnakeEnemy;&#10;            if (snake)&#10;            {&#10;                // No extra setup needed; jump logic handled in SnakeEnemy&#10;            }&#10;            return this;&#10;        }&#10;&#10;        public EnemyBuilder WithFrogBehavior()&#10;        {&#10;            // Frog: Jumps higher/farther, jumps when player is near&#10;            var frog = _enemy as FrogEnemy;&#10;            if (frog)&#10;            {&#10;                // No extra setup needed; jump and proximity handled in FrogEnemy&#10;            }&#10;            return this;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemy/EnemyDirector.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemy/EnemyDirector.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;&#10;namespace Enemy&#10;{&#10;    public static class EnemyDirector&#10;    {&#10;        // Entry point for configuring an enemy in the scene&#10;        public static void ConstructEnemy(EnemyType type, EnemyBase enemy)&#10;        {&#10;            // The director delegates the construction to the factory&#10;            EnemyFactory.ConfigureEnemy(type, enemy);&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemy/EnemyFactory.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemy/EnemyFactory.cs" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="using System;&#10;using UnityEngine;&#10;&#10;namespace Enemy&#10;{&#10;    public enum EnemyType&#10;    {&#10;        FireSnake,&#10;        Spider,&#10;        Bird,&#10;        Snake,&#10;        Frog&#10;    }&#10;&#10;    public static class EnemyFactory&#10;    {&#10;        // Configures an existing enemy instance using the builder pattern&#10;        public static void ConfigureEnemy(EnemyType type, EnemyBase enemy)&#10;        {&#10;            if (enemy == null) throw new ArgumentNullException(nameof(enemy));&#10;            var builder = new EnemyBuilder(enemy);&#10;            switch (type)&#10;            {&#10;                case EnemyType.FireSnake:&#10;                    builder.WithFireSnakeBehavior();&#10;                    break;&#10;                case EnemyType.Spider:&#10;                    builder.WithSpiderBehavior();&#10;                    break;&#10;                case EnemyType.Bird:&#10;                    builder.WithBirdBehavior();&#10;                    break;&#10;                case EnemyType.Snake:&#10;                    builder.WithSnakeBehavior();&#10;                    break;&#10;                case EnemyType.Frog:&#10;                    builder.WithFrogBehavior();&#10;                    break;&#10;                default:&#10;                    break;&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemy/FireSnakeEnemy.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemy/FireSnakeEnemy.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;using Weapons.Models;&#10;&#10;namespace Enemy&#10;{&#10;    public class FireSnakeEnemy : EnemyBase&#10;    {&#10;        [SerializeField] private FireballWeapon fireballWeapon;&#10;        [SerializeField] private float attackCooldown = 2f;&#10;        private float _nextAttackTime;&#10;&#10;        protected override void Awake()&#10;        {&#10;            base.Awake();&#10;            if (fireballWeapon != null)&#10;                fireballWeapon.Equip();&#10;        }&#10;&#10;        public override void Attack()&#10;        {&#10;            if (fireballWeapon == null)&#10;                return;&#10;            if (Time.time &lt; _nextAttackTime)&#10;                return;&#10;            fireballWeapon.Shoot();&#10;            _nextAttackTime = Time.time + attackCooldown;&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemy/FrogEnemy.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemy/FrogEnemy.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;using Enemy.Behaviors;&#10;&#10;namespace Enemy&#10;{&#10;    // Frog: Jumps higher and farther, jumps when player is near&#10;    public class FrogEnemy : EnemyBase, IMovable, IPlayerProximityReactable&#10;    {&#10;        [SerializeField] private float jumpForce = 12f;&#10;        [SerializeField] private float jumpDistance = 6f;&#10;        [SerializeField] private float jumpCooldown = 2f;&#10;        private float _nextJumpTime;&#10;        private Rigidbody2D _rb;&#10;        private bool _playerNearby;&#10;&#10;        protected override void Awake()&#10;        {&#10;            base.Awake();&#10;            _rb = GetComponent&lt;Rigidbody2D&gt;();&#10;        }&#10;&#10;        public void Move()&#10;        {&#10;            if (_playerNearby &amp;&amp; Time.time &gt;= _nextJumpTime)&#10;            {&#10;                Vector2 jumpVector = new Vector2(jumpDistance, jumpForce);&#10;                _rb.AddForce(jumpVector, ForceMode2D.Impulse);&#10;                _nextJumpTime = Time.time + jumpCooldown;&#10;                _playerNearby = false; // Only jump once per proximity event&#10;            }&#10;        }&#10;&#10;        public void OnPlayerNearby()&#10;        {&#10;            _playerNearby = true;&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemy/MVC/EnemyBase.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemy/MVC/EnemyBase.cs" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemy/MVC/FireSnake.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemy/MVC/FireSnake.cs" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemy/SnakeEnemy.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemy/SnakeEnemy.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;using Enemy.Behaviors;&#10;&#10;namespace Enemy&#10;{&#10;    // Snake: Jumps forward&#10;    public class SnakeEnemy : EnemyBase, IMovable&#10;    {&#10;        [SerializeField] private float jumpForce = 7f;&#10;        [SerializeField] private float jumpInterval = 2f;&#10;        private float _nextJumpTime;&#10;        private Rigidbody2D _rb;&#10;&#10;        protected override void Awake()&#10;        {&#10;            base.Awake();&#10;            _rb = GetComponent&lt;Rigidbody2D&gt;();&#10;        }&#10;&#10;        public void Move()&#10;        {&#10;            if (Time.time &gt;= _nextJumpTime)&#10;            {&#10;                _rb.AddForce(Vector2.right * jumpForce, ForceMode2D.Impulse);&#10;                _nextJumpTime = Time.time + jumpInterval;&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Enemy/SpiderEnemy.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Enemy/SpiderEnemy.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;using Enemy.Behaviors;&#10;&#10;namespace Enemy&#10;{&#10;    // Spider: Can move up/down or stay static in air&#10;    public class SpiderEnemy : EnemyBase, IMovable&#10;    {&#10;        [SerializeField] private bool canMove = true;&#10;        [SerializeField] private float moveSpeed = 2f;&#10;        [SerializeField] private float moveDistance = 3f;&#10;        private Vector3 _startPos;&#10;        private bool _movingUp = true;&#10;&#10;        protected override void Awake()&#10;        {&#10;            base.Awake();&#10;            _startPos = transform.position;&#10;        }&#10;&#10;        public void Move()&#10;        {&#10;            if (!canMove) return;&#10;            float delta = moveSpeed * Time.deltaTime * (_movingUp ? 1 : -1);&#10;            transform.position += new Vector3(0, delta, 0);&#10;            if (Mathf.Abs(transform.position.y - _startPos.y) &gt; moveDistance)&#10;                _movingUp = !_movingUp;&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Health/Core/HealthComponent.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Health/Core/HealthComponent.cs" />
              <option name="originalContent" value="using System;&#10;using Health.Interfaces;&#10;using UnityEngine;&#10;&#10;namespace Health.Core&#10;{&#10;    [DisallowMultipleComponent]&#10;    public class HealthComponent : MonoBehaviour, IHealth&#10;    {&#10;        [SerializeField] private int maxHp = 3;&#10;&#10;        protected void Awake()&#10;        {&#10;            CurrentHp = maxHp;&#10;        }&#10;        public int MaxHp =&gt; maxHp;&#10;        public int CurrentHp { get; private set; }&#10;        public event Action&lt;int, int&gt; OnHealthChanged;&#10;        public event Action OnDeath;&#10;&#10;        public virtual void Damage(int amount, GameObject source = null)&#10;        {&#10;            if (CurrentHp &lt;= 0) return;&#10;            int prevHp = CurrentHp;&#10;            CurrentHp = Mathf.Max(0, CurrentHp - amount);&#10;            OnHealthChanged?.Invoke(CurrentHp, MaxHp);&#10;            if (CurrentHp == 0 &amp;&amp; prevHp &gt; 0)&#10;            {&#10;                OnDeath?.Invoke();&#10;            }&#10;        }&#10;&#10;        public void Heal(int amount)&#10;        {&#10;            if (CurrentHp &lt;= 0) return;&#10;            CurrentHp = Mathf.Min(MaxHp, CurrentHp + amount);&#10;            OnHealthChanged?.Invoke(CurrentHp, MaxHp);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using System;&#10;using Health.Interfaces;&#10;using UnityEngine;&#10;&#10;namespace Health.Core&#10;{&#10;    [DisallowMultipleComponent]&#10;    public class HealthComponent : MonoBehaviour, IHealth&#10;    {&#10;        [SerializeField] private int maxHp = 3;&#10;&#10;        protected void Awake()&#10;        {&#10;            CurrentHp = maxHp;&#10;        }&#10;        public int MaxHp =&gt; maxHp;&#10;        public int CurrentHp { get; private set; }&#10;        public event Action&lt;int, int&gt; OnHealthChanged;&#10;        public event Action OnDeath;&#10;&#10;        public virtual void Damage(int amount, GameObject source = null)&#10;        {&#10;            if (CurrentHp &lt;= 0) return;&#10;            int prevHp = CurrentHp;&#10;            CurrentHp = Mathf.Max(0, CurrentHp - amount);&#10;            OnHealthChanged?.Invoke(CurrentHp, MaxHp);&#10;            if (CurrentHp == 0 &amp;&amp; prevHp &gt; 0)&#10;            {&#10;                OnDeath?.Invoke();&#10;            }&#10;        }&#10;&#10;        public void Heal(int amount)&#10;        {&#10;            if (CurrentHp &lt;= 0) return;&#10;            CurrentHp = Mathf.Min(MaxHp, CurrentHp + amount);&#10;            OnHealthChanged?.Invoke(CurrentHp, MaxHp);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Health/Damage/Conditions/AlwaysAllowDamage.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Health/Damage/Conditions/AlwaysAllowDamage.cs" />
              <option name="updatedContent" value="using UnityEngine;&#10;using Health.Interfaces;&#10;&#10;namespace Health.Damage.Conditions&#10;{&#10;    [DisallowMultipleComponent]&#10;    public class AlwaysAllowDamage : MonoBehaviour, IDamageCondition&#10;    {&#10;        public bool CanBeDamagedBy(GameObject damager) =&gt; true;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Health/Damage/Conditions/AndDamageCondition.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Health/Damage/Conditions/AndDamageCondition.cs" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Health/Damage/Conditions/OnlyProjectileCanDamage.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Health/Damage/Conditions/OnlyProjectileCanDamage.cs" />
              <option name="originalContent" value="using Health.Interfaces;&#10;using UnityEngine;&#10;using Weapons;&#10;using Weapons.Interfaces;&#10;&#10;namespace Health.Damage.Conditions&#10;{&#10;    [DisallowMultipleComponent]&#10;    public class OnlyProjectileCanDamage : MonoBehaviour, IDamageCondition&#10;    {&#10;        [SerializeField] private LayerMask projectileLayers = ~0;&#10;        [SerializeField] private bool requireWeaponType = true;&#10;        [SerializeField] private WeaponType allowedWeaponType = WeaponType.Boomerang;&#10;        public bool CanBeDamagedBy(GameObject damager)&#10;        {&#10;            if (((1 &lt;&lt; damager.layer) &amp; projectileLayers) == 0)&#10;                return false;&#10;            if (!requireWeaponType)&#10;                return true;&#10;&#10;            IWeapon weaponTypeProvider = damager.GetComponent&lt;IWeapon&gt;();&#10;            return weaponTypeProvider?.WeaponType == allowedWeaponType;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using Health.Interfaces;&#10;using UnityEngine;&#10;using Weapons;&#10;using Weapons.Interfaces;&#10;&#10;namespace Health.Damage.Conditions&#10;{&#10;    [DisallowMultipleComponent]&#10;    public class OnlyProjectileCanDamage : MonoBehaviour, IDamageCondition&#10;    {&#10;        [SerializeField] private LayerMask projectileLayers = ~0;&#10;        [SerializeField] private bool requireWeaponType = true;&#10;        [SerializeField] private WeaponType allowedWeaponType = WeaponType.Boomerang;&#10;        public bool CanBeDamagedBy(GameObject damager)&#10;        {&#10;            if (((1 &lt;&lt; damager.layer) &amp; projectileLayers) == 0)&#10;                return false;&#10;            if (!requireWeaponType)&#10;                return true;&#10;            // Check for IWeapon on the projectile (damage dealer)&#10;            var weaponTypeProvider = damager.GetComponent&lt;IWeapon&gt;();&#10;            if (weaponTypeProvider != null)&#10;                return weaponTypeProvider.WeaponType == allowedWeaponType;&#10;            // Optionally, check parent or children if your projectiles are structured that way&#10;            return false;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Health/Damage/Conditions/OrDamageCondition.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Health/Damage/Conditions/OrDamageCondition.cs" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Health/Damage/DamageOnCollision.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Health/Damage/DamageOnCollision.cs" />
              <option name="originalContent" value="using Health.Interfaces;&#10;using UnityEngine;&#10;&#10;namespace Health.Damage&#10;{&#10;    [DisallowMultipleComponent]&#10;    public class DamageOnCollision : MonoBehaviour&#10;    {&#10;        private IDamageDealer _dealer;&#10;        private DamageConditionsComponent _damageConditions;&#10;&#10;        [SerializeField] private LayerMask targetLayers = ~0; // All layers by default&#10;&#10;        private void Awake()&#10;        {&#10;            _dealer = GetComponent&lt;IDamageDealer&gt;();&#10;            _damageConditions = GetComponent&lt;DamageConditionsComponent&gt;();&#10;        }&#10;&#10;        private void OnCollisionEnter2D(Collision2D collision)&#10;        {&#10;            GameObject target = collision.gameObject;&#10;            if (((1 &lt;&lt; target.layer) &amp; targetLayers) == 0)&#10;                return;&#10;            IDamageable damageable = target.GetComponent&lt;IDamageable&gt;();&#10;            if (damageable == null) return;&#10;&#10;            if (_damageConditions &amp;&amp; !_damageConditions.CanBeDamagedBy(target))&#10;                return;&#10;&#10;            int amount = _dealer?.GetDamageAmount() ?? 1;&#10;            damageable.Damage(amount, gameObject);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using Health.Interfaces;&#10;using System.Linq;&#10;using UnityEngine;&#10;&#10;namespace Health.Damage&#10;{&#10;    [DisallowMultipleComponent]&#10;    public class BidirectionalDamageOnCollision : MonoBehaviour&#10;    {&#10;        private IDamageDealer _dealer;&#10;        private DamageConditionsComponent _damageConditions;&#10;        [SerializeField] private LayerMask targetLayers = ~0;&#10;&#10;        private void Awake()&#10;        {&#10;            _dealer = GetComponent&lt;IDamageDealer&gt;();&#10;            _damageConditions = GetComponent&lt;DamageConditionsComponent&gt;();&#10;        }&#10;&#10;        private void OnCollisionEnter2D(Collision2D collision)&#10;        {&#10;            GameObject other = collision.gameObject;&#10;            GameObject self = gameObject;&#10;&#10;            // 1. This object damages the other&#10;            TryDealDamage(self, other, _dealer, _damageConditions, targetLayers);&#10;&#10;            // 2. The other object damages this&#10;            var otherDealer = other.GetComponent&lt;IDamageDealer&gt;();&#10;            var otherConditions = other.GetComponent&lt;DamageConditionsComponent&gt;();&#10;            TryDealDamage(other, self, otherDealer, otherConditions, targetLayers);&#10;        }&#10;&#10;        private static void TryDealDamage(&#10;            GameObject dealerObj,&#10;            GameObject targetObj,&#10;            IDamageDealer dealer,&#10;            DamageConditionsComponent conditions,&#10;            LayerMask targetLayers)&#10;        {&#10;            if (dealer == null) return;&#10;            if (((1 &lt;&lt; targetObj.layer) &amp; targetLayers) == 0) return;&#10;            var damageable = targetObj.GetComponent&lt;IDamageable&gt;();&#10;            if (damageable == null) return;&#10;            if (conditions &amp;&amp; !conditions.CanBeDamagedBy(targetObj)) return;&#10;            int amount = dealer.GetDamageAmount();&#10;            if (amount &gt; 0)&#10;                damageable.Damage(amount, dealerObj);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Health/Damage/DealDamageOnCollision.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Health/Damage/DealDamageOnCollision.cs" />
              <option name="originalContent" value="using Health.Interfaces;&#10;using UnityEngine;&#10;&#10;namespace Health.Damage&#10;{&#10;    [DisallowMultipleComponent]&#10;    public class DealDamageOnCollision : MonoBehaviour&#10;    {&#10;        private IDamageDealer _dealer;&#10;        private DamageConditionsComponent _damageConditions;&#10;        [SerializeField] private LayerMask targetLayers = ~0;&#10;&#10;        private void Awake()&#10;        {&#10;            _dealer = GetComponent&lt;IDamageDealer&gt;();&#10;            _damageConditions = GetComponent&lt;DamageConditionsComponent&gt;();&#10;        }&#10;&#10;        private void OnCollisionEnter2D(Collision2D collision)&#10;        {&#10;            GameObject target = collision.gameObject;&#10;            if (_dealer == null) return;&#10;            if (((1 &lt;&lt; target.layer) &amp; targetLayers) == 0) return;&#10;            IDamageable damageable = target.GetComponent&lt;IDamageable&gt;();&#10;            if (damageable == null) return;&#10;            if (_damageConditions &amp;&amp; !_damageConditions.CanBeDamagedBy(target)) return;&#10;            int amount = _dealer.GetDamageAmount();&#10;            if (amount &gt; 0)&#10;                damageable.Damage(amount, gameObject);&#10;        }&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="using Health.Interfaces;&#10;using UnityEngine;&#10;&#10;namespace Health.Damage&#10;{&#10;    [DisallowMultipleComponent]&#10;    public class DealDamageOnCollision : MonoBehaviour&#10;    {&#10;        private IDamageDealer _dealer;&#10;        private DamageConditionsComponent _damageConditions;&#10;        [SerializeField] private LayerMask targetLayers = ~0;&#10;&#10;        private void Awake()&#10;        {&#10;            _dealer = GetComponent&lt;IDamageDealer&gt;();&#10;            _damageConditions = GetComponent&lt;DamageConditionsComponent&gt;();&#10;        }&#10;&#10;        private void OnCollisionEnter2D(Collision2D collision)&#10;        {&#10;            GameObject target = collision.gameObject;&#10;            if (_dealer == null) return;&#10;            if (((1 &lt;&lt; target.layer) &amp; targetLayers) == 0) return;&#10;            IDamageable damageable = target.GetComponent&lt;IDamageable&gt;();&#10;            if (damageable == null) return;&#10;            if (_damageConditions &amp;&amp; !_damageConditions.CanBeDamagedBy(target)) return;&#10;            int amount = _dealer.GetDamageAmount();&#10;            if (amount &gt; 0)&#10;                damageable.Damage(amount, gameObject);&#10;        }&#10;    }&#10;}&#10;&#10;// This script is now deprecated in favor of TakeDamageOnCollision for most use cases.&#10;// Please use TakeDamageOnCollision on all damageable objects instead." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Health/Damage/HazardComponent.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Health/Damage/HazardComponent.cs" />
              <option name="originalContent" value="using System.Linq;&#10;using Health.Interfaces;&#10;using UnityEngine;&#10;&#10;namespace Health.Damage&#10;{&#10;    [DisallowMultipleComponent]&#10;    public class HazardComponent : MonoBehaviour&#10;    {&#10;        [Tooltip(&quot;Assign components implementing IDamageCondition here.&quot;)] [SerializeField]&#10;        private MonoBehaviour[] damageConditions;&#10;&#10;        private IDamageCondition[] _conditions;&#10;        private void Awake()&#10;        {&#10;            _conditions = damageConditions.Cast&lt;IDamageCondition&gt;().ToArray();&#10;        }&#10;        public bool CanBeDamagedBy(GameObject damager)&#10;        {&#10;            foreach (IDamageCondition cond in _conditions)&#10;            {&#10;                if (cond != null &amp;&amp; !cond.CanBeDamagedBy(damager))&#10;                    return false;&#10;            }&#10;&#10;            return true;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using System.Linq;&#10;using Health.Interfaces;&#10;using UnityEngine;&#10;&#10;namespace Health.Damage&#10;{&#10;    [DisallowMultipleComponent]&#10;    public class HazardComponent : MonoBehaviour&#10;    {&#10;        [Tooltip(&quot;Assign components implementing IDamageCondition here.&quot;)] [SerializeField]&#10;        private MonoBehaviour[] damageConditions;&#10;&#10;        private IDamageCondition[] _conditions;&#10;        private void Awake()&#10;        {&#10;            _conditions = damageConditions.Cast&lt;IDamageCondition&gt;().ToArray();&#10;        }&#10;        public bool CanBeDamagedBy(GameObject damager)&#10;        {&#10;            return _conditions.All(cond =&gt; cond == null || cond.CanBeDamagedBy(damager));&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Health/Damage/ShieldBreaksHazardOnCollision.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Health/Damage/ShieldBreaksHazardOnCollision.cs" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Health/Editor/ConditionNodeTreeDrawers.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Health/Editor/ConditionNodeTreeDrawers.cs" />
              <option name="originalContent" value="using Health.Damage;&#10;using UnityEditor;&#10;using UnityEngine;&#10;&#10;[CustomPropertyDrawer(typeof(ConditionLeaf))]&#10;public class ConditionLeafPropertyDrawer : ConditionNodePropertyDrawer {}&#10;&#10;[CustomPropertyDrawer(typeof(AndCondition))]&#10;public class AndConditionPropertyDrawer : ConditionNodePropertyDrawer {&#10;    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {&#10;        EditorGUI.BeginProperty(position, label, property);&#10;        var childrenProp = property.FindPropertyRelative(&quot;children&quot;);&#10;        float y = position.y;&#10;        float width = position.width;&#10;        float lineHeight = EditorGUIUtility.singleLineHeight + 2;&#10;        // Draw header&#10;        Rect headerRect = new Rect(position.x, y, width, lineHeight);&#10;        EditorGUI.LabelField(headerRect, &quot;AND Group&quot;, EditorStyles.boldLabel);&#10;        y += lineHeight;&#10;        // Draw each child node using the full custom node UI&#10;        if (childrenProp != null &amp;&amp; childrenProp.isArray) {&#10;            for (int i = 0; i &lt; childrenProp.arraySize; i++) {&#10;                var childProp = childrenProp.GetArrayElementAtIndex(i);&#10;                float childHeight = GetNodeHeight(childProp);&#10;                Rect childRect = new Rect(position.x + 16, y, width - 16, childHeight);&#10;                DrawNode(childRect, childProp, 1); // indent = 1 for children&#10;                y += childHeight + 2;&#10;            }&#10;            // Add button&#10;            Rect addRect = new Rect(position.x + 16, y, width - 16, lineHeight);&#10;            if (GUI.Button(addRect, &quot;+ Add Child Node&quot;)) {&#10;                childrenProp.InsertArrayElementAtIndex(childrenProp.arraySize);&#10;                var newChild = childrenProp.GetArrayElementAtIndex(childrenProp.arraySize - 1);&#10;                newChild.managedReferenceValue = new ConditionLeaf();&#10;                property.serializedObject.ApplyModifiedProperties();&#10;                property.serializedObject.Update();&#10;                EditorUtility.SetDirty(property.serializedObject.targetObject);&#10;                GUI.FocusControl(null);&#10;            }&#10;            y += lineHeight;&#10;        }&#10;        EditorGUI.EndProperty();&#10;    }&#10;    public override float GetPropertyHeight(SerializedProperty property, GUIContent label) {&#10;        float height = EditorGUIUtility.singleLineHeight + 2; // header&#10;        var childrenProp = property.FindPropertyRelative(&quot;children&quot;);&#10;        if (childrenProp != null &amp;&amp; childrenProp.isArray) {&#10;            for (int i = 0; i &lt; childrenProp.arraySize; i++) {&#10;                var childProp = childrenProp.GetArrayElementAtIndex(i);&#10;                height += GetNodeHeight(childProp) + 2;&#10;            }&#10;            height += EditorGUIUtility.singleLineHeight + 2; // add button&#10;        }&#10;        return height;&#10;    }&#10;}&#10;&#10;[CustomPropertyDrawer(typeof(OrCondition))]&#10;public class OrConditionPropertyDrawer : ConditionNodePropertyDrawer {&#10;    public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) {&#10;        EditorGUI.BeginProperty(position, label, property);&#10;        var childrenProp = property.FindPropertyRelative(&quot;children&quot;);&#10;        float y = position.y;&#10;        float width = position.width;&#10;        float lineHeight = EditorGUIUtility.singleLineHeight + 2;&#10;        // Draw header&#10;        Rect headerRect = new Rect(position.x, y, width, lineHeight);&#10;        EditorGUI.LabelField(headerRect, &quot;OR Group&quot;, EditorStyles.boldLabel);&#10;        y += lineHeight;&#10;        // Draw each child node using the full custom node UI&#10;        if (childrenProp != null &amp;&amp; childrenProp.isArray) {&#10;            for (int i = 0; i &lt; childrenProp.arraySize; i++) {&#10;                var childProp = childrenProp.GetArrayElementAtIndex(i);&#10;                float childHeight = GetNodeHeight(childProp);&#10;                Rect childRect = new Rect(position.x + 16, y, width - 16, childHeight);&#10;                DrawNode(childRect, childProp, 1); // indent = 1 for children&#10;                y += childHeight + 2;&#10;            }&#10;            // Add button&#10;            Rect addRect = new Rect(position.x + 16, y, width - 16, lineHeight);&#10;            if (GUI.Button(addRect, &quot;+ Add Child Node&quot;)) {&#10;                childrenProp.InsertArrayElementAtIndex(childrenProp.arraySize);&#10;                var newChild = childrenProp.GetArrayElementAtIndex(childrenProp.arraySize - 1);&#10;                newChild.managedReferenceValue = new ConditionLeaf();&#10;                property.serializedObject.ApplyModifiedProperties();&#10;                property.serializedObject.Update();&#10;                EditorUtility.SetDirty(property.serializedObject.targetObject);&#10;                GUI.FocusControl(null);&#10;            }&#10;            y += lineHeight;&#10;        }&#10;        EditorGUI.EndProperty();&#10;    }&#10;    public override float GetPropertyHeight(SerializedProperty property, GUIContent label) {&#10;        float height = EditorGUIUtility.singleLineHeight + 2; // header&#10;        var childrenProp = property.FindPropertyRelative(&quot;children&quot;);&#10;        if (childrenProp != null &amp;&amp; childrenProp.isArray) {&#10;            for (int i = 0; i &lt; childrenProp.arraySize; i++) {&#10;                var childProp = childrenProp.GetArrayElementAtIndex(i);&#10;                height += GetNodeHeight(childProp) + 2;&#10;            }&#10;            height += EditorGUIUtility.singleLineHeight + 2; // add button&#10;        }&#10;        return height;&#10;    }&#10;}&#10;&#10;[CustomPropertyDrawer(typeof(NotCondition))]&#10;public class NotConditionPropertyDrawer : ConditionNodePropertyDrawer {}&#10;" />
              <option name="updatedContent" value="// All custom property drawers for node types are now handled by ConditionNodePropertyDrawer.&#10;// This file is no longer needed and can be deleted, or you can leave it empty." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Health/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Health/README.md" />
              <option name="updatedContent" value="// Health/README.md&#10;&#10;# Health System Setup Guide&#10;&#10;## Folder Structure&#10;- `Core/` – Health logic&#10;- `Interfaces/` – All interfaces&#10;- `Shield/` – Shield logic&#10;- `Invincibility/` – Invincibility logic&#10;- `Damage/` – Damage logic and conditions&#10;&#10;## How to Compose Entities in Unity Editor&#10;&#10;### Player (Basic)&#10;- Add `HealthComponent` (Core)&#10;&#10;### Player with Shield&#10;- Add `HealthComponent` (Core)&#10;- Add `ShieldComponent` (Shield)&#10;&#10;### Player with Invincibility&#10;- Add `HealthComponent` (Core)&#10;- Add `InvincibilityComponent` (Invincibility)&#10;- Connect to your `IPowerUp` system to toggle invincibility&#10;&#10;### Enemy&#10;- Add `HealthComponent` (Core)&#10;&#10;### Hazard (Standard)&#10;- Add `HazardComponent` (Damage)&#10;- Add `DamageDealerComponent` (Damage)&#10;- Add a damage condition (e.g., `AlwaysAllowDamage`, `OnlyInvincibleCanDamage`, `OnlyShieldedCanDamage`) as needed&#10;- Assign the condition(s) to the `HazardComponent`'s `damageConditions` array in the Inspector&#10;&#10;### Custom Damage Conditions&#10;- Create a new MonoBehaviour implementing `IDamageCondition`&#10;- Add it to the hazard GameObject&#10;- Assign it in the `HazardComponent`&#10;&#10;## Extending&#10;- To add new damage conditions, create a new script implementing `IDamageCondition` and add it in the Editor. No need to modify existing code.&#10;&#10;## Events&#10;- Use UnityEvents or C# events on components for custom reactions (e.g., OnDeath, OnShieldBroken)&#10;&#10;## Cleanup&#10;- Remove old scripts like `ShieldActiveDisappearHazard`, `OnlyInvincibilityDamageController`, etc. after migration.&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Player/Components/PlayerInvincibleDamageDealer.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Player/Components/PlayerInvincibleDamageDealer.cs" />
              <option name="updatedContent" value="using Health.Interfaces;&#10;using UnityEngine;&#10;&#10;namespace Player.Components&#10;{&#10;    /// &lt;summary&gt;&#10;    /// When enabled, instantly kills any damageable object the player collides with.&#10;    /// Should be enabled only when the player is invincible.&#10;    /// &lt;/summary&gt;&#10;    [DisallowMultipleComponent]&#10;    public class PlayerInvincibleDamageDealer : MonoBehaviour, IDamageDealer&#10;    {&#10;        [SerializeField] private int damageAmount = 9999; // &quot;Kill&quot; value&#10;        [SerializeField] private LayerMask targetLayers = ~0; // All by default&#10;&#10;        public int GetDamageAmount() =&gt; damageAmount;&#10;&#10;        private void OnCollisionEnter2D(Collision2D collision)&#10;        {&#10;            if (((1 &lt;&lt; collision.gameObject.layer) &amp; targetLayers) == 0)&#10;                return;&#10;            var damageable = collision.gameObject.GetComponent&lt;IDamageable&gt;();&#10;            if (damageable != null)&#10;            {&#10;                damageable.Damage(damageAmount, gameObject);&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Projectiles/Core/BaseProjectile.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Projectiles/Core/BaseProjectile.cs" />
              <option name="originalContent" value="using UnityEngine;&#10;using UnityEngine.Pool;&#10;using Weapons;&#10;using Weapons.Interfaces;&#10;&#10;namespace Projectiles.Core&#10;{&#10;    public abstract class BaseProjectile : MonoBehaviour, IWeaponTypeProvider&#10;    {&#10;        [SerializeField] protected Vector2 speed = new(12f, 0f);&#10;&#10;        protected Rigidbody2D Rb;&#10;        public IObjectPool&lt;GameObject&gt; Pool { get; set; }&#10;        public virtual WeaponType WeaponType { get; set; }&#10;&#10;        protected virtual void Awake()&#10;        {&#10;            Rb = GetComponent&lt;Rigidbody2D&gt;();&#10;        }&#10;&#10;&#10;        public void Fire()&#10;        {&#10;            Move();&#10;        }&#10;&#10;        protected abstract void Move();&#10;&#10;        protected void ReturnToPool()&#10;        {&#10;            if (!gameObject.activeInHierarchy)&#10;            {&#10;                return;&#10;            }&#10;&#10;            if (Pool != null)&#10;            {&#10;                Debug.Log($&quot;Projectile '{gameObject.name}' returning to pool.&quot;);&#10;&#10;                // Reset all physics properties&#10;                Rb.linearVelocity = Vector2.zero;&#10;                Rb.angularVelocity = 0f;&#10;&#10;                // Reset any accumulated forces&#10;                Rb.totalForce = Vector2.zero;&#10;                Rb.totalTorque = 0f;&#10;&#10;                Pool.Release(gameObject);&#10;            }&#10;            else&#10;            {&#10;                Debug.LogWarning(&#10;                    $&quot;Projectile '{gameObject.name}' does not have a pool to return to. Destroying instead.&quot;);&#10;&#10;                Destroy(gameObject);&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using UnityEngine;&#10;using UnityEngine.Pool;&#10;using Weapons;&#10;using Weapons.Interfaces;&#10;&#10;namespace Projectiles.Core&#10;{&#10;    public abstract class BaseProjectile : MonoBehaviour, IWeaponTypeProvider&#10;    {&#10;        [SerializeField] protected Vector2 speed = new(12f, 0f);&#10;&#10;        protected Rigidbody2D Rb;&#10;        public IObjectPool&lt;GameObject&gt; Pool { get; set; }&#10;        private WeaponType _weaponType;&#10;        public virtual WeaponType WeaponType&#10;        {&#10;            get =&gt; _weaponType;&#10;            protected set =&gt; _weaponType = value;&#10;        }&#10;&#10;        protected virtual void Awake()&#10;        {&#10;            Rb = GetComponent&lt;Rigidbody2D&gt;();&#10;        }&#10;&#10;&#10;        public void Fire()&#10;        {&#10;            Move();&#10;        }&#10;&#10;        protected abstract void Move();&#10;&#10;        protected void ReturnToPool()&#10;        {&#10;            if (!gameObject.activeInHierarchy)&#10;            {&#10;                return;&#10;            }&#10;&#10;            if (Pool != null)&#10;            {&#10;                Debug.Log($&quot;Projectile '{gameObject.name}' returning to pool.&quot;);&#10;&#10;                // Reset all physics properties&#10;                Rb.linearVelocity = Vector2.zero;&#10;                Rb.angularVelocity = 0f;&#10;&#10;                // Reset any accumulated forces&#10;                Rb.totalForce = Vector2.zero;&#10;                Rb.totalTorque = 0f;&#10;&#10;                Pool.Release(gameObject);&#10;            }&#10;            else&#10;            {&#10;                Debug.LogWarning(&#10;                    $&quot;Projectile '{gameObject.name}' does not have a pool to return to. Destroying instead.&quot;);&#10;&#10;                Destroy(gameObject);&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Projectiles/ProjectileAxe.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Projectiles/ProjectileAxe.cs" />
              <option name="originalContent" value="using System;&#10;using Projectiles.Core;&#10;using UnityEngine;&#10;using Weapons;&#10;&#10;namespace Projectiles&#10;{&#10;    public class ProjectileAxe : BaseProjectile&#10;    {&#10;        [NonSerialized] public float Direction;&#10;        [NonSerialized] public float ThrowerVelocityX;&#10;        private void OnBecameInvisible()&#10;        {&#10;            ReturnToPool();&#10;        }&#10;        private void OnCollisionEnter2D(Collision2D other)&#10;        {&#10;            if (other.gameObject.CompareTag(&quot;Player&quot;))&#10;                return;&#10;&#10;            ReturnToPool();&#10;            Debug.Log($&quot;Axe hit {other.gameObject.name}.&quot;);&#10;        }&#10;&#10;        public override WeaponType WeaponType =&gt; WeaponType.Axe;&#10;&#10;        protected override void Move()&#10;        {&#10;&#10;            // World-space velocity = player's current velocity + desired arc velocity&#10;            Vector2 worldVelocity = new(speed.x * Direction + ThrowerVelocityX, speed.y);&#10;&#10;            // Cancel out thrower motion to isolate projectile speed&#10;            Rb.linearVelocity = worldVelocity;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using System;&#10;using Projectiles.Core;&#10;using UnityEngine;&#10;using Weapons;&#10;&#10;namespace Projectiles&#10;{&#10;    public class ProjectileAxe : BaseProjectile&#10;    {&#10;        [NonSerialized] public float Direction;&#10;        [NonSerialized] public float ThrowerVelocityX;&#10;        private void OnBecameInvisible()&#10;        {&#10;            ReturnToPool();&#10;        }&#10;        private void OnCollisionEnter2D(Collision2D other)&#10;        {&#10;            if (other.gameObject.CompareTag(&quot;Player&quot;))&#10;                return;&#10;&#10;            ReturnToPool();&#10;            Debug.Log($&quot;Axe hit {other.gameObject.name}.&quot;);&#10;        }&#10;&#10;        public override WeaponType WeaponType { get; set; }&#10;&#10;        protected override void Move()&#10;        {&#10;&#10;            // World-space velocity = player's current velocity + desired arc velocity&#10;            Vector2 worldVelocity = new(speed.x * Direction + ThrowerVelocityX, speed.y);&#10;&#10;            // Cancel out thrower motion to isolate projectile speed&#10;            Rb.linearVelocity = worldVelocity;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Projectiles/ProjectileBoomerang.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Projectiles/ProjectileBoomerang.cs" />
              <option name="originalContent" value="using System;&#10;using Projectiles.Core;&#10;using UnityEngine;&#10;using Weapons;&#10;&#10;namespace Projectiles&#10;{&#10;    public class ProjectileBoomerang : BaseProjectile&#10;    {&#10;        [SerializeField] private float totalFlightTime = 1f;&#10;        [SerializeField] private AnimationCurve trajectoryXCurve = AnimationCurve.Linear(0, 0, 1, 0);&#10;        [SerializeField] private AnimationCurve trajectoryYCurve = AnimationCurve.Linear(0, 0, 1, 0);&#10;&#10;        private float _flightTimer;&#10;        private bool _isFlying;&#10;        private Vector3 _startPosition; // Fixed start position&#10;&#10;        [NonSerialized] public float Direction;&#10;        [NonSerialized] public Transform PlayerTransform;&#10;&#10;        private void Update()&#10;        {&#10;&#10;            if (_isFlying &amp;&amp; PlayerTransform)&#10;            {&#10;                _flightTimer += Time.deltaTime;&#10;                float progress = _flightTimer / totalFlightTime;&#10;&#10;                if (progress &gt;= 1f)&#10;                {&#10;                    OnBoomerangReturned?.Invoke();&#10;                    ReturnToPool();&#10;                    return;&#10;                }&#10;&#10;                // Calculate curve offsets&#10;                float xOffset = trajectoryXCurve.Evaluate(progress) * speed.x * Direction;&#10;                float yOffset = trajectoryYCurve.Evaluate(progress) * speed.y;&#10;&#10;                // Blend the base position from start to current player position&#10;                Vector3 basePosition = Vector3.Lerp(_startPosition, PlayerTransform.position, progress);&#10;                Vector3 curvePosition = basePosition + new Vector3(xOffset, yOffset, 0);&#10;&#10;                transform.position = curvePosition;&#10;&#10;                // Check if close to player (especially near the end)&#10;                if (progress &gt; 0.7f &amp;&amp; Vector3.Distance(transform.position, PlayerTransform.position) &lt; 1.5f)&#10;                {&#10;                    OnBoomerangReturned?.Invoke();&#10;                    ReturnToPool();&#10;                }&#10;            }&#10;        }&#10;&#10;        private void OnEnable()&#10;        {&#10;            _isFlying = false;&#10;            _flightTimer = 0f;&#10;        }&#10;&#10;        private void OnCollisionEnter2D(Collision2D other)&#10;        {&#10;            if (other.gameObject.CompareTag(&quot;Player&quot;) &amp;&amp; _flightTimer &gt; 0.5f)&#10;            {&#10;                OnBoomerangReturned?.Invoke();&#10;                ReturnToPool();&#10;            }&#10;        }&#10;&#10;        public event Action OnBoomerangReturned;&#10;&#10;        public override WeaponType WeaponType =&gt; WeaponType.Boomerang;&#10;        protected override void Move()&#10;        {&#10;            _startPosition = transform.position;&#10;            _flightTimer = 0f;&#10;            _isFlying = true;&#10;            transform.localScale = new Vector3(Direction, 1, 1);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using System;&#10;using Projectiles.Core;&#10;using UnityEngine;&#10;using Weapons;&#10;&#10;namespace Projectiles&#10;{&#10;    public class ProjectileBoomerang : BaseProjectile&#10;    {&#10;        [SerializeField] private float totalFlightTime = 1f;&#10;        [SerializeField] private AnimationCurve trajectoryXCurve = AnimationCurve.Linear(0, 0, 1, 0);&#10;        [SerializeField] private AnimationCurve trajectoryYCurve = AnimationCurve.Linear(0, 0, 1, 0);&#10;&#10;        private float _flightTimer;&#10;        private bool _isFlying;&#10;        private Vector3 _startPosition; // Fixed start position&#10;&#10;        [NonSerialized] public float Direction;&#10;        [NonSerialized] public Transform PlayerTransform;&#10;&#10;        private void Update()&#10;        {&#10;&#10;            if (_isFlying &amp;&amp; PlayerTransform)&#10;            {&#10;                _flightTimer += Time.deltaTime;&#10;                float progress = _flightTimer / totalFlightTime;&#10;&#10;                if (progress &gt;= 1f)&#10;                {&#10;                    OnBoomerangReturned?.Invoke();&#10;                    ReturnToPool();&#10;                    return;&#10;                }&#10;&#10;                // Calculate curve offsets&#10;                float xOffset = trajectoryXCurve.Evaluate(progress) * speed.x * Direction;&#10;                float yOffset = trajectoryYCurve.Evaluate(progress) * speed.y;&#10;&#10;                // Blend the base position from start to current player position&#10;                Vector3 basePosition = Vector3.Lerp(_startPosition, PlayerTransform.position, progress);&#10;                Vector3 curvePosition = basePosition + new Vector3(xOffset, yOffset, 0);&#10;&#10;                transform.position = curvePosition;&#10;&#10;                // Check if close to player (especially near the end)&#10;                if (progress &gt; 0.7f &amp;&amp; Vector3.Distance(transform.position, PlayerTransform.position) &lt; 1.5f)&#10;                {&#10;                    OnBoomerangReturned?.Invoke();&#10;                    ReturnToPool();&#10;                }&#10;            }&#10;        }&#10;&#10;        private void OnEnable()&#10;        {&#10;            _isFlying = false;&#10;            _flightTimer = 0f;&#10;        }&#10;&#10;        private void OnCollisionEnter2D(Collision2D other)&#10;        {&#10;            if (other.gameObject.CompareTag(&quot;Player&quot;) &amp;&amp; _flightTimer &gt; 0.5f)&#10;            {&#10;                OnBoomerangReturned?.Invoke();&#10;                ReturnToPool();&#10;            }&#10;        }&#10;&#10;        public event Action OnBoomerangReturned;&#10;&#10;        public override WeaponType WeaponType { get; set; }&#10;        protected override void Move()&#10;        {&#10;            _startPosition = transform.position;&#10;            _flightTimer = 0f;&#10;            _isFlying = true;&#10;            transform.localScale = new Vector3(Direction, 1, 1);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Projectiles/ProjectileFireball.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Projectiles/ProjectileFireball.cs" />
              <option name="originalContent" value="using System;&#10;using System.Collections;&#10;using Projectiles.Core;&#10;using UnityEngine;&#10;using Weapons;&#10;&#10;namespace Projectiles&#10;{&#10;    public class ProjectileFireball : BaseProjectile&#10;    {&#10;        public float destroyTime = 5f;&#10;        [NonSerialized] public float Direction;&#10;        private void OnEnable()&#10;        {&#10;            StartCoroutine(DestroyObject());&#10;        }&#10;        private void OnBecameInvisible()&#10;        {&#10;            ReturnToPool();&#10;        }&#10;        private void OnCollisionEnter2D(Collision2D other)&#10;        {&#10;            if (other.gameObject.CompareTag(&quot;Player&quot;))&#10;                return;&#10;&#10;            Debug.Log($&quot;Laser hit {other.gameObject.name}.&quot;);&#10;            ReturnToPool();&#10;        }&#10;        private IEnumerator DestroyObject()&#10;        {&#10;            yield return new WaitForSeconds(destroyTime);&#10;            ReturnToPool();&#10;        }&#10;&#10;&#10;        public override WeaponType WeaponType =&gt; WeaponType.Fireball;&#10;        protected override void Move()&#10;        {&#10;            Rb.linearVelocity = new Vector2(speed.x * Direction, speed.y);&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using System;&#10;using System.Collections;&#10;using Projectiles.Core;&#10;using UnityEngine;&#10;using Weapons;&#10;&#10;namespace Projectiles&#10;{&#10;    public class ProjectileFireball : BaseProjectile&#10;    {&#10;        public float destroyTime = 5f;&#10;        [NonSerialized] public float Direction;&#10;        private void OnEnable()&#10;        {&#10;            StartCoroutine(DestroyObject());&#10;        }&#10;        private void OnBecameInvisible()&#10;        {&#10;            ReturnToPool();&#10;        }&#10;        private void OnCollisionEnter2D(Collision2D other)&#10;        {&#10;            if (other.gameObject.CompareTag(&quot;Player&quot;))&#10;                return;&#10;&#10;            Debug.Log($&quot;Laser hit {other.gameObject.name}.&quot;);&#10;            ReturnToPool();&#10;        }&#10;        private IEnumerator DestroyObject()&#10;        {&#10;            yield return new WaitForSeconds(destroyTime);&#10;            ReturnToPool();&#10;        }&#10;&#10;        // Remove the override property and use a settable property instead&#10;        public override WeaponType WeaponType { get; set; }&#10;&#10;        protected override void Move()&#10;        {&#10;            Rb.linearVelocity = new Vector2(speed.x * Direction, speed.y);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/Assets/Scripts/Weapons/Models/FireballWeapon.cs">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/Assets/Scripts/Weapons/Models/FireballWeapon.cs" />
              <option name="originalContent" value="using Projectiles;&#10;using UnityEngine;&#10;using Weapons.Interfaces;&#10;&#10;namespace Weapons.Models&#10;{&#10;    public class FireballWeapon : MonoBehaviour, IUseableWeapon&#10;    {&#10;        [SerializeField] private WeaponType weaponType = WeaponType.Fireball;&#10;&#10;        [SerializeField] private Transform spawnPoint;&#10;        [SerializeField] private float cooldownTime = 0.3f;&#10;        [SerializeField] private FireballPool fireballPool;&#10;&#10;        private float _nextFireTime;&#10;&#10;        public bool IsEquipped { get; private set; }&#10;        public WeaponType WeaponType =&gt; weaponType;&#10;&#10;        public void Shoot()&#10;        {&#10;            // Check if weapon is equipped&#10;            if (!IsEquipped)&#10;                return;&#10;&#10;            // Check cooldown&#10;            if (Time.time &lt; _nextFireTime)&#10;                return;&#10;&#10;            GameObject curFireball = fireballPool.Get();&#10;            Vector3 spawnPosition = spawnPoint ? spawnPoint.position : transform.position;&#10;            curFireball.transform.position = spawnPosition;&#10;            curFireball.transform.rotation = Quaternion.identity;&#10;&#10;            if (curFireball.TryGetComponent(out ProjectileFireball scFireball))&#10;            {&#10;                curFireball.layer = gameObject.layer;&#10;                scFireball.Direction = transform.parent?.localScale.x ?? 1;&#10;                scFireball.Fire();&#10;&#10;                // Set cooldown&#10;                _nextFireTime = Time.time + cooldownTime;&#10;            }&#10;        }&#10;&#10;        public void Equip()&#10;        {&#10;            IsEquipped = true;&#10;        }&#10;&#10;        public void UnEquip()&#10;        {&#10;            IsEquipped = false;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="using Projectiles;&#10;using UnityEngine;&#10;using Weapons.Interfaces;&#10;&#10;namespace Weapons.Models&#10;{&#10;    public class FireballWeapon : MonoBehaviour, IUseableWeapon&#10;    {&#10;        [SerializeField] private WeaponType weaponType = WeaponType.Fireball;&#10;&#10;        [SerializeField] private Transform spawnPoint;&#10;        [SerializeField] private float cooldownTime = 0.3f;&#10;        [SerializeField] private FireballPool fireballPool;&#10;&#10;        private float _nextFireTime;&#10;&#10;        public bool IsEquipped { get; private set; }&#10;        public WeaponType WeaponType =&gt; weaponType;&#10;&#10;        public void Shoot()&#10;        {&#10;            // Check if weapon is equipped&#10;            if (!IsEquipped)&#10;                return;&#10;&#10;            // Check cooldown&#10;            if (Time.time &lt; _nextFireTime)&#10;                return;&#10;&#10;            GameObject curFireball = fireballPool.Get();&#10;            Vector3 spawnPosition = spawnPoint ? spawnPoint.position : transform.position;&#10;            curFireball.transform.position = spawnPosition;&#10;            curFireball.transform.rotation = Quaternion.identity;&#10;&#10;            if (curFireball.TryGetComponent(out ProjectileFireball scFireball))&#10;            {&#10;                curFireball.layer = gameObject.layer;&#10;                scFireball.Direction = transform.parent?.localScale.x ?? 1;&#10;                scFireball.WeaponType = weaponType; // Set the weapon type from the shooter&#10;                scFireball.Fire();&#10;&#10;                // Set cooldown&#10;                _nextFireTime = Time.time + cooldownTime;&#10;            }&#10;        }&#10;&#10;        public void Equip()&#10;        {&#10;            IsEquipped = true;&#10;        }&#10;&#10;        public void UnEquip()&#10;        {&#10;            IsEquipped = false;&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>